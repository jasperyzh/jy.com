---
import BaseLayout from "@/layouts/BaseLayout.astro";

const title = "Procedural World Generator";
---

<BaseLayout title={title}>
  <style>
    .world-generator {
      canvas {
        background: #000;
        display: block;
        margin: 20px auto;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      }
      .controls {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
      }
      .control-group {
        background: white;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
      }
      button {
        background: #4caf50;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 10px;
      }
      button:hover {
        background: #45a049;
      }
      label {
        display: block;
        margin: 10px 0 5px;
        font-weight: bold;
      }
      input[type="range"] {
        width: 100%;
      }
      .value-display {
        color: #666;
        font-size: 14px;
      }
      .legend {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 15px;
      }
      .legend-item {
        display: flex;
        align-items: center;
        margin-right: 15px;
      }
      .legend-color {
        width: 20px;
        height: 20px;
        margin-right: 5px;
        border: 1px solid #777;
      }
    }
  </style>
  <div class="container mx-auto">
    <h1>Procedural World Generator</h1>
    <div class="controls">
      <div class="control-group">
        <label for="seed">Seed</label>
        <input type="number" id="seed" value="42" />
        <label for="octaves"
          >Octaves: <span class="value-display" id="octaves-value">4</span
          ></label
        >
        <input type="range" id="octaves" min="1" max="8" step="1" value="4" />
        <label for="scale"
          >Scale: <span class="value-display" id="scale-value">50</span></label
        >
        <input type="range" id="scale" min="10" max="200" value="50" />
        <label for="persistence"
          >Persistence: <span class="value-display" id="persistence-value"
            >0.5</span
          ></label
        >
        <input
          type="range"
          id="persistence"
          min="0.1"
          max="1"
          step="0.1"
          value="0.5"
        />
        <button id="generate">Generate World</button>
      </div>
      <div class="control-group">
        <h3>Biome Thresholds</h3>
        <label for="water"
          >Water: <span class="value-display" id="water-value">-0.2</span
          ></label
        >
        <input
          type="range"
          id="water"
          min="-1"
          max="1"
          step="0.05"
          value="-0.2"
        />
        <label for="sand"
          >Sand: <span class="value-display" id="sand-value">-0.1</span></label
        >
        <input
          type="range"
          id="sand"
          min="-1"
          max="1"
          step="0.05"
          value="-0.1"
        />
        <label for="grass"
          >Grass: <span class="value-display" id="grass-value">0.2</span></label
        >
        <input
          type="range"
          id="grass"
          min="-1"
          max="1"
          step="0.05"
          value="0.2"
        />
        <label for="forest"
          >Forest: <span class="value-display" id="forest-value">0.4</span
          ></label
        >
        <input
          type="range"
          id="forest"
          min="-1"
          max="1"
          step="0.05"
          value="0.4"
        />
        <label for="mountain"
          >Mountain: <span class="value-display" id="mountain-value">0.6</span
          ></label
        >
        <input
          type="range"
          id="mountain"
          min="-1"
          max="1"
          step="0.05"
          value="0.6"
        />
      </div>
    </div>
    <div class="legend">
      <div class="legend-item">
        <div class="legend-color" style="background:#1a1aff;"></div>Deep Water
      </div>
      <div class="legend-item">
        <div class="legend-color" style="background:#4d4dff;"></div>Shallow
        Water
      </div>
      <div class="legend-item">
        <div class="legend-color" style="background:#f2e68a;"></div>Sand
      </div>
      <div class="legend-item">
        <div class="legend-color" style="background:#7cfc00;"></div>Grass
      </div>
      <div class="legend-item">
        <div class="legend-color" style="background:#228b22;"></div>Forest
      </div>
      <div class="legend-item">
        <div class="legend-color" style="background:#8b4513;"></div>Mountain
      </div>
      <div class="legend-item">
        <div class="legend-color" style="background:#ffffff;"></div>Snow
      </div>
    </div>
    <canvas id="world" width="800" height="600"></canvas>
  </div>

  <script>
    // DOM elements
    const canvas = document.getElementById("world");
    const ctx = canvas.getContext("2d");
    const seedInput = document.getElementById("seed");
    const octavesInput = document.getElementById("octaves");
    const scaleInput = document.getElementById("scale");
    const persistenceInput = document.getElementById("persistence");
    const generateBtn = document.getElementById("generate");

    // Biome threshold controls
    const waterInput = document.getElementById("water");
    const sandInput = document.getElementById("sand");
    const grassInput = document.getElementById("grass");
    const forestInput = document.getElementById("forest");
    const mountainInput = document.getElementById("mountain");

    // Value displays
    document.getElementById("octaves-value").textContent = octavesInput.value;
    document.getElementById("scale-value").textContent = scaleInput.value;
    document.getElementById("persistence-value").textContent =
      persistenceInput.value;
    document.getElementById("water-value").textContent = waterInput.value;
    document.getElementById("sand-value").textContent = sandInput.value;
    document.getElementById("grass-value").textContent = grassInput.value;
    document.getElementById("forest-value").textContent = forestInput.value;
    document.getElementById("mountain-value").textContent = mountainInput.value;

    // Update value displays
    octavesInput.addEventListener("input", () => {
      document.getElementById("octaves-value").textContent = octavesInput.value;
    });
    scaleInput.addEventListener("input", () => {
      document.getElementById("scale-value").textContent = scaleInput.value;
    });
    persistenceInput.addEventListener("input", () => {
      document.getElementById("persistence-value").textContent =
        persistenceInput.value;
    });
    waterInput.addEventListener("input", () => {
      document.getElementById("water-value").textContent = waterInput.value;
    });
    sandInput.addEventListener("input", () => {
      document.getElementById("sand-value").textContent = sandInput.value;
    });
    grassInput.addEventListener("input", () => {
      document.getElementById("grass-value").textContent = grassInput.value;
    });
    forestInput.addEventListener("input", () => {
      document.getElementById("forest-value").textContent = forestInput.value;
    });
    mountainInput.addEventListener("input", () => {
      document.getElementById("mountain-value").textContent =
        mountainInput.value;
    });

    // Simple seeded random number generator
    class SeededRandom {
      constructor(seed) {
        this.seed = seed % 2147483647;
        if (this.seed <= 0) this.seed += 2147483646;
      }

      next() {
        this.seed = (this.seed * 16807) % 2147483647;
        return (this.seed - 1) / 2147483646;
      }
    }

    // Gradient vector class
    class Gradient {
      constructor(x, y, z = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
      }

      dot2(x, y) {
        return this.x * x + this.y * y;
      }
    }

    // Simplified 2D Perlin noise generator
    class PerlinNoise {
      constructor(seed = 0) {
        this.seed = seed;
        this.random = new SeededRandom(seed);
        this.gradients = [];
        this.generatePermutation();
      }

      generatePermutation() {
        this.perm = new Array(256);
        for (let i = 0; i < 256; i++) {
          this.perm[i] = i;
        }

        // Shuffle the array
        for (let i = 255; i > 0; i--) {
          const j = Math.floor(this.random.next() * (i + 1));
          [this.perm[i], this.perm[j]] = [this.perm[j], this.perm[i]];
        }

        // Duplicate the permutation array to avoid overflow
        this.perm = this.perm.concat(this.perm);

        // Generate gradient vectors
        const gradients = [
          new Gradient(1, 1),
          new Gradient(-1, 1),
          new Gradient(1, -1),
          new Gradient(-1, -1),
          new Gradient(1, 0),
          new Gradient(-1, 0),
          new Gradient(0, 1),
          new Gradient(0, -1),
        ];

        this.gradients = new Array(256);
        for (let i = 0; i < 256; i++) {
          this.gradients[i] =
            gradients[Math.floor(this.random.next() * gradients.length)];
        }
      }

      fade(t) {
        return t * t * t * (t * (t * 6 - 15) + 10);
      }

      lerp(a, b, t) {
        return (1 - t) * a + t * b;
      }

      noise(x, y) {
        // Find unit grid cell containing point
        const X = Math.floor(x) & 255;
        const Y = Math.floor(y) & 255;

        // Get relative coordinates of point within that cell
        x -= Math.floor(x);
        y -= Math.floor(y);

        // Compute fade curves for x and y
        const u = this.fade(x);
        const v = this.fade(y);

        // Hash coordinates of the 4 cube corners
        const A = this.perm[X] + Y;
        const B = this.perm[X + 1] + Y;

        // Calculate dot products
        const g0 = this.gradients[this.perm[A]];
        const g1 = this.gradients[this.perm[B]];
        const g2 = this.gradients[this.perm[A + 1]];
        const g3 = this.gradients[this.perm[B + 1]];

        const n0 = g0.dot2(x, y);
        const n1 = g1.dot2(x - 1, y);
        const n2 = g2.dot2(x, y - 1);
        const n3 = g3.dot2(x - 1, y - 1);

        // Interpolate between the dot products
        const nx0 = this.lerp(n0, n1, u);
        const nx1 = this.lerp(n2, n3, u);

        return this.lerp(nx0, nx1, v);
      }

      octaveNoise(x, y, octaves, persistence) {
        let total = 0;
        let frequency = 1;
        let amplitude = 1;
        let maxValue = 0;

        for (let i = 0; i < octaves; i++) {
          total += this.noise(x * frequency, y * frequency) * amplitude;
          maxValue += amplitude;
          amplitude *= persistence;
          frequency *= 2;
        }

        return total / maxValue;
      }
    }

    // Generate the world
    function generateWorld() {
      const seed = parseInt(seedInput.value);
      const octaves = parseInt(octavesInput.value);
      const scale = parseInt(scaleInput.value);
      const persistence = parseFloat(persistenceInput.value);

      const water = parseFloat(waterInput.value);
      const sand = parseFloat(sandInput.value);
      const grass = parseFloat(grassInput.value);
      const forest = parseFloat(forestInput.value);
      const mountain = parseFloat(mountainInput.value);

      const width = canvas.width;
      const height = canvas.height;

      const perlin = new PerlinNoise(seed);
      const pixels = ctx.createImageData(width, height);

      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          const nx = x / width - 0.5;
          const ny = y / height - 0.5;

          // Generate Perlin noise value
          let value = perlin.octaveNoise(
            nx * scale,
            ny * scale,
            octaves,
            persistence
          );

          // Determine biome based on noise value
          let r = 0,
            g = 0,
            b = 0;

          if (value < water) {
            // Deep water
            r = 26;
            g = 26;
            b = 255;
          } else if (value < sand) {
            // Shallow water
            r = 77;
            g = 77;
            b = 255;
          } else if (value < grass) {
            // Sand
            r = 242;
            g = 230;
            b = 138;
          } else if (value < forest) {
            // Grass
            r = 124;
            g = 252;
            b = 0;
          } else if (value < mountain) {
            // Forest
            r = 34;
            g = 139;
            b = 34;
          } else if (value < 0.8) {
            // Mountain
            r = 139;
            g = 69;
            b = 19;
          } else {
            // Snow
            r = 255;
            g = 255;
            b = 255;
          }

          const idx = (y * width + x) * 4;
          pixels.data[idx] = r;
          pixels.data[idx + 1] = g;
          pixels.data[idx + 2] = b;
          pixels.data[idx + 3] = 255; // Alpha
        }
      }

      ctx.putImageData(pixels, 0, 0);
    }

    // Event listeners
    generateBtn.addEventListener("click", generateWorld);

    // Generate initial world
    window.addEventListener("load", generateWorld);
  </script>
</BaseLayout>
