---
import BaseLayout from "@/layouts/BaseLayout.astro";
---

<BaseLayout title="Quiz Game">
  <main id="quiz-game-container">
    <h1>Exercise Page - Quiz Game</h1>
    <p>
      [241205-quizgame] This page contains an interactive Quiz Game component.
    </p>

    <div id="quiz-app"></div>
    <div id="confetti-container"></div>

    <!-- Volume Control UI -->
    <div class="audio-controls">
      <label for="volume-slider">Volume:</label>
      <input type="range" id="volume-slider" min="0" max="100" value="40" />
      <button id="mute-toggle">ðŸ”Š</button>
    </div>
  </main>
</BaseLayout>

<script>
  // Import Vue from CDN in the client-side script
  import {
    createApp,
    ref,
    computed,
    onMounted,
    watch,
  } from "vue/dist/vue.esm-bundler.js";
  import { audioPlayer } from "@/utils/custom-tone.js";

  // Confetti function
  function createConfetti() {
    const container = document.getElementById("confetti-container");
    if (!container) return; // Guard clause for null check

    const colors = [
      "#667eea",
      "#764ba2",
      "#48bb78",
      "#38a169",
      "#f56565",
      "#e53e3e",
      "#fbd38d",
      "#ed8936",
    ];
    const confettiCount = 200;

    // Clear any existing confetti
    container.innerHTML = ""; // Safe to use since we have the guard clause above

    for (let i = 0; i < confettiCount; i++) {
      const confetti = document.createElement("div");
      const size = Math.random() * 10 + 5; // Random size between 5-15px

      confetti.style.position = "absolute";
      confetti.style.width = `${size}px`;
      confetti.style.height = `${size}px`;
      confetti.style.backgroundColor =
        colors[Math.floor(Math.random() * colors.length)];
      confetti.style.borderRadius = Math.random() > 0.5 ? "50%" : "0"; // Circle or square
      confetti.style.opacity = `${Math.random() * 0.8 + 0.2}`; // Convert to string for TypeScript

      // Random starting position (top of screen, random horizontal position)
      confetti.style.left = `${Math.random() * 100}vw`;
      confetti.style.top = `-${size}px`;

      // Random rotation
      confetti.style.transform = `rotate(${Math.random() * 360}deg)`;

      // Animation properties
      const duration = Math.random() * 3 + 2; // 2-5 seconds
      const delay = Math.random() * 2; // 0-2 seconds delay

      confetti.style.animation = `fall ${duration}s ease-in ${delay}s forwards`;

      // Safe to use since we have the guard clause above
      container.appendChild(confetti);

      // Remove confetti after animation completes
      setTimeout(
        () => {
          confetti.remove();
        },
        (duration + delay) * 1000
      );
    }

    // Add fall animation to the document if it doesn't exist
    if (!document.getElementById("confetti-animation")) {
      const style = document.createElement("style");
      style.id = "confetti-animation";
      style.textContent = `
                        @keyframes fall {
                            0% { transform: translateY(0) rotate(0deg); }
                            100% { transform: translateY(100vh) rotate(720deg); }
                        }
                    `;
      document.head.appendChild(style);
    }
  }

  const QuizGame = {
    setup() {
      // Removed async to avoid Suspense requirement
      // Quiz questions
      const questions = [
        {
          question: "What is the capital of France?",
          options: ["Paris", "London", "Berlin", "Madrid"],
          correctAnswer: "Paris",
        },
        {
          question: "Which planet is known as the Red Planet?",
          options: ["Venus", "Mars", "Jupiter", "Saturn"],
          correctAnswer: "Mars",
        },
        {
          question: "What is the largest mammal in the world?",
          options: ["Elephant", "Blue Whale", "Giraffe", "Hippopotamus"],
          correctAnswer: "Blue Whale",
        },
        {
          question: "Which element has the chemical symbol 'O'?",
          options: ["Gold", "Oxygen", "Osmium", "Oganesson"],
          correctAnswer: "Oxygen",
        },
        {
          question: "Who wrote 'Romeo and Juliet'?",
          options: [
            "Charles Dickens",
            "William Shakespeare",
            "Jane Austen",
            "Mark Twain",
          ],
          correctAnswer: "William Shakespeare",
        },
      ];

      // Game state
      const gameState = ref("start"); // start, playing, result, leaderboard
      const currentQuestionIndex = ref(0);
      const score = ref(0);
      const timeLeft = ref(4); // 4 seconds per question as specified
      const isFlipped = ref(false);
      const selectedAnswer = ref("");
      const timerInterval = ref(null);
      const userName = ref("");
      const leaderboard = ref([]);
      const userRank = ref(null);
      const userTopScore = ref(0);

      // Computed properties
      const currentQuestion = computed(
        () => questions[currentQuestionIndex.value]
      );
      const progressPercentage = computed(
        () => (currentQuestionIndex.value / questions.length) * 100 + "%"
      );
      const timeProgress = computed(() => (timeLeft.value / 4) * 100 + "%");

      // Methods
      // Watch for gameState changes
      onMounted(() => {
        console.log("Quiz component mounted");

        // Add a click handler to the start button to initialize audio
        const startButton = document.querySelector(".start-screen button");
        if (startButton) {
          startButton.addEventListener("click", async () => {
            if (!audioPlayer.initialized) {
              try {
                await audioPlayer.init();
                audioPlayer.setVolume(0.4);
                console.log("Audio initialized on start button click");
              } catch (error) {
                console.error("Failed to initialize audio:", error);
              }
            }
          });
        }
      });

      const startQuiz = () => {
        gameState.value = "playing";
        currentQuestionIndex.value = 0;
        score.value = 0;
        startTimer();
      };

      const startTimer = () => {
        timeLeft.value = 4; // 4 seconds per question
        clearInterval(timerInterval.value);
        timerInterval.value = setInterval(() => {
          timeLeft.value--;
          if (timeLeft.value <= 0) {
            handleTimeout();
          }
        }, 1000);
      };

      const handleTimeout = () => {
        clearInterval(timerInterval.value);
        if (!isFlipped.value) {
          isFlipped.value = true;
          setTimeout(() => {
            nextQuestion();
          }, 1500);
        }
      };

      const selectAnswer = (answer) => {
        if (isFlipped.value) return;

        selectedAnswer.value = answer;
        isFlipped.value = true;
        clearInterval(timerInterval.value);

        // Add animation class based on correct/incorrect answer
        if (answer === currentQuestion.value.correctAnswer) {
          score.value++;
          // Play success sound if audio is initialized
          if (audioPlayer.initialized) {
            audioPlayer.playCorrect();
          }
        } else {
          // Play error sound if audio is initialized
          if (audioPlayer.initialized) {
            audioPlayer.playWrong();
          }
        }

        setTimeout(() => {
          nextQuestion();
        }, 1500);
      };

      const nextQuestion = () => {
        isFlipped.value = false;
        selectedAnswer.value = "";

        if (currentQuestionIndex.value < questions.length - 1) {
          currentQuestionIndex.value++;
          startTimer();
        } else {
          endQuiz();
        }
      };

      const endQuiz = () => {
        clearInterval(timerInterval.value);
        gameState.value = "result";

        // Play completion sound if audio is initialized
        if (audioPlayer.initialized) {
          if (score.value === questions.length) {
            // Perfect score!
            audioPlayer.playPerfect();
          } else {
            // Regular completion
            audioPlayer.playComplete();
          }
        }

        // Trigger confetti effect when quiz ends
        setTimeout(() => {
          createConfetti();
        }, 500);
      };

      const submitScore = () => {
        if (!userName.value.trim()) {
          alert("Please enter your name");
          return;
        }

        // In a real app, you would send this to a server
        // For this demo, we'll just simulate a leaderboard
        const newLeaderboard = [...leaderboard.value];
        newLeaderboard.push({
          name: userName.value,
          score: score.value,
          date: new Date().toLocaleDateString(),
        });

        // Sort by score (descending)
        newLeaderboard.sort((a, b) => b.score - a.score);
        leaderboard.value = newLeaderboard;

        // Find user rank
        userRank.value =
          newLeaderboard.findIndex(
            (entry) =>
              entry.name === userName.value && entry.score === score.value
          ) + 1;

        // Find user top score
        const userScores = newLeaderboard.filter(
          (entry) => entry.name === userName.value
        );
        userTopScore.value =
          userScores.length > 0
            ? Math.max(...userScores.map((entry) => entry.score))
            : 0;

        gameState.value = "leaderboard";
      };

      const restartQuiz = () => {
        gameState.value = "start";
      };

      // Initialize with some sample leaderboard data
      onMounted(() => {
        leaderboard.value = [
          { name: "Alice", score: 5, date: "2025-03-15" },
          { name: "Bob", score: 4, date: "2025-03-14" },
          { name: "Charlie", score: 3, date: "2025-03-13" },
          { name: "David", score: 2, date: "2025-03-12" },
          { name: "Eve", score: 1, date: "2025-03-11" },
        ];
      });

      // Clean up timer when component is unmounted
      onMounted(() => {
        return () => clearInterval(timerInterval.value);
      });

      return {
        gameState,
        currentQuestionIndex,
        currentQuestion,
        score,
        timeLeft,
        isFlipped,
        selectedAnswer,
        progressPercentage,
        timeProgress,
        userName,
        leaderboard,
        userRank,
        userTopScore,
        questions,
        startQuiz,
        selectAnswer,
        submitScore,
        restartQuiz,
      };
    },
    template: `
                    <div class="quiz-container">
                        <!-- Start Screen -->
                        <div v-if="gameState === 'start'" class="start-screen">
                            <h2>Flash Card Quiz</h2>
                            <p>Test your knowledge with 5 questions. You have 4 seconds to answer each question.</p>
                            <p>1 point for each correct answer. Good luck!</p>
                            <button @click="startQuiz">Start Quiz</button>
                        </div>

                        <!-- Playing Screen -->
                        <div v-if="gameState === 'playing'" class="playing-screen">
                            <div class="progress-bar">
                                <div class="progress" :style="{ width: progressPercentage }"></div>
                            </div>
                            <div class="question-counter">Question {{ currentQuestionIndex + 1 }} of {{ questions.length }}</div>
                            
                            <div class="timer">
                                <div>Time left: {{ timeLeft }}s</div>
                                <div class="progress-bar">
                                    <div class="progress" :style="{ width: timeProgress }"></div>
                                </div>
                            </div>
                            
                            <div class="card" :class="{ flipped: isFlipped }">
                                <div class="card-inner">
                                    <div class="card-front">
                                        <div>{{ currentQuestion.question }}</div>
                                    </div>
                                    <div class="card-back">
                                        <div>Answer: {{ currentQuestion.correctAnswer }}</div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="answer-buttons">
                                <button 
                                    v-for="option in currentQuestion.options" 
                                    :key="option"
                                    @click="selectAnswer(option)"
                                    :disabled="isFlipped"
                                    :class="{ 
                                        'correct': isFlipped && option === currentQuestion.correctAnswer,
                                        'incorrect': isFlipped && option === selectedAnswer && option !== currentQuestion.correctAnswer
                                    }"
                                >
                                    {{ option }}
                                </button>
                            </div>
                        </div>

                        <!-- Result Screen -->
                        <div v-if="gameState === 'result'" class="result-screen">
                            <h2>Quiz Completed!</h2>
                            <div class="score-display">
                                Your Score: {{ score }} / {{ questions.length }}
                            </div>
                            <div class="name-input">
                                <label for="user-name">Enter your name to submit your score:</label>
                                <input 
                                    id="user-name" 
                                    v-model="userName" 
                                    type="text" 
                                    placeholder="Your Name"
                                />
                            </div>
                            <div class="controls">
                                <button @click="submitScore">Submit Score</button>
                                <button @click="restartQuiz">Try Again</button>
                            </div>
                        </div>

                        <!-- Leaderboard Screen -->
                        <div v-if="gameState === 'leaderboard'" class="leaderboard">
                            <h2>Leaderboard</h2>
                            <div class="user-stats">
                                <p>Your Score: {{ score }} / {{ questions.length }}</p>
                                <p>Your Top Score: {{ userTopScore }}</p>
                                <p>Your Rank: {{ userRank }}</p>
                            </div>
                            <table class="leaderboard-table">
                                <thead>
                                    <tr>
                                        <th>Rank</th>
                                        <th>Name</th>
                                        <th>Score</th>
                                        <th>Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="(entry, index) in leaderboard" :key="index"
                                        :class="{ 'user-row': entry.name === userName && entry.score === score }">
                                        <td>{{ index + 1 }}</td>
                                        <td>{{ entry.name }}</td>
                                        <td>{{ entry.score }}</td>
                                        <td>{{ entry.date }}</td>
                                    </tr>
                                </tbody>
                            </table>
                            <div class="controls">
                                <button @click="restartQuiz">Play Again</button>
                                <button @click="() => window.location.href = '/'">Back to Home</button>
                            </div>
                        </div>
                    </div>
                `,
  };

  // Mount the Vue app when the document is ready
  document.addEventListener("DOMContentLoaded", () => {
    // Create the app without initializing audio yet
    const app = createApp(QuizGame);
    app.mount("#quiz-app");

    // Set up volume controls (without initializing audio yet)
    const volumeSlider = document.getElementById("volume-slider");
    const muteToggle = document.getElementById("mute-toggle");

    if (volumeSlider && muteToggle) {
      // First interaction with audio controls will initialize audio
      const initAudioOnInteraction = async () => {
        try {
          if (!audioPlayer.initialized) {
            console.log("Initializing audio on user interaction");
            await audioPlayer.init();
            audioPlayer.setVolume(0.4);
          }
        } catch (error) {
          console.error("Failed to initialize audio:", error);
        }
      };

      // Update volume when slider changes
      volumeSlider.addEventListener("input", async (e) => {
        await initAudioOnInteraction();

        const target = e.target as HTMLInputElement;
        if (!target) return;

        const volume = Number(target.value) / 100;
        audioPlayer.setVolume(volume);

        // Update mute button icon based on volume
        muteToggle.textContent = volume === 0 ? "ðŸ”‡" : "ðŸ”Š";
      });

      // Toggle mute when button is clicked
      muteToggle.addEventListener("click", async () => {
        await initAudioOnInteraction();

        if (audioPlayer.isMuted) {
          audioPlayer.unmute();
          muteToggle.textContent = "ðŸ”Š";
          // TypeScript doesn't know volumeSlider is an HTMLInputElement
          (volumeSlider as HTMLInputElement).value = String(
            audioPlayer.volume * 100
          );
        } else {
          audioPlayer.mute();
          muteToggle.textContent = "ðŸ”‡";
        }
      });
    }
  });
</script>
<style is:global>
  #quiz-game-container {
    #quiz-app {
      background-color: white;
      border-radius: 20px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      padding: 30px;
      margin-top: 20px;
      overflow: hidden;
      position: relative;
    }

    .quiz-container {
      animation: fadeIn 0.5s ease-in-out;
    }

    .start-screen,
    .result-screen,
    .leaderboard {
      text-align: center;
      padding: 20px;
    }

    h2 {
      font-size: 32px;
      color: #333;
      margin-bottom: 20px;
      font-weight: 700;
    }

    .card {
      perspective: 1000px;
      width: 100%;
      height: 300px;
      margin: 30px 0;
      position: relative;
    }

    .card-inner {
      width: 100%;
      height: 100%;
      position: relative;
      transform-style: preserve-3d;
      transition: transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      border-radius: 20px;
      box-shadow:
        0 15px 35px rgba(50, 50, 93, 0.1),
        0 5px 15px rgba(0, 0, 0, 0.07);
    }

    .flipped .card-inner {
      transform: rotateY(180deg);
    }

    .card-front,
    .card-back {
      position: absolute;
      width: 100%;
      height: 100%;
      backface-visibility: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 20px;
      padding: 30px;
      box-sizing: border-box;
      font-size: 28px;
      font-weight: 600;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    }

    .card-front {
      background: linear-gradient(135deg, #f5f7fa 0%, #e4e7eb 100%);
      color: #333;
    }

    .card-back {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      transform: rotateY(180deg);
    }

    .timer {
      font-size: 28px;
      text-align: center;
      margin: 20px 0;
      color: #667eea;
      font-weight: 600;
    }

    .progress-bar {
      width: 100%;
      height: 12px;
      background-color: #e4e7eb;
      border-radius: 10px;
      margin-bottom: 20px;
      overflow: hidden;
    }

    .progress {
      height: 100%;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
      border-radius: 10px;
      transition: width 0.2s ease-out;
    }

    .controls {
      display: flex;
      justify-content: space-between;
      margin-top: 30px;
      gap: 15px;
    }

    button {
      padding: 12px 24px;
      border: none;
      border-radius: 10px;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
      color: white;
      cursor: pointer;
      font-size: 18px;
      font-weight: 500;
      transition: all 0.3s ease;
      box-shadow:
        0 4px 6px rgba(50, 50, 93, 0.11),
        0 1px 3px rgba(0, 0, 0, 0.08);
      flex: 1;
      font-family: "Poppins", sans-serif;
    }

    button:hover {
      transform: translateY(-2px);
      box-shadow:
        0 7px 14px rgba(50, 50, 93, 0.1),
        0 3px 6px rgba(0, 0, 0, 0.08);
      filter: brightness(1.05);
    }

    button:active {
      transform: translateY(1px);
    }

    button:disabled {
      background: #d1d5db;
      cursor: not-allowed;
      box-shadow: none;
      transform: none;
    }

    .answer-buttons {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      margin-top: 25px;
    }

    .correct {
      background: linear-gradient(90deg, #48bb78 0%, #38a169 100%) !important;
      animation: pulse 0.5s;
    }

    .incorrect {
      background: linear-gradient(90deg, #f56565 0%, #e53e3e 100%) !important;
      animation: shake 0.5s;
    }

    .score-display {
      text-align: center;
      margin: 30px 0;
      font-size: 36px;
      font-weight: 700;
      color: #667eea;
    }

    .leaderboard {
      margin-top: 30px;
      background-color: white;
      border-radius: 20px;
      padding: 25px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
    }

    .user-stats {
      background: linear-gradient(135deg, #f5f7fa 0%, #e4e7eb 100%);
      padding: 15px;
      border-radius: 15px;
      margin-bottom: 20px;
      font-weight: 500;
    }

    .leaderboard-table {
      width: 100%;
      border-collapse: collapse;
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    }

    .leaderboard-table th,
    .leaderboard-table td {
      padding: 15px;
      text-align: left;
      border-bottom: 1px solid #edf2f7;
    }

    .leaderboard-table th {
      background-color: #f7fafc;
      font-weight: 600;
      color: #4a5568;
    }

    .leaderboard-table tr:last-child td {
      border-bottom: none;
    }

    .user-row {
      background-color: #ebf4ff;
      font-weight: 600;
    }

    .name-input {
      margin: 25px 0;
      display: flex;
      flex-direction: column;
    }

    .name-input label {
      font-weight: 500;
      margin-bottom: 10px;
    }

    .name-input input {
      padding: 15px;
      margin-top: 5px;
      border: 2px solid #e2e8f0;
      border-radius: 10px;
      font-size: 16px;
      transition: border-color 0.3s;
      font-family: "Poppins", sans-serif;
    }

    .name-input input:focus {
      border-color: #667eea;
      outline: none;
    }

    .question-counter {
      text-align: center;
      font-weight: 500;
      color: #4a5568;
      margin-bottom: 10px;
    }

    /* Animations */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.05);
      }
      100% {
        transform: scale(1);
      }
    }

    @keyframes shake {
      0%,
      100% {
        transform: translateX(0);
      }
      20%,
      60% {
        transform: translateX(-5px);
      }
      40%,
      80% {
        transform: translateX(5px);
      }
    }

    /* Confetti container */
    #confetti-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 9999;
    }

    /* Audio Controls Styling */
    .audio-controls {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 1000;
      display: flex;
      align-items: center;
      background: rgba(255, 255, 255, 0.8);
      padding: 10px;
      border-radius: 50px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .audio-controls label {
      margin-right: 10px;
      font-weight: 500;
      font-size: 14px;
    }

    .audio-controls input[type="range"] {
      width: 80px;
      margin-right: 10px;
    }

    .audio-controls button {
      background: none;
      border: none;
      cursor: pointer;
      font-size: 18px;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 30px;
      height: 30px;
      border-radius: 50%;
      transition: all 0.2s;
    }

    .audio-controls button:hover {
      background: rgba(0, 0, 0, 0.1);
    }
  }
</style>
