---
// GSAP Animation Showcase - https://gsap.com/resources/
import BaseLayout from "@/layouts/BaseLayout.astro";

const sketch_title = "GSAP Animation Showcase";
---

<BaseLayout title={sketch_title}>
  <!-- GSAP CDN Scripts -->
  <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
  <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
  <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollToPlugin.min.js"></script>
  <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/TextPlugin.min.js"></script>

  <style>
    /* Reset and global styles */
    /* body {
      margin: 0;
      padding: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      color: #333;
      overflow-x: hidden;
      scroll-behavior: smooth;
    } */

    /* Navigation */
    .gsap-nav {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      padding: 10px 0;
      z-index: 1000;
      display: flex;
      justify-content: center;
      gap: 20px;
    }

    .gsap-nav a {
      color: white;
      text-decoration: none;
      padding: 8px 16px;
      border-radius: 4px;
      transition: background 0.3s ease;
    }

    .gsap-nav a:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    /* Section styling */
    .section {
      min-height: 100vh;
      padding: 80px 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }

    .section-content {
      max-width: 1200px;
      width: 100%;
      z-index: 1;
    }

    .section h2 {
      font-size: 3rem;
      margin-bottom: 1.5rem;
      opacity: 0; /* Start invisible for animation */
    }

    .section p {
      font-size: 1.2rem;
      line-height: 1.6;
      margin-bottom: 2rem;
      max-width: 800px;
      opacity: 0; /* Start invisible for animation */
    }

    /* Section backgrounds */
    #hero {
      background: linear-gradient(135deg, #3498db, #8e44ad);
      color: white;
      text-align: center;
    }

    #tweens {
      background: linear-gradient(135deg, #2ecc71, #1abc9c);
      color: white;
    }

    #timelines {
      background: linear-gradient(135deg, #e74c3c, #f39c12);
      color: white;
    }

    #eases {
      background: linear-gradient(135deg, #9b59b6, #3498db);
      color: white;
    }

    #staggers {
      background: linear-gradient(135deg, #f1c40f, #e67e22);
      color: white;
    }

    #scroll-trigger {
      background: linear-gradient(135deg, #2c3e50, #34495e);
      color: white;
    }

    #interactive {
      background: linear-gradient(135deg, #16a085, #27ae60);
      color: white;
    }

    #responsive {
      background: linear-gradient(135deg, #d35400, #c0392b);
      color: white;
    }

    /* Animation elements */
    .box {
      width: 100px;
      height: 100px;
      background: white;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 10px;
      color: #333;
      font-weight: bold;
      will-change: transform, opacity;
    }

    .boxes-container {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 40px;
    }

    .hero-text {
      font-size: 5rem;
      font-weight: bold;
      margin-bottom: 1rem;
      opacity: 0;
    }

    .hero-subtitle {
      font-size: 1.5rem;
      margin-bottom: 2rem;
      opacity: 0;
    }

    .hero-button {
      padding: 12px 32px;
      background: white;
      color: #3498db;
      border: none;
      border-radius: 30px;
      font-size: 1.2rem;
      cursor: pointer;
      opacity: 0;
      transform: scale(0.8);
    }
  </style>

  <!-- Navigation -->
  <div class="gsap-nav">
    <a href="#hero">Home</a>
    <a href="#tweens">Tweens</a>
    <a href="#timelines">Timelines</a>
    <a href="#eases">Eases</a>
    <a href="#staggers">Staggers</a>
    <a href="#scroll-trigger">Scroll Effects</a>
    <a href="#interactive">Interactive</a>
  </div>

  <!-- Main Content -->
  <div class="container mx-auto">
    <!-- Hero Section -->
    <section id="hero" class="section">
      <div class="section-content">
        <div class="hero-text">GSAP Animation</div>
        <div class="hero-subtitle">Exploring the powerful animation capabilities of GreenSock Animation Platform</div>
        <button class="hero-button">Get Started</button>
      </div>
    </section>

    <!-- Tweens Section -->
    <section id="tweens" class="section">
      <div class="section-content">
        <h2>Basic Tweens</h2>
        <p>
          GSAP tweens are the foundation of animations. They animate properties of elements over time with precise control.
          Here are some examples of basic tweens with different properties.
        </p>
        <div class="boxes-container tweens-demo">
          <div class="box tween-box">Scale</div>
          <div class="box tween-box">Rotate</div>
          <div class="box tween-box">Move</div>
          <div class="box tween-box">Fade</div>
        </div>
      </div>
    </section>

    <!-- Timelines Section -->
    <section id="timelines" class="section">
      <div class="section-content">
        <h2>Timelines</h2>
        <p>
          GSAP timelines allow you to sequence animations with precise control. You can overlap animations, add labels, and control the entire sequence as a single unit.
        </p>
        <div class="boxes-container timeline-demo">
          <div class="box timeline-box">1</div>
          <div class="box timeline-box">2</div>
          <div class="box timeline-box">3</div>
          <div class="box timeline-box">4</div>
        </div>
        <button class="timeline-control" style="margin-top: 30px; padding: 10px 20px; cursor: pointer;">Play Timeline</button>
      </div>
    </section>

    <!-- Eases Section -->
    <section id="eases" class="section">
      <div class="section-content">
        <h2>Eases & Effects</h2>
        <p>
          GSAP provides a variety of easing functions that control how animations progress over time. They add character and life to your animations.
        </p>
        <div class="boxes-container eases-demo">
          <div class="box ease-box" data-ease="power2.out">Power2</div>
          <div class="box ease-box" data-ease="elastic.out(1, 0.3)">Elastic</div>
          <div class="box ease-box" data-ease="bounce.out">Bounce</div>
          <div class="box ease-box" data-ease="back.out(1.7)">Back</div>
        </div>
      </div>
    </section>

    <!-- Staggers Section -->
    <section id="staggers" class="section">
      <div class="section-content">
        <h2>Staggers</h2>
        <p>
          GSAP staggers create sequential animations with precise timing offsets. Perfect for creating ripple effects, cascading animations, and more.
        </p>
        <div class="boxes-container staggers-demo">
          <div class="box stagger-box">1</div>
          <div class="box stagger-box">2</div>
          <div class="box stagger-box">3</div>
          <div class="box stagger-box">4</div>
          <div class="box stagger-box">5</div>
          <div class="box stagger-box">6</div>
          <div class="box stagger-box">7</div>
          <div class="box stagger-box">8</div>
        </div>
      </div>
    </section>

    <!-- Scroll Trigger Section -->
    <section id="scroll-trigger" class="section">
      <div class="section-content">
        <h2>ScrollTrigger</h2>
        <p>
          ScrollTrigger enables scroll-based animations with fine-tuned control over when animations start, end, and how they progress as the user scrolls.
        </p>
        <div class="scroll-demo" style="height: 600px; position: relative; overflow: hidden;">
          <div class="scroll-element" style="width: 100px; height: 100px; background: white; border-radius: 50%; position: absolute; left: 50%; transform: translateX(-50%); top: 0;">
            Scroll Down
          </div>
          <div class="progress-bar" style="position: absolute; bottom: 0; left: 0; height: 10px; width: 0%; background: white; border-radius: 5px;"></div>
        </div>
      </div>
    </section>

    <!-- Interactive Section -->
    <section id="interactive" class="section">
      <div class="section-content">
        <h2>Interactive Animation</h2>
        <p>
          GSAP allows you to create interactive animations that respond to user input. Drag the circle below to see how GSAP can create smooth, responsive animations.
        </p>
        <div class="interactive-demo" style="height: 300px; position: relative; background: rgba(255,255,255,0.1); border-radius: 16px; overflow: hidden;">
          <div class="draggable-circle" style="width: 80px; height: 80px; background: white; border-radius: 50%; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); cursor: pointer; display: flex; align-items: center; justify-content: center;">
            Drag Me
          </div>
        </div>
      </div>
    </section>

  <script>
    // TypeScript declarations for GSAP
    declare const gsap: any;
    declare const ScrollTrigger: any;
    declare const ScrollToPlugin: any;
    declare const TextPlugin: any;
    
    // Register GSAP plugins
    gsap.registerPlugin(ScrollTrigger, ScrollToPlugin, TextPlugin);

    // Wait for DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', () => {
      // Create a GSAP context for proper cleanup
      const ctx = gsap.context(() => {
        // Hero Section Animation
        const heroTimeline = gsap.timeline();
        
        heroTimeline
          .to('.hero-text', { duration: 1, opacity: 1, y: 0, ease: 'power3.out' })
          .to('.hero-subtitle', { duration: 1, opacity: 1, y: 0, ease: 'power3.out' }, '-=0.7')
          .to('.hero-button', { duration: 0.8, opacity: 1, scale: 1, ease: 'back.out(1.7)' }, '-=0.5');

        // Navigation click handler for smooth scrolling
        document.querySelectorAll('.gsap-nav a').forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const target = link.getAttribute('href');
            gsap.to(window, { duration: 1, scrollTo: target, ease: 'power2.inOut' });
          });
        });

        // Basic Tweens Section
        ScrollTrigger.create({
          trigger: '#tweens',
          start: 'top 80%',
          once: true,
          onEnter: () => {
            gsap.to('#tweens h2', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out' });
            gsap.to('#tweens p', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out', delay: 0.2 });
            
            // Animate the boxes
            const tweenBoxes = document.querySelectorAll('.tween-box');
            
            // Scale animation
            gsap.to(tweenBoxes[0], {
              scale: 1.5,
              duration: 1,
              repeat: -1,
              yoyo: true,
              ease: 'power1.inOut'
            });
            
            // Rotation animation
            gsap.to(tweenBoxes[1], {
              rotation: 360,
              duration: 2,
              repeat: -1,
              ease: 'none'
            });
            
            // Movement animation
            gsap.to(tweenBoxes[2], {
              x: 100,
              duration: 1.5,
              repeat: -1,
              yoyo: true,
              ease: 'power2.inOut'
            });
            
            // Fade animation
            gsap.to(tweenBoxes[3], {
              opacity: 0.2,
              duration: 1,
              repeat: -1,
              yoyo: true,
              ease: 'power2.inOut'
            });
          }
        });

        // Timelines Section
        ScrollTrigger.create({
          trigger: '#timelines',
          start: 'top 80%',
          once: true,
          onEnter: () => {
            gsap.to('#timelines h2', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out' });
            gsap.to('#timelines p', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out', delay: 0.2 });
            
            // Create a paused timeline
            const timelineDemo = gsap.timeline({ paused: true });
            const timelineBoxes = document.querySelectorAll('.timeline-box');
            
            timelineDemo
              .to(timelineBoxes[0], { x: 200, duration: 1, ease: 'power2.out' })
              .to(timelineBoxes[1], { y: -50, duration: 0.8, ease: 'back.out' }, '-=0.5')
              .to(timelineBoxes[2], { rotation: 360, duration: 1.2, ease: 'elastic.out' }, '-=0.3')
              .to(timelineBoxes[3], { scale: 1.5, duration: 0.7, ease: 'power4.out' }, '-=0.7')
              .to(timelineBoxes, { background: '#ff5252', color: 'white', stagger: 0.1 })
              .to(timelineBoxes, { x: 0, y: 0, rotation: 0, scale: 1, background: 'white', color: '#333', duration: 1.5 });
            
            // Add click event to timeline control button
            const timelineControl = document.querySelector('.timeline-control');
            if (timelineControl) {
              timelineControl.addEventListener('click', () => {
                timelineDemo.restart();
              });
            }
          }
        });

        // Eases Section
        ScrollTrigger.create({
          trigger: '#eases',
          start: 'top 80%',
          once: true,
          onEnter: () => {
            gsap.to('#eases h2', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out' });
            gsap.to('#eases p', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out', delay: 0.2 });
            
            // Animate each box with its specific ease
            document.querySelectorAll('.ease-box').forEach(box => {
              const ease = box.getAttribute('data-ease');
              
              gsap.to(box, {
                x: 150,
                duration: 2,
                repeat: -1,
                yoyo: true,
                ease: ease,
                delay: Math.random() * 0.5
              });
            });
          }
        });
        
        // Staggers Section
        ScrollTrigger.create({
          trigger: '#staggers',
          start: 'top 80%',
          once: true,
          onEnter: () => {
            gsap.to('#staggers h2', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out' });
            gsap.to('#staggers p', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out', delay: 0.2 });
            
            // Stagger boxes from center
            gsap.from('.stagger-box', {
              scale: 0,
              opacity: 0, 
              duration: 0.8,
              stagger: 0.1,
              ease: 'back.out(1.7)',
              delay: 0.5
            });
            
            // Create a repeating sequence
            gsap.to('.stagger-box', {
              y: -30,
              duration: 0.5,
              stagger: {
                each: 0.1,
                repeat: -1,
                yoyo: true
              },
              ease: 'power1.inOut',
              delay: 1.5
            });
          }
        });
        
        // ScrollTrigger Demo
        ScrollTrigger.create({
          trigger: '#scroll-trigger',
          start: 'top 80%',
          once: true,
          onEnter: () => {
            gsap.to('#scroll-trigger h2', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out' });
            gsap.to('#scroll-trigger p', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out', delay: 0.2 });
          }
        });
        
        // Animated scroll progress
        ScrollTrigger.create({
          trigger: '.scroll-demo',
          start: 'top 70%',
          end: 'bottom 20%',
          scrub: true,
          onUpdate: (self) => {
            gsap.to('.progress-bar', { width: self.progress * 100 + '%', ease: 'none' });
            gsap.to('.scroll-element', { top: self.progress * 500, ease: 'none' });
          }
        });
        
        // Interactive Draggable
        ScrollTrigger.create({
          trigger: '#interactive',
          start: 'top 80%',
          once: true,
          onEnter: () => {
            gsap.to('#interactive h2', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out' });
            gsap.to('#interactive p', { duration: 0.8, opacity: 1, y: 0, ease: 'power2.out', delay: 0.2 });
            
            const draggable = document.querySelector('.draggable-circle');
            if (draggable) {
              let startX = 0;
              let startY = 0;
              
              const onDragStart = (e) => {
                const isTouch = e.type.startsWith('touch');
                startX = isTouch ? e.touches[0].clientX : e.clientX;
                startY = isTouch ? e.touches[0].clientY : e.clientY;
                
                document.addEventListener('mousemove', onDragging);
                document.addEventListener('touchmove', onDragging);
                document.addEventListener('mouseup', onDragEnd);
                document.addEventListener('touchend', onDragEnd);
                
                gsap.to(draggable, { scale: 1.2, boxShadow: '0 10px 20px rgba(0,0,0,0.3)', duration: 0.3 });
              };
              
              const onDragging = (e) => {
                e.preventDefault();
                const isTouch = e.type.startsWith('touch');
                const x = isTouch ? e.touches[0].clientX : e.clientX;
                const y = isTouch ? e.touches[0].clientY : e.clientY;
                
                const container = document.querySelector('.interactive-demo');
                if (container) {
                  const rect = container.getBoundingClientRect();
                  const offsetX = x - rect.left;
                  const offsetY = y - rect.top;
                  
                  // Keep within bounds
                  const maxX = rect.width - draggable.offsetWidth / 2;
                  const maxY = rect.height - draggable.offsetHeight / 2;
                  const minX = draggable.offsetWidth / 2;
                  const minY = draggable.offsetHeight / 2;
                  
                  const boundedX = Math.min(Math.max(offsetX, minX), maxX);
                  const boundedY = Math.min(Math.max(offsetY, minY), maxY);
                  
                  gsap.to(draggable, {
                    left: boundedX,
                    top: boundedY,
                    duration: 0.5,
                    ease: 'power3.out'
                  });
                }
              };
              
              const onDragEnd = () => {
                document.removeEventListener('mousemove', onDragging);
                document.removeEventListener('touchmove', onDragging);
                document.removeEventListener('mouseup', onDragEnd);
                document.removeEventListener('touchend', onDragEnd);
                
                gsap.to(draggable, { scale: 1, boxShadow: '0 5px 10px rgba(0,0,0,0.1)', duration: 0.3 });
              };
              
              draggable.addEventListener('mousedown', onDragStart);
              draggable.addEventListener('touchstart', onDragStart);
            }
          }
        });
      });

      // Revert animations on page leave
      return () => ctx.revert();
    });
  </script>

</BaseLayout>