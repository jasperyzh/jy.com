<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Dino Dash - Endless Runner</title>
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"
    ></script>
    <style>
      .dino-game {
        #game-container {
          display: inline-block;
          background: #f0f0f0;
        }
      }
    </style>
  </head>
  <body>
    <div class="dino-game">
      <div id="game-container"></div>
    </div>

    <script is:inline>
      class BootScene extends Phaser.Scene {
        constructor() {
          super({ key: "BootScene" });
        }

        preload() {
          // Load assets
          this.load.image("sky", "/gaming/sky.jpg");
          this.load.spritesheet("dino", "/gaming/trex.png", {
            frameWidth: 59,
            frameHeight: 64,
          });
          this.load.image("ground", "/gaming/block.jpg");
          this.load.image("obstacle1", "/gaming/rock.jpg");
          this.load.image("obstacle2", "/gaming/rock.jpg");

          // Load sounds (optional)
          this.load.audio("jump", "/gaming/jump.wav");
          this.load.audio("hit", "/gaming/hitHurt.wav");
        }

        create() {
          this.scene.start("GameScene");
        }
      }

      class GameScene extends Phaser.Scene {
        constructor() {
          super({ key: "GameScene" });
          this.gameSpeed = 5;
          this.score = 0;
          this.highScore = localStorage.getItem("dinoHighScore") || 0;
          this.gameOver = false;
          this.obstacles = [];
        }

        create() {
          // Add parallax background
          this.sky = this.add.tileSprite(0, 0, 800, 300, "sky");
          this.sky.setOrigin(0, 0);

          // Physics setup
          this.physics.world.setBounds(0, 0, 800, 300);
          this.physics.world.gravity.y = 1000;

          // Ground setup
          this.ground = this.physics.add.staticGroup();
          this.ground.create(400, 300, "ground").setScale(20, 1).refreshBody();

          // Player setup
          this.player = this.physics.add.sprite(100, 250, "dino");
          this.player.setSize(20, 32);
          this.player.setOffset(2, 0);
          this.player.setCollideWorldBounds(true);

          // Animation setup
          this.anims.create({
            key: "run",
            frames: this.anims.generateFrameNumbers("dino", {
              /* start: 0, end: 3 */ frames: [0, 1, 2],
            }),
            frameRate: 10,
            repeat: -1,
          });
          this.anims.create({
            key: "jump",
            frames: [{ key: "dino", frame: 4 }],
            frameRate: 10,
          });
          this.anims.create({
            key: "crouch",
            frames: this.anims.generateFrameNumbers("dino", {
              /* start: 5,
              end: 7, */
              frames: [0, 1, 2],
            }),
            frameRate: 10,
            repeat: -1,
          });
          this.anims.create({
            key: "death",
            frames: [{ key: "dino", frame: 4 }],
            frameRate: 10,
          });
          this.player.play("run");

          // Obstacles group
          this.obstacles = this.physics.add.group();
          this.time.addEvent({
            delay: 1500,
            callback: this.spawnObstacle,
            callbackScope: this,
            loop: true,
          });

          // Power-ups group
          this.powerups = this.physics.add.group();
          this.time.addEvent({
            delay: 10000,
            callback: this.spawnPowerup,
            callbackScope: this,
            loop: true,
          });

          // Collision setup
          this.physics.add.collider(this.player, this.ground);

          this.physics.add.collider(this.obstacles, this.ground);

          this.physics.add.collider(
            this.player,
            this.obstacles,
            this.hitObstacle,
            null,
            this
          );
          this.physics.add.overlap(
            this.player,
            this.powerups,
            this.collectPowerup,
            null,
            this
          );

          // Input setup
          this.cursors = this.input.keyboard.createCursorKeys();
          this.spaceKey = this.input.keyboard.addKey(
            Phaser.Input.Keyboard.KeyCodes.SPACE
          );
          this.rKey = this.input.keyboard.addKey(
            Phaser.Input.Keyboard.KeyCodes.R
          );

          // Sound setup
          this.jumpSound = this.sound.add("jump", { volume: 0.2 });
          this.hitSound = this.sound.add("hit", { volume: 0.2 });

          // UI setup
          this.scoreText = this.add.text(20, 20, "Score: 0", {
            fontSize: "24px",
            fill: "#000",
            fontStyle: "bold",
            stroke: "#fff",
            strokeThickness: 2,
          });
          this.highScoreText = this.add.text(
            20,
            50,
            `High Score: ${this.highScore}`,
            {
              fontSize: "18px",
              fill: "#000",
              fontStyle: "bold",
            }
          );
          this.startText = this.add
            .text(250, 100, "Press SPACE to Start", {
              fontSize: "32px",
              fill: "#000",
              fontStyle: "bold",
              stroke: "#fff",
              strokeThickness: 2,
            })
            .setOrigin(0.5, 0.5);

          // Game state
          this.state = "waiting";
          this.player.invincible = false;
        }

        update() {
          // Move background for parallax effect
          this.sky.tilePositionX += this.gameSpeed * 0.5;

          // Handle different game states
          switch (this.state) {
            case "waiting":
              if (Phaser.Input.Keyboard.JustDown(this.spaceKey)) {
                this.startGame();
              }
              break;

            case "playing":
              this.updateGameplay();
              break;

            case "gameOver":
              if (Phaser.Input.Keyboard.JustDown(this.rKey)) {
                this.restartGame();
              }
              break;
          }
        }

        updateGameplay() {
          if (this.gameOver) return;

          // Player controls
          if (
            (this.cursors.up.isDown ||
              Phaser.Input.Keyboard.JustDown(this.spaceKey)) &&
            this.player.body.onFloor()
          ) {
            this.player.setVelocityY(-500);
            this.player.play("jump");
            this.jumpSound.play();
          }

          if (this.cursors.down.isDown && this.player.body.onFloor()) {
            this.player.setSize(24, 16);
            this.player.setOffset(0, 16);
            this.player.play("crouch");
          } else if (this.player.body.onFloor()) {
            this.player.setSize(20, 32);
            this.player.setOffset(2, 0);
            this.player.play("run");
          }

          // Score update
          this.score += Math.floor(this.gameSpeed / 2);
          this.scoreText.setText("Score: " + Math.floor(this.score / 10));

          // Increase difficulty
          if (this.score % 1000 === 0) {
            this.gameSpeed += 0.25;
          }
        }

        spawnObstacle() {
          if (this.gameOver || this.state !== "playing") return;

          const obstacleType = Phaser.Math.Between(1, 2);
          const obstacle = this.physics.add.sprite(
            850,
            150,
            `obstacle${obstacleType}`
          );
          obstacle.setImmovable(true);

          if (obstacleType === 1) {
            obstacle.setSize(10, 20);
            obstacle.setOffset(7, 12);
          } else {
            obstacle.setSize(20, 10);
            obstacle.setOffset(10, 22);
            obstacle.y -= 20;
          }

          this.obstacles.add(obstacle);
          obstacle.setVelocityX(-200 * (this.gameSpeed / 5));

          // Clean up obstacles off screen
          obstacle.body.onWorldBounds = true;
          obstacle.body.world.on("worldbounds", (body) => {
            if (body.gameObject === obstacle) {
              obstacle.destroy();
            }
          });
        }

        spawnPowerup() {
          if (this.gameOver || this.state !== "playing") return;

          const powerup = this.physics.add.sprite(850, 150, "dino");
          powerup.setFrame(8); // Use a different frame for powerup
          powerup.setScale(0.8);
          powerup.setVelocityX(-150 * (this.gameSpeed / 5));
          this.powerups.add(powerup);

          // Clean up powerups off screen
          powerup.body.onWorldBounds = true;
          powerup.body.world.on("worldbounds", (body) => {
            if (body.gameObject === powerup) {
              powerup.destroy();
            }
          });
        }

        collectPowerup(player, powerup) {
          powerup.destroy();
          this.player.invincible = true;
          this.player.setTint(0x00ff00);

          this.time.addEvent({
            delay: 5000,
            callback: () => {
              this.player.invincible = false;
              this.player.clearTint();
            },
          });
        }

        hitObstacle() {
          if (this.player.invincible || this.gameOver) return;

          this.hitSound.play();
          this.player.play("death");
          this.physics.pause();
          this.gameOver = true;
          this.state = "gameOver";
          this.player.setTint(0xff0000);

          // Screen shake effect
          this.cameras.main.shake(500, 0.01);

          // Update high score
          if (this.score > this.highScore) {
            this.highScore = this.score;
            localStorage.setItem("dinoHighScore", this.highScore);
            this.highScoreText.setText(`High Score: ${this.highScore}`);
          }

          // Game over text
          this.time.delayedCall(500, () => {
            this.add
              .text(250, 150, "Game Over!", {
                fontSize: "32px",
                fill: "#f00",
                fontStyle: "bold",
                stroke: "#fff",
                strokeThickness: 2,
              })
              .setOrigin(0.5, 0.5);

            this.add
              .text(250, 200, "Press R to Restart", {
                fontSize: "24px",
                fill: "#000",
                fontStyle: "bold",
                stroke: "#fff",
                strokeThickness: 2,
              })
              .setOrigin(0.5, 0.5);
          });
        }

        startGame() {
          this.startText.destroy();
          this.score = 0;
          this.gameOver = false;
          this.state = "playing";

          // Reset player position
          this.player.setPosition(100, 250);
          this.player.clearTint();

          // Clear all obstacles
          this.obstacles.clear(true, true);
          this.powerups.clear(true, true);
        }

        restartGame() {
          this.scene.restart();
        }
      }

      const config = {
        type: Phaser.AUTO,
        width: 800,
        height: 300,
        backgroundColor: "#f0f0f0",
        physics: {
          default: "arcade",
          arcade: {
            debug: true,
          },
        },
        scene: [BootScene, GameScene],
      };

      const game = new Phaser.Game(config);
    </script>
  </body>
</html>
