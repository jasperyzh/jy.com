---
import Layout from "@/layouts/BaseLayout.astro";
import { SITE_TITLE } from "../consts";
import { getEntry } from 'astro:content';
import { Badge } from "@/components/starwind/badge";
import { Button } from "@/components/starwind/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/starwind/card";

// Get portfolio data from content collection
const portfolioEntry = await getEntry('portfolio', 'index');
if (!portfolioEntry) {
  throw new Error('Portfolio data not found');
}

const { items, skills, projects } = portfolioEntry.data;

// Group projects by year
const projectsByYear = items.reduce((acc, project) => {
  acc[project.year] = [...(acc[project.year] || []), project];
  return acc;
}, {});

// Flatten all projects for the lightbox to have a continuous gallery
const allProjectImages = items.flatMap(project => 
  project.images.map(img => ({
    src: img.src,
    width: img.width,
    height: img.height,
    alt: project.title,
    caption: img.caption
  }))
);
---

<Layout title={`Portfolio - ${SITE_TITLE}`}>
  <main class="container mx-auto px-4 py-8 max-w-6xl">
    <!-- Header Section -->
    <section class="bg-gradient-to-br from-slate-700 to-slate-800 text-white p-8 rounded-lg shadow-lg mb-10">
      <div class="text-center">
        <h1 class="text-3xl md:text-4xl font-bold mb-4">Portfolio</h1>
        <p class="text-lg text-blue-300">A collection of my work and projects</p>
      </div>
    </section>

    <!-- Portfolio Items by Year -->
    <div class="space-y-12 portfolio-gallery">
      {
        Object.entries(projectsByYear)
          .sort((a, b) => b[0].localeCompare(a[0])) // Sort years in descending order
          .map(([year, yearProjects]) => (
            <div>
              <h2 class="text-2xl font-bold mb-6 pb-2 border-b border-gray-200">{year}</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-8 gallery-group">
                {(yearProjects as any[]).map((project, projectIndex) => (
                  <div class="bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-all duration-300">
                      <div class="relative">
                      <div class="p-4 pt-6 pb-5">
                            <div class="absolute top-0 left-0 right-0 flex items-center px-4 py-2 space-x-1">
                              <div class="w-3 h-3 bg-red-400 rounded-full"></div>
                              <div class="w-3 h-3 bg-yellow-400 rounded-full"></div>
                              <div class="w-3 h-3 bg-green-400 rounded-full"></div>
                            </div>
                        <div class="border border-gray-200 dark:border-gray-700 rounded-md overflow-hidden">
                          <a 
                            href={project.images[0].src}
                            class="gallery-item"
                            data-project-index={projectIndex}
                            data-image-index={0}
                          >
                            <img
                              src={project.thumbnail}
                              class="w-full object-cover aspect-video cursor-pointer"
                              alt={project.title}
                                loading="lazy"
                              />
                          </a>
                            </div>
                          </div>
                      
                      {project.images.length > 1 && (
                        <span class="absolute top-2 right-2 text-xs bg-black bg-opacity-70 text-white px-2 py-1 rounded-full cursor-pointer gallery-trigger" data-project-index={projectIndex}>
                          <i class="bi bi-images"></i> {project.images.length}
                          </span>
                        )}
                      </div>
                    
                      <div class="p-5 pt-0">
                        <div class="flex justify-between items-start mb-3">
                        <h3 class="text-xl font-bold text-gray-900 dark:text-white">{project.title}</h3>
                        <Badge variant="outline">{project.category}</Badge>
                        </div>
                      <p class="text-gray-700 dark:text-gray-300 mb-4">{project.description}</p>
                        <div class="flex flex-wrap gap-2 mb-4">
                        {project.tags.map((tag) => (
                          <Badge>{tag}</Badge>
                          ))}
                        </div>
                      <div class="flex justify-between items-center pt-2 border-t border-gray-200 dark:border-gray-700">
                        <span class="text-sm text-gray-500 dark:text-gray-400">{project.year}</span>
                        <Button variant="outline" size="sm" class="gallery-trigger" data-project-index={projectIndex}>
                          <i class="bi bi-eye mr-1"></i> View Details
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))
      }
    </div>

    <!-- Hidden container with all project images for PhotoSwipe -->
    <div class="hidden">
      <div class="pswp-gallery-all">
        {items.map((project, projectIndex) => 
          project.images.map((image, imageIndex) => (
            <a 
              href={image.src}
              data-pswp-width={image.width}
              data-pswp-height={image.height}
              data-global-index={(imageIndex + (projectIndex * 100))}
              data-project-index={projectIndex}
              data-image-index={imageIndex}
              class="gallery-item-hidden"
              data-pswp-caption={`<div class="pswp__title">${project.title}</div><div class="pswp__description">${image.caption}</div>`}
            >
              <img src={image.src} alt={image.caption} loading="lazy" class="hidden" />
            </a>
          ))
        )}
      </div>
    </div>

    <!-- Skills Section -->
    <section class="mt-16">
      <h2 class="text-2xl font-bold mb-6 pb-2 border-b border-gray-200">Technical Skills</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {skills.map((skillGroup) => (
          <Card>
            <CardHeader>
              <CardTitle>{skillGroup.category}</CardTitle>
            </CardHeader>
            <CardContent>
              <div class="flex flex-wrap gap-2">
                {skillGroup.items.map((skill) => (
                  <Badge variant="secondary">{skill}</Badge>
                ))}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </section>

    <!-- Featured Projects Section -->
    <section class="mt-16">
      <h2 class="text-2xl font-bold mb-6 pb-2 border-b border-gray-200">Featured Projects</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        {projects.map((project) => (
          <Card>
            <div class="h-48 overflow-hidden">
              <img 
                src={project.image} 
                alt={project.title} 
                class="w-full h-full object-cover"
              />
            </div>
            <CardHeader>
              <CardTitle>{project.title}</CardTitle>
            </CardHeader>
            <CardContent>
              <p class="text-gray-700 dark:text-gray-300 mb-4">{project.description}</p>
              <div class="flex flex-wrap gap-2 mb-4">
                {project.tags.map((tag) => (
                  <Badge variant="outline">{tag}</Badge>
                ))}
              </div>
            </CardContent>
            <CardFooter>
              <div class="flex justify-between w-full">
                <Button variant="outline" size="sm">
                  <a href={project.demoUrl} target="_blank" rel="noopener noreferrer">
                    <i class="bi bi-eye mr-1"></i> Demo
                  </a>
                </Button>
                <Button variant="outline" size="sm">
                  <a href={project.codeUrl} target="_blank" rel="noopener noreferrer">
                    <i class="bi bi-code-slash mr-1"></i> Code
                  </a>
                </Button>
              </div>
            </CardFooter>
          </Card>
        ))}
      </div>
    </section>

    <!-- Contact CTA -->
    <section class="mt-16 bg-gradient-to-br from-slate-700 to-slate-800 text-white p-8 rounded-lg shadow-lg">
      <div class="text-center">
        <h2 class="text-2xl font-bold mb-4">Interested in working together?</h2>
        <p class="text-lg mb-6 text-blue-300">Let's discuss your project and bring your ideas to life.</p>
        <Button>
          <i class="bi bi-envelope-fill mr-2"></i>
          Get in Touch
        </Button>
      </div>
    </section>
  </main>
</Layout>

<script>
  // Use dynamic imports for better compatibility with build systems
  const loadPhotoswipe = async () => {
    try {
      const PhotoSwipeLightbox = (await import('photoswipe/dist/photoswipe-lightbox.esm.js')).default;
      const PhotoSwipe = (await import('photoswipe/dist/photoswipe.esm.js')).default;
      
      // Define gallery item type
      type GalleryItem = {
        src: string;
        width: number;
        height: number;
        alt: string;
        caption: string;
        projectId: number;
        imageId: number;
      };

      // Create a single continuous gallery with all images
      const allGalleryItems: GalleryItem[] = [];
      
      // Process all images from all projects into a single array
      document.querySelectorAll('.pswp-gallery-all a').forEach(link => {
        if (link instanceof HTMLAnchorElement) {
          const item: GalleryItem = {
            src: link.href,
            width: parseInt(link.getAttribute('data-pswp-width') || '1920', 10),
            height: parseInt(link.getAttribute('data-pswp-height') || '1080', 10),
            alt: link.querySelector('img')?.alt || '',
            caption: link.getAttribute('data-pswp-caption') || '',
            projectId: parseInt(link.getAttribute('data-project-index') || '0', 10),
            imageId: parseInt(link.getAttribute('data-image-index') || '0', 10)
          };
          allGalleryItems.push(item);
        }
      });
      
      // Map to track the starting index for each project in the continuous gallery
      const projectStartIndices: Record<string, number> = {};
      
      // Calculate starting indices for each project
      allGalleryItems.forEach((item, index) => {
        const projectId = item.projectId.toString();
        if (projectStartIndices[projectId] === undefined) {
          projectStartIndices[projectId] = index;
        }
      });
      
      // Add click handlers to all thumbnail images and buttons
      document.querySelectorAll('.gallery-item, .gallery-trigger').forEach(item => {
        item.addEventListener('click', (e) => {
          e.preventDefault();
          
          // Get the project index
          const projectIndex = item.getAttribute('data-project-index');
          if (!projectIndex) return;
          
          // Find starting index for this project
          const startIndex = projectStartIndices[projectIndex] || 0;
          
          // Create new PhotoSwipe instance with all images
          const pswp = new PhotoSwipe({
            dataSource: allGalleryItems,
            appendToEl: document.body,
            index: startIndex,
            closeOnVerticalDrag: true,
            loop: true,
            padding: { top: 20, bottom: 20, left: 20, right: 20 }
          });
          
          // Add custom caption
          pswp.on('uiRegister', () => {
            pswp.ui.registerElement({
              name: 'custom-caption',
              order: 9,
              isButton: false,
              appendTo: 'root',
              html: '',
              onInit: (el) => {
                pswp.on('change', () => {
                  if (pswp.currSlide && pswp.currIndex >= 0 && pswp.currIndex < allGalleryItems.length) {
                    const currentItem = allGalleryItems[pswp.currIndex];
                    if (currentItem && currentItem.caption) {
                      el.innerHTML = currentItem.caption;
                    } else {
                      el.innerHTML = '';
                    }
                  }
                });
              }
            });
          });
          
          pswp.init();
        });
      });
      
    } catch (error) {
      console.error('Failed to initialize PhotoSwipe:', error);
    }
  };
  
  // Initialize when the DOM is ready
  document.addEventListener('DOMContentLoaded', loadPhotoswipe);
</script>

<style>
  /* Smooth scrolling for section navigation */
  html {
    scroll-behavior: smooth;
  }
  
  /* Subtle hover effect for cards */
  .card:hover {
    transform: translateY(-2px);
    transition: transform 0.3s ease;
  }
  
  /* Dark mode styles */
  .dark body {
    background-color: #1a1a1a;
    color: #f3f4f6;
  }
  
  .dark .bg-white {
    background-color: #2d2d2d;
    color: #f3f4f6;
  }
  
  .dark .text-gray-700 {
    color: #d1d5db;
  }
  
  .dark .border-gray-200 {
    border-color: #4b5563;
  }

  /* Ensuring proper spacing on mobile */
  @media (max-width: 768px) {
    .container {
      padding-left: 1rem;
      padding-right: 1rem;
    }
  }
  
  /* PhotoSwipe related styles */
  .gallery-item, .gallery-trigger {
    cursor: pointer;
  }
</style>


<style is:global>
  @import "photoswipe/dist/photoswipe.css";

  /* PhotoSwipe Customization */
  .pswp__caption {
    background: rgba(0, 0, 0, 0.85);
    padding: 16px;
    width: 100%;
    position: absolute;
    bottom: 0;
    backdrop-filter: blur(10px);
  }

  .pswp__title {
    color: white;
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
  }

  .pswp__description {
    color: #ccc;
    margin: 4px 0 0;
    font-size: 0.875rem;
  }
  
  /* Tailwind classes for dark mode */
  .dark .bg-gray-100 {
    background-color: #111827;
  }
  
  .dark .text-gray-800 {
    color: #d1d5db;
  }
  
  /* Custom PhotoSwipe UI */
  .pswp__custom-caption {
    background: rgba(0, 0, 0, 0.75);
    color: #fff;
    padding: 16px;
    width: 100%;
    position: absolute;
    bottom: 0;
    text-align: center;
    backdrop-filter: blur(5px);
  }
  
  /* Improve PhotoSwipe loading and transitions */
  .pswp__preloader {
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -20px;
    margin-left: -20px;
  }
  
  .pswp__img {
    object-fit: contain;
    }
  </style>