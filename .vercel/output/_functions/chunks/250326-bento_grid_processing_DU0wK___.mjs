import { a as createComponent, b as renderTemplate, r as renderComponent, m as maybeRenderHead } from './astro/server_BuftSjIy.mjs';
import 'kleur/colors';
import { a as $$BaseLayout } from './BaseLayout_DEWwRiOq.mjs';
/* empty css                                                */

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(cooked.slice()) }));
var _a;
const $$250326BentoGridProcessing = createComponent(($$result, $$props, $$slots) => {
  const sketch_title = "Bento Grid Processing";
  return renderTemplate(_a || (_a = __template(["", ' <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"><\/script>  <script>\n  const sketches = {\n    item1: function (sketch) {\n      let angle;\n      sketch.setup = function () {\n        const container = document.getElementById("item1");\n        const canvas = sketch.createCanvas(\n          container.offsetWidth,\n          container.offsetHeight\n        );\n        canvas.parent("item1");\n        angle = sketch.PI / 4;\n        sketch.background(255);\n        sketch.stroke(0);\n      };\n\n      sketch.draw = function () {\n        sketch.background(255);\n        sketch.translate(sketch.width / 2, sketch.height);\n        branch(120);\n      };\n\n      function branch(len) {\n        sketch.line(0, 0, 0, -len);\n        sketch.translate(0, -len);\n\n        if (len > 4) {\n          sketch.push();\n          sketch.rotate(angle);\n          branch(len * 0.67);\n          sketch.pop();\n\n          sketch.push();\n          sketch.rotate(-angle);\n          branch(len * 0.67);\n          sketch.pop();\n        }\n      }\n    },\n    item2: function (sketch) {\n      let circles = [];\n      sketch.setup = function () {\n        const container = document.getElementById("item2");\n        const canvas = sketch.createCanvas(\n          container.offsetWidth,\n          container.offsetHeight\n        );\n        canvas.parent("item2");\n        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);\n        sketch.noStroke();\n      };\n\n      sketch.draw = function () {\n        sketch.background(0, 0, 95);\n        let newCircle = createCircle();\n        if (newCircle) circles.push(newCircle);\n\n        for (let circle of circles) {\n          if (circle.growing) {\n            if (circle.edges()) {\n              circle.growing = false;\n            } else {\n              for (let other of circles) {\n                if (circle !== other) {\n                  let d = sketch.dist(circle.x, circle.y, other.x, other.y);\n                  if (d - 2 < circle.r + other.r) {\n                    circle.growing = false;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n          circle.show();\n          circle.grow();\n        }\n      };\n\n      function createCircle() {\n        let x = sketch.random(sketch.width);\n        let y = sketch.random(sketch.height);\n        let valid = true;\n\n        for (let circle of circles) {\n          let d = sketch.dist(x, y, circle.x, circle.y);\n          if (d < circle.r) {\n            valid = false;\n            break;\n          }\n        }\n\n        if (valid) {\n          return new Circle(x, y);\n        } else {\n          return null;\n        }\n      }\n\n      class Circle {\n        constructor(x, y) {\n          this.x = x;\n          this.y = y;\n          this.r = 1;\n          this.growing = true;\n          this.hue = sketch.random(360);\n        }\n\n        show() {\n          sketch.fill(this.hue, 80, 80);\n          sketch.ellipse(this.x, this.y, this.r * 2);\n        }\n\n        grow() {\n          if (this.growing) {\n            this.r += 0.5;\n          }\n        }\n\n        edges() {\n          return (\n            this.x + this.r > sketch.width ||\n            this.x - this.r < 0 ||\n            this.y + this.r > sketch.height ||\n            this.y - this.r < 0\n          );\n        }\n      }\n    },\n    item3: function (sketch) {\n      let yoff = 0;\n      sketch.setup = function () {\n        const container = document.getElementById("item3");\n        const canvas = sketch.createCanvas(\n          container.offsetWidth,\n          container.offsetHeight\n        );\n        canvas.parent("item3");\n        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);\n      };\n\n      sketch.draw = function () {\n        sketch.background(200, 20, 100);\n        sketch.noFill();\n        sketch.beginShape();\n\n        let xoff = 0;\n        for (let x = 0; x <= sketch.width; x += 20) {\n          let y = sketch.map(\n            sketch.noise(xoff, yoff),\n            0,\n            1,\n            100,\n            sketch.height - 100\n          );\n          let hue = sketch.map(x, 0, sketch.width, 0, 360);\n          sketch.stroke(hue, 80, 80);\n          sketch.vertex(x, y);\n          xoff += 0.05;\n        }\n        yoff += 0.01;\n        sketch.vertex(sketch.width, sketch.height);\n        sketch.vertex(0, sketch.height);\n        sketch.endShape(sketch.CLOSE);\n      };\n    },\n    item4: function (sketch) {\n      let particles = [];\n      sketch.setup = function () {\n        const container = document.getElementById("item4");\n        const canvas = sketch.createCanvas(\n          container.offsetWidth,\n          container.offsetHeight\n        );\n        canvas.parent("item4");\n        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);\n\n        for (let i = 0; i < 100; i++) {\n          particles.push(new Particle());\n        }\n      };\n\n      sketch.draw = function () {\n        sketch.background(0, 0, 0, 0.1);\n        for (let particle of particles) {\n          particle.update();\n          particle.show();\n          particle.edges();\n          particle.repel();\n        }\n      };\n\n      class Particle {\n        constructor() {\n          this.pos = sketch.createVector(\n            sketch.random(sketch.width),\n            sketch.random(sketch.height)\n          );\n          this.vel = p5.Vector.random2D().mult(0.5);\n          this.acc = sketch.createVector(0, 0);\n          this.maxspeed = 2;\n          this.hue = sketch.random(360);\n          this.r = 3;\n        }\n\n        update() {\n          this.vel.add(this.acc);\n          this.vel.limit(this.maxspeed);\n          this.pos.add(this.vel);\n          this.acc.mult(0);\n        }\n\n        applyForce(force) {\n          this.acc.add(force);\n        }\n\n        show() {\n          sketch.noStroke();\n          sketch.fill(this.hue, 80, 80);\n          sketch.ellipse(this.pos.x, this.pos.y, this.r * 2);\n        }\n\n        edges() {\n          if (this.pos.x > sketch.width) this.pos.x = 0;\n          if (this.pos.x < 0) this.pos.x = sketch.width;\n          if (this.pos.y > sketch.height) this.pos.y = 0;\n          if (this.pos.y < 0) this.pos.y = sketch.height;\n        }\n\n        repel() {\n          let mouse = sketch.createVector(sketch.mouseX, sketch.mouseY);\n          let dir = p5.Vector.sub(this.pos, mouse);\n          let d = dir.mag();\n          if (d < 100) {\n            dir.setMag(sketch.map(d, 0, 100, 2, 0));\n            this.applyForce(dir);\n          }\n        }\n      }\n    },\n    item5: function (sketch) {\n      let angle = 0;\n      let lines = 20;\n      sketch.setup = function () {\n        const container = document.getElementById("item5");\n        const canvas = sketch.createCanvas(\n          container.offsetWidth,\n          container.offsetHeight\n        );\n        canvas.parent("item5");\n        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);\n      };\n\n      sketch.draw = function () {\n        sketch.background(0);\n        sketch.translate(sketch.width / 2, sketch.height / 2);\n        angle += 0.005;\n\n        for (let i = 0; i < lines; i++) {\n          let a = angle + sketch.map(i, 0, lines, 0, sketch.PI * 2);\n          let hue = sketch.map(i, 0, lines, 0, 360);\n          sketch.stroke(hue, 80, 80);\n\n          let x = sketch.cos(a) * 100;\n          let y = sketch.sin(a) * 100;\n          let x2 = sketch.cos(a + sketch.PI) * 100;\n          let y2 = sketch.sin(a + sketch.PI) * 100;\n\n          for (let j = 0; j < 50; j++) {\n            let offset = j * 10;\n            sketch.line(\n              x + sketch.cos(a + j * 0.1) * offset,\n              y + sketch.sin(a + j * 0.1) * offset,\n              x2 + sketch.cos(a + sketch.PI + j * 0.1) * offset,\n              y2 + sketch.sin(a + sketch.PI + j * 0.1) * offset\n            );\n          }\n        }\n      };\n    },\n    item6: function (sketch) {\n      let walker;\n      let steps = [];\n      let maxSteps = 500;\n      let hue = 0;\n      sketch.setup = function () {\n        const container = document.getElementById("item6");\n        const canvas = sketch.createCanvas(\n          container.offsetWidth,\n          container.offsetHeight\n        );\n        canvas.parent("item6");\n        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);\n        walker = new Walker();\n      };\n\n      sketch.draw = function () {\n        sketch.background(0, 0, 10, 0.1);\n        walker.step();\n        walker.show();\n\n        steps.push({ x: walker.x, y: walker.y });\n        if (steps.length > maxSteps) {\n          steps.shift();\n        }\n\n        sketch.noFill();\n        sketch.beginShape();\n        for (let i = 0; i < steps.length; i++) {\n          let alpha = sketch.map(i, 0, steps.length, 0, 1);\n          let colHue = (hue + i) % 360;\n          sketch.stroke(colHue, 80, 80, alpha);\n          sketch.vertex(steps[i].x, steps[i].y);\n        }\n        sketch.endShape();\n\n        hue = (hue + 0.5) % 360;\n      };\n\n      class Walker {\n        constructor() {\n          this.x = sketch.width / 2;\n          this.y = sketch.height / 2;\n          this.tx = 0;\n          this.ty = 10000;\n        }\n\n        step() {\n          this.x = sketch.map(sketch.noise(this.tx), 0, 1, 0, sketch.width);\n          this.y = sketch.map(sketch.noise(this.ty), 0, 1, 0, sketch.height);\n          this.tx += 0.005;\n          this.ty += 0.005;\n        }\n\n        show() {\n          sketch.stroke(0, 100, 100);\n          sketch.fill(0, 100, 100);\n          sketch.ellipse(this.x, this.y, 8, 8);\n        }\n      }\n    },\n  };\n\n  const activeSketches = {};\n\n  document.addEventListener("DOMContentLoaded", function () {\n    // Attach click handlers to all play buttons\n    document.querySelectorAll(".play-button").forEach((button) => {\n      button.addEventListener("click", function () {\n        const targetId = this.getAttribute("data-target");\n        toggleSketch(targetId);\n      });\n    });\n\n    // Load All button\n    document.getElementById("loadAll").addEventListener("click", function () {\n      for (let id in sketches) {\n        if (!activeSketches[id]) {\n          loadSketch(id);\n        }\n      }\n    });\n\n    // Reset All button\n    document.getElementById("resetAll").addEventListener("click", function () {\n      for (let id in activeSketches) {\n        removeSketch(id);\n      }\n    });\n  });\n\n  function toggleSketch(id) {\n    if (activeSketches[id]) {\n      removeSketch(id);\n    } else {\n      loadSketch(id);\n    }\n  }\n\n  function loadSketch(id) {\n    if (!activeSketches[id]) {\n      const container = document.getElementById(id);\n      container.querySelector(".sketch-placeholder").style.display = "none";\n\n      activeSketches[id] = new p5(sketches[id], id);\n    }\n  }\n\n  function removeSketch(id) {\n    if (activeSketches[id]) {\n      activeSketches[id].remove();\n      delete activeSketches[id];\n\n      const container = document.getElementById(id);\n      container.querySelector(".sketch-placeholder").style.display = "flex";\n    }\n  }\n<\/script>'])), renderComponent($$result, "BaseLayout", $$BaseLayout, { "title": sketch_title, "data-astro-cid-7u7sez7z": true }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<main class="bento-sketches container mx-auto" data-astro-cid-7u7sez7z> <h1 data-astro-cid-7u7sez7z>${sketch_title}</h1> <h1 data-astro-cid-7u7sez7z>Interactive Bento Grid Art Gallery</h1> <div class="controls" data-astro-cid-7u7sez7z> <button id="loadAll" data-astro-cid-7u7sez7z>Load All Artworks</button> <button id="resetAll" data-astro-cid-7u7sez7z>Reset All</button> </div> <div class="bento-grid" data-astro-cid-7u7sez7z> <div class="grid-item" id="item1" data-astro-cid-7u7sez7z> <div class="sketch-placeholder" data-astro-cid-7u7sez7z>Fractal Tree</div> <button class="play-button" data-target="item1" data-astro-cid-7u7sez7z>Play</button> </div> <div class="grid-item" id="item2" data-astro-cid-7u7sez7z> <div class="sketch-placeholder" data-astro-cid-7u7sez7z>Circle Packing</div> <button class="play-button" data-target="item2" data-astro-cid-7u7sez7z>Play</button> </div> <div class="grid-item" id="item3" data-astro-cid-7u7sez7z> <div class="sketch-placeholder" data-astro-cid-7u7sez7z>Noisy Waves</div> <button class="play-button" data-target="item3" data-astro-cid-7u7sez7z>Play</button> </div> <div class="grid-item" id="item4" data-astro-cid-7u7sez7z> <div class="sketch-placeholder" data-astro-cid-7u7sez7z>Particles</div> <button class="play-button" data-target="item4" data-astro-cid-7u7sez7z>Play</button> </div> <div class="grid-item" id="item5" data-astro-cid-7u7sez7z> <div class="sketch-placeholder" data-astro-cid-7u7sez7z>Moire Pattern</div> <button class="play-button" data-target="item5" data-astro-cid-7u7sez7z>Play</button> </div> <div class="grid-item" id="item6" data-astro-cid-7u7sez7z> <div class="sketch-placeholder" data-astro-cid-7u7sez7z>Random Walk</div> <button class="play-button" data-target="item6" data-astro-cid-7u7sez7z>Play</button> </div> </div> </main> ` }));
}, "/home/matsu/Desktop/jy/src/pages/sketches/2025/250326-bento_grid_processing.astro", void 0);

const $$file = "/home/matsu/Desktop/jy/src/pages/sketches/2025/250326-bento_grid_processing.astro";
const $$url = "/sketches/2025/250326-bento_grid_processing";

const __vite_glob_0_16 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$250326BentoGridProcessing,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_16 as _ };
