import { a as createComponent, b as renderTemplate, g as renderHead } from './astro/server_BuftSjIy.mjs';
import 'kleur/colors';
import 'clsx';
/* empty css                                      */

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$250326PhaserDino = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(['<html data-astro-cid-bs2fhkza> <head><meta charset="UTF-8"><title>Dino Dash - Endless Runner</title><script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"><\/script>', '</head> <body data-astro-cid-bs2fhkza> <div class="dino-game" data-astro-cid-bs2fhkza> <div id="game-container" data-astro-cid-bs2fhkza></div> </div> <script>\n      class BootScene extends Phaser.Scene {\n        constructor() {\n          super({ key: "BootScene" });\n        }\n\n        preload() {\n          // Load assets\n          this.load.image("sky", "/gaming/sky.jpg");\n          this.load.spritesheet("dino", "/gaming/trex.png", {\n            frameWidth: 59,\n            frameHeight: 64,\n          });\n          this.load.image("ground", "/gaming/block.jpg");\n          this.load.image("obstacle1", "/gaming/rock.jpg");\n          this.load.image("obstacle2", "/gaming/rock.jpg");\n\n          // Load sounds (optional)\n          this.load.audio("jump", "/gaming/jump.wav");\n          this.load.audio("hit", "/gaming/hitHurt.wav");\n        }\n\n        create() {\n          this.scene.start("GameScene");\n        }\n      }\n\n      class GameScene extends Phaser.Scene {\n        constructor() {\n          super({ key: "GameScene" });\n          this.gameSpeed = 5;\n          this.score = 0;\n          this.highScore = localStorage.getItem("dinoHighScore") || 0;\n          this.gameOver = false;\n          this.obstacles = [];\n        }\n\n        create() {\n          // Add parallax background\n          this.sky = this.add.tileSprite(0, 0, 800, 300, "sky");\n          this.sky.setOrigin(0, 0);\n\n          // Physics setup\n          this.physics.world.setBounds(0, 0, 800, 300);\n          this.physics.world.gravity.y = 1000;\n\n          // Ground setup\n          this.ground = this.physics.add.staticGroup();\n          this.ground.create(400, 300, "ground").setScale(20, 1).refreshBody();\n\n          // Player setup\n          this.player = this.physics.add.sprite(100, 250, "dino");\n          this.player.setSize(20, 32);\n          this.player.setOffset(2, 0);\n          this.player.setCollideWorldBounds(true);\n\n          // Animation setup\n          this.anims.create({\n            key: "run",\n            frames: this.anims.generateFrameNumbers("dino", {\n              /* start: 0, end: 3 */ frames: [0, 1, 2],\n            }),\n            frameRate: 10,\n            repeat: -1,\n          });\n          this.anims.create({\n            key: "jump",\n            frames: [{ key: "dino", frame: 4 }],\n            frameRate: 10,\n          });\n          this.anims.create({\n            key: "crouch",\n            frames: this.anims.generateFrameNumbers("dino", {\n              /* start: 5,\n              end: 7, */\n              frames: [0, 1, 2],\n            }),\n            frameRate: 10,\n            repeat: -1,\n          });\n          this.anims.create({\n            key: "death",\n            frames: [{ key: "dino", frame: 4 }],\n            frameRate: 10,\n          });\n          this.player.play("run");\n\n          // Obstacles group\n          this.obstacles = this.physics.add.group();\n          this.time.addEvent({\n            delay: 1500,\n            callback: this.spawnObstacle,\n            callbackScope: this,\n            loop: true,\n          });\n\n          // Power-ups group\n          this.powerups = this.physics.add.group();\n          this.time.addEvent({\n            delay: 10000,\n            callback: this.spawnPowerup,\n            callbackScope: this,\n            loop: true,\n          });\n\n          // Collision setup\n          this.physics.add.collider(this.player, this.ground);\n\n          this.physics.add.collider(this.obstacles, this.ground);\n\n          this.physics.add.collider(\n            this.player,\n            this.obstacles,\n            this.hitObstacle,\n            null,\n            this\n          );\n          this.physics.add.overlap(\n            this.player,\n            this.powerups,\n            this.collectPowerup,\n            null,\n            this\n          );\n\n          // Input setup\n          this.cursors = this.input.keyboard.createCursorKeys();\n          this.spaceKey = this.input.keyboard.addKey(\n            Phaser.Input.Keyboard.KeyCodes.SPACE\n          );\n          this.rKey = this.input.keyboard.addKey(\n            Phaser.Input.Keyboard.KeyCodes.R\n          );\n\n          // Sound setup\n          this.jumpSound = this.sound.add("jump", { volume: 0.2 });\n          this.hitSound = this.sound.add("hit", { volume: 0.2 });\n\n          // UI setup\n          this.scoreText = this.add.text(20, 20, "Score: 0", {\n            fontSize: "24px",\n            fill: "#000",\n            fontStyle: "bold",\n            stroke: "#fff",\n            strokeThickness: 2,\n          });\n          this.highScoreText = this.add.text(\n            20,\n            50,\n            `High Score: ${this.highScore}`,\n            {\n              fontSize: "18px",\n              fill: "#000",\n              fontStyle: "bold",\n            }\n          );\n          this.startText = this.add\n            .text(250, 100, "Press SPACE to Start", {\n              fontSize: "32px",\n              fill: "#000",\n              fontStyle: "bold",\n              stroke: "#fff",\n              strokeThickness: 2,\n            })\n            .setOrigin(0.5, 0.5);\n\n          // Game state\n          this.state = "waiting";\n          this.player.invincible = false;\n        }\n\n        update() {\n          // Move background for parallax effect\n          this.sky.tilePositionX += this.gameSpeed * 0.5;\n\n          // Handle different game states\n          switch (this.state) {\n            case "waiting":\n              if (Phaser.Input.Keyboard.JustDown(this.spaceKey)) {\n                this.startGame();\n              }\n              break;\n\n            case "playing":\n              this.updateGameplay();\n              break;\n\n            case "gameOver":\n              if (Phaser.Input.Keyboard.JustDown(this.rKey)) {\n                this.restartGame();\n              }\n              break;\n          }\n        }\n\n        updateGameplay() {\n          if (this.gameOver) return;\n\n          // Player controls\n          if (\n            (this.cursors.up.isDown ||\n              Phaser.Input.Keyboard.JustDown(this.spaceKey)) &&\n            this.player.body.onFloor()\n          ) {\n            this.player.setVelocityY(-500);\n            this.player.play("jump");\n            this.jumpSound.play();\n          }\n\n          if (this.cursors.down.isDown && this.player.body.onFloor()) {\n            this.player.setSize(24, 16);\n            this.player.setOffset(0, 16);\n            this.player.play("crouch");\n          } else if (this.player.body.onFloor()) {\n            this.player.setSize(20, 32);\n            this.player.setOffset(2, 0);\n            this.player.play("run");\n          }\n\n          // Score update\n          this.score += Math.floor(this.gameSpeed / 2);\n          this.scoreText.setText("Score: " + Math.floor(this.score / 10));\n\n          // Increase difficulty\n          if (this.score % 1000 === 0) {\n            this.gameSpeed += 0.25;\n          }\n        }\n\n        spawnObstacle() {\n          if (this.gameOver || this.state !== "playing") return;\n\n          const obstacleType = Phaser.Math.Between(1, 2);\n          const obstacle = this.physics.add.sprite(\n            850,\n            150,\n            `obstacle${obstacleType}`\n          );\n          obstacle.setImmovable(true);\n\n          if (obstacleType === 1) {\n            obstacle.setSize(10, 20);\n            obstacle.setOffset(7, 12);\n          } else {\n            obstacle.setSize(20, 10);\n            obstacle.setOffset(10, 22);\n            obstacle.y -= 20;\n          }\n\n          this.obstacles.add(obstacle);\n          obstacle.setVelocityX(-200 * (this.gameSpeed / 5));\n\n          // Clean up obstacles off screen\n          obstacle.body.onWorldBounds = true;\n          obstacle.body.world.on("worldbounds", (body) => {\n            if (body.gameObject === obstacle) {\n              obstacle.destroy();\n            }\n          });\n        }\n\n        spawnPowerup() {\n          if (this.gameOver || this.state !== "playing") return;\n\n          const powerup = this.physics.add.sprite(850, 150, "dino");\n          powerup.setFrame(8); // Use a different frame for powerup\n          powerup.setScale(0.8);\n          powerup.setVelocityX(-150 * (this.gameSpeed / 5));\n          this.powerups.add(powerup);\n\n          // Clean up powerups off screen\n          powerup.body.onWorldBounds = true;\n          powerup.body.world.on("worldbounds", (body) => {\n            if (body.gameObject === powerup) {\n              powerup.destroy();\n            }\n          });\n        }\n\n        collectPowerup(player, powerup) {\n          powerup.destroy();\n          this.player.invincible = true;\n          this.player.setTint(0x00ff00);\n\n          this.time.addEvent({\n            delay: 5000,\n            callback: () => {\n              this.player.invincible = false;\n              this.player.clearTint();\n            },\n          });\n        }\n\n        hitObstacle() {\n          if (this.player.invincible || this.gameOver) return;\n\n          this.hitSound.play();\n          this.player.play("death");\n          this.physics.pause();\n          this.gameOver = true;\n          this.state = "gameOver";\n          this.player.setTint(0xff0000);\n\n          // Screen shake effect\n          this.cameras.main.shake(500, 0.01);\n\n          // Update high score\n          if (this.score > this.highScore) {\n            this.highScore = this.score;\n            localStorage.setItem("dinoHighScore", this.highScore);\n            this.highScoreText.setText(`High Score: ${this.highScore}`);\n          }\n\n          // Game over text\n          this.time.delayedCall(500, () => {\n            this.add\n              .text(250, 150, "Game Over!", {\n                fontSize: "32px",\n                fill: "#f00",\n                fontStyle: "bold",\n                stroke: "#fff",\n                strokeThickness: 2,\n              })\n              .setOrigin(0.5, 0.5);\n\n            this.add\n              .text(250, 200, "Press R to Restart", {\n                fontSize: "24px",\n                fill: "#000",\n                fontStyle: "bold",\n                stroke: "#fff",\n                strokeThickness: 2,\n              })\n              .setOrigin(0.5, 0.5);\n          });\n        }\n\n        startGame() {\n          this.startText.destroy();\n          this.score = 0;\n          this.gameOver = false;\n          this.state = "playing";\n\n          // Reset player position\n          this.player.setPosition(100, 250);\n          this.player.clearTint();\n\n          // Clear all obstacles\n          this.obstacles.clear(true, true);\n          this.powerups.clear(true, true);\n        }\n\n        restartGame() {\n          this.scene.restart();\n        }\n      }\n\n      const config = {\n        type: Phaser.AUTO,\n        width: 800,\n        height: 300,\n        backgroundColor: "#f0f0f0",\n        physics: {\n          default: "arcade",\n          arcade: {\n            debug: true,\n          },\n        },\n        scene: [BootScene, GameScene],\n      };\n\n      const game = new Phaser.Game(config);\n    <\/script> </body> </html>'], ['<html data-astro-cid-bs2fhkza> <head><meta charset="UTF-8"><title>Dino Dash - Endless Runner</title><script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"><\/script>', '</head> <body data-astro-cid-bs2fhkza> <div class="dino-game" data-astro-cid-bs2fhkza> <div id="game-container" data-astro-cid-bs2fhkza></div> </div> <script>\n      class BootScene extends Phaser.Scene {\n        constructor() {\n          super({ key: "BootScene" });\n        }\n\n        preload() {\n          // Load assets\n          this.load.image("sky", "/gaming/sky.jpg");\n          this.load.spritesheet("dino", "/gaming/trex.png", {\n            frameWidth: 59,\n            frameHeight: 64,\n          });\n          this.load.image("ground", "/gaming/block.jpg");\n          this.load.image("obstacle1", "/gaming/rock.jpg");\n          this.load.image("obstacle2", "/gaming/rock.jpg");\n\n          // Load sounds (optional)\n          this.load.audio("jump", "/gaming/jump.wav");\n          this.load.audio("hit", "/gaming/hitHurt.wav");\n        }\n\n        create() {\n          this.scene.start("GameScene");\n        }\n      }\n\n      class GameScene extends Phaser.Scene {\n        constructor() {\n          super({ key: "GameScene" });\n          this.gameSpeed = 5;\n          this.score = 0;\n          this.highScore = localStorage.getItem("dinoHighScore") || 0;\n          this.gameOver = false;\n          this.obstacles = [];\n        }\n\n        create() {\n          // Add parallax background\n          this.sky = this.add.tileSprite(0, 0, 800, 300, "sky");\n          this.sky.setOrigin(0, 0);\n\n          // Physics setup\n          this.physics.world.setBounds(0, 0, 800, 300);\n          this.physics.world.gravity.y = 1000;\n\n          // Ground setup\n          this.ground = this.physics.add.staticGroup();\n          this.ground.create(400, 300, "ground").setScale(20, 1).refreshBody();\n\n          // Player setup\n          this.player = this.physics.add.sprite(100, 250, "dino");\n          this.player.setSize(20, 32);\n          this.player.setOffset(2, 0);\n          this.player.setCollideWorldBounds(true);\n\n          // Animation setup\n          this.anims.create({\n            key: "run",\n            frames: this.anims.generateFrameNumbers("dino", {\n              /* start: 0, end: 3 */ frames: [0, 1, 2],\n            }),\n            frameRate: 10,\n            repeat: -1,\n          });\n          this.anims.create({\n            key: "jump",\n            frames: [{ key: "dino", frame: 4 }],\n            frameRate: 10,\n          });\n          this.anims.create({\n            key: "crouch",\n            frames: this.anims.generateFrameNumbers("dino", {\n              /* start: 5,\n              end: 7, */\n              frames: [0, 1, 2],\n            }),\n            frameRate: 10,\n            repeat: -1,\n          });\n          this.anims.create({\n            key: "death",\n            frames: [{ key: "dino", frame: 4 }],\n            frameRate: 10,\n          });\n          this.player.play("run");\n\n          // Obstacles group\n          this.obstacles = this.physics.add.group();\n          this.time.addEvent({\n            delay: 1500,\n            callback: this.spawnObstacle,\n            callbackScope: this,\n            loop: true,\n          });\n\n          // Power-ups group\n          this.powerups = this.physics.add.group();\n          this.time.addEvent({\n            delay: 10000,\n            callback: this.spawnPowerup,\n            callbackScope: this,\n            loop: true,\n          });\n\n          // Collision setup\n          this.physics.add.collider(this.player, this.ground);\n\n          this.physics.add.collider(this.obstacles, this.ground);\n\n          this.physics.add.collider(\n            this.player,\n            this.obstacles,\n            this.hitObstacle,\n            null,\n            this\n          );\n          this.physics.add.overlap(\n            this.player,\n            this.powerups,\n            this.collectPowerup,\n            null,\n            this\n          );\n\n          // Input setup\n          this.cursors = this.input.keyboard.createCursorKeys();\n          this.spaceKey = this.input.keyboard.addKey(\n            Phaser.Input.Keyboard.KeyCodes.SPACE\n          );\n          this.rKey = this.input.keyboard.addKey(\n            Phaser.Input.Keyboard.KeyCodes.R\n          );\n\n          // Sound setup\n          this.jumpSound = this.sound.add("jump", { volume: 0.2 });\n          this.hitSound = this.sound.add("hit", { volume: 0.2 });\n\n          // UI setup\n          this.scoreText = this.add.text(20, 20, "Score: 0", {\n            fontSize: "24px",\n            fill: "#000",\n            fontStyle: "bold",\n            stroke: "#fff",\n            strokeThickness: 2,\n          });\n          this.highScoreText = this.add.text(\n            20,\n            50,\n            \\`High Score: \\${this.highScore}\\`,\n            {\n              fontSize: "18px",\n              fill: "#000",\n              fontStyle: "bold",\n            }\n          );\n          this.startText = this.add\n            .text(250, 100, "Press SPACE to Start", {\n              fontSize: "32px",\n              fill: "#000",\n              fontStyle: "bold",\n              stroke: "#fff",\n              strokeThickness: 2,\n            })\n            .setOrigin(0.5, 0.5);\n\n          // Game state\n          this.state = "waiting";\n          this.player.invincible = false;\n        }\n\n        update() {\n          // Move background for parallax effect\n          this.sky.tilePositionX += this.gameSpeed * 0.5;\n\n          // Handle different game states\n          switch (this.state) {\n            case "waiting":\n              if (Phaser.Input.Keyboard.JustDown(this.spaceKey)) {\n                this.startGame();\n              }\n              break;\n\n            case "playing":\n              this.updateGameplay();\n              break;\n\n            case "gameOver":\n              if (Phaser.Input.Keyboard.JustDown(this.rKey)) {\n                this.restartGame();\n              }\n              break;\n          }\n        }\n\n        updateGameplay() {\n          if (this.gameOver) return;\n\n          // Player controls\n          if (\n            (this.cursors.up.isDown ||\n              Phaser.Input.Keyboard.JustDown(this.spaceKey)) &&\n            this.player.body.onFloor()\n          ) {\n            this.player.setVelocityY(-500);\n            this.player.play("jump");\n            this.jumpSound.play();\n          }\n\n          if (this.cursors.down.isDown && this.player.body.onFloor()) {\n            this.player.setSize(24, 16);\n            this.player.setOffset(0, 16);\n            this.player.play("crouch");\n          } else if (this.player.body.onFloor()) {\n            this.player.setSize(20, 32);\n            this.player.setOffset(2, 0);\n            this.player.play("run");\n          }\n\n          // Score update\n          this.score += Math.floor(this.gameSpeed / 2);\n          this.scoreText.setText("Score: " + Math.floor(this.score / 10));\n\n          // Increase difficulty\n          if (this.score % 1000 === 0) {\n            this.gameSpeed += 0.25;\n          }\n        }\n\n        spawnObstacle() {\n          if (this.gameOver || this.state !== "playing") return;\n\n          const obstacleType = Phaser.Math.Between(1, 2);\n          const obstacle = this.physics.add.sprite(\n            850,\n            150,\n            \\`obstacle\\${obstacleType}\\`\n          );\n          obstacle.setImmovable(true);\n\n          if (obstacleType === 1) {\n            obstacle.setSize(10, 20);\n            obstacle.setOffset(7, 12);\n          } else {\n            obstacle.setSize(20, 10);\n            obstacle.setOffset(10, 22);\n            obstacle.y -= 20;\n          }\n\n          this.obstacles.add(obstacle);\n          obstacle.setVelocityX(-200 * (this.gameSpeed / 5));\n\n          // Clean up obstacles off screen\n          obstacle.body.onWorldBounds = true;\n          obstacle.body.world.on("worldbounds", (body) => {\n            if (body.gameObject === obstacle) {\n              obstacle.destroy();\n            }\n          });\n        }\n\n        spawnPowerup() {\n          if (this.gameOver || this.state !== "playing") return;\n\n          const powerup = this.physics.add.sprite(850, 150, "dino");\n          powerup.setFrame(8); // Use a different frame for powerup\n          powerup.setScale(0.8);\n          powerup.setVelocityX(-150 * (this.gameSpeed / 5));\n          this.powerups.add(powerup);\n\n          // Clean up powerups off screen\n          powerup.body.onWorldBounds = true;\n          powerup.body.world.on("worldbounds", (body) => {\n            if (body.gameObject === powerup) {\n              powerup.destroy();\n            }\n          });\n        }\n\n        collectPowerup(player, powerup) {\n          powerup.destroy();\n          this.player.invincible = true;\n          this.player.setTint(0x00ff00);\n\n          this.time.addEvent({\n            delay: 5000,\n            callback: () => {\n              this.player.invincible = false;\n              this.player.clearTint();\n            },\n          });\n        }\n\n        hitObstacle() {\n          if (this.player.invincible || this.gameOver) return;\n\n          this.hitSound.play();\n          this.player.play("death");\n          this.physics.pause();\n          this.gameOver = true;\n          this.state = "gameOver";\n          this.player.setTint(0xff0000);\n\n          // Screen shake effect\n          this.cameras.main.shake(500, 0.01);\n\n          // Update high score\n          if (this.score > this.highScore) {\n            this.highScore = this.score;\n            localStorage.setItem("dinoHighScore", this.highScore);\n            this.highScoreText.setText(\\`High Score: \\${this.highScore}\\`);\n          }\n\n          // Game over text\n          this.time.delayedCall(500, () => {\n            this.add\n              .text(250, 150, "Game Over!", {\n                fontSize: "32px",\n                fill: "#f00",\n                fontStyle: "bold",\n                stroke: "#fff",\n                strokeThickness: 2,\n              })\n              .setOrigin(0.5, 0.5);\n\n            this.add\n              .text(250, 200, "Press R to Restart", {\n                fontSize: "24px",\n                fill: "#000",\n                fontStyle: "bold",\n                stroke: "#fff",\n                strokeThickness: 2,\n              })\n              .setOrigin(0.5, 0.5);\n          });\n        }\n\n        startGame() {\n          this.startText.destroy();\n          this.score = 0;\n          this.gameOver = false;\n          this.state = "playing";\n\n          // Reset player position\n          this.player.setPosition(100, 250);\n          this.player.clearTint();\n\n          // Clear all obstacles\n          this.obstacles.clear(true, true);\n          this.powerups.clear(true, true);\n        }\n\n        restartGame() {\n          this.scene.restart();\n        }\n      }\n\n      const config = {\n        type: Phaser.AUTO,\n        width: 800,\n        height: 300,\n        backgroundColor: "#f0f0f0",\n        physics: {\n          default: "arcade",\n          arcade: {\n            debug: true,\n          },\n        },\n        scene: [BootScene, GameScene],\n      };\n\n      const game = new Phaser.Game(config);\n    <\/script> </body> </html>'])), renderHead());
}, "/home/matsu/Desktop/jy/src/pages/sketches/2025/250326-phaser_dino.astro", void 0);

const $$file = "/home/matsu/Desktop/jy/src/pages/sketches/2025/250326-phaser_dino.astro";
const $$url = "/sketches/2025/250326-phaser_dino";

const __vite_glob_0_19 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$250326PhaserDino,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_19 as _ };
