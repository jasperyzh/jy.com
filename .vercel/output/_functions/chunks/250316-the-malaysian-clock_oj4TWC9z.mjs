import { a as createComponent, b as renderTemplate, r as renderComponent, m as maybeRenderHead } from './astro/server_BuftSjIy.mjs';
import 'kleur/colors';
import { a as $$BaseLayout } from './BaseLayout_DEWwRiOq.mjs';
/* empty css                                              */

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$250316TheMalaysianClock = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(["", '  <script>\n  // Wait for DOM to be fully loaded\n  document.addEventListener("DOMContentLoaded", () => {\n    // Create clock ticks\n    function createClockTicks() {\n      const ticksContainer = document.querySelector(".ticks");\n\n      if (!ticksContainer) {\n        console.error("Ticks container not found");\n        return;\n      }\n\n      for (let i = 0; i < 60; i++) {\n        const tick = document.createElement("div");\n        tick.className = "tick";\n\n        // Make hour ticks (every 5 minutes) larger\n        if (i % 5 === 0) {\n          tick.classList.add("major");\n        }\n\n        // Position the tick around the clock face\n        const angle = (i / 60) * 360;\n        tick.style.transform = `rotate(${angle}deg)`;\n\n        // Calculate position using trigonometry\n        const radius = 210; // Distance from center to tick\n        const angleRad = (angle * Math.PI) / 180; // Convert to radians\n\n        // Calculate x and y position\n        const x = Math.sin(angleRad) * radius;\n        const y = -Math.cos(angleRad) * radius;\n\n        // Position the tick absolutely\n        tick.style.transform = "none"; // Clear rotation\n        tick.style.top = `calc(50% + ${y}px)`;\n        tick.style.left = `calc(50% + ${x}px)`;\n\n        // For major ticks (hour markers), make them larger\n        if (i % 5 === 0) {\n          tick.style.height = "10px";\n          tick.style.width = "24px";\n          tick.style.marginLeft = "-12px";\n          tick.style.marginTop = "-5px";\n        } else {\n          tick.style.height = "6px";\n          tick.style.width = "12px";\n          tick.style.marginLeft = "-6px";\n          tick.style.marginTop = "-3px";\n        }\n\n        // Rotate the tick to point toward the center\n        tick.style.transform = `rotate(${angle + 90}deg)`;\n\n        ticksContainer.appendChild(tick);\n      }\n    }\n\n    // Update clock hands\n    function updateClock() {\n      const now = new Date();\n\n      // Get local time (browser will handle timezone)\n      const hours = now.getHours();\n      const minutes = now.getMinutes();\n      const seconds = now.getSeconds();\n      const milliseconds = now.getMilliseconds();\n\n      const adjustAngleAsHandPointToRight = 180;\n      // Calculate angles for hands with smooth movement\n      // Hour hand: 30 degrees per hour + partial movement based on minutes\n      const hourAngle =\n        (hours % 12) * 30 + (minutes / 60) * 30 - adjustAngleAsHandPointToRight;\n\n      // Minute hand: 6 degrees per minute + partial movement based on seconds\n      const minuteAngle =\n        minutes * 6 + (seconds / 60) * 6 - adjustAngleAsHandPointToRight;\n\n      // Second hand: 6 degrees per second + partial movement based on milliseconds for smooth motion\n      const secondAngle = seconds * 6 - adjustAngleAsHandPointToRight;\n\n      // Apply rotations to hands with null checks\n      const hourHand = document.querySelector(".hour-hand");\n      const minuteHand = document.querySelector(".minute-hand");\n      const secondHand = document.querySelector(".second-hand");\n\n      if (hourHand instanceof HTMLElement) {\n        hourHand.style.transform = `rotate(${hourAngle}deg)`;\n      }\n\n      if (minuteHand instanceof HTMLElement) {\n        minuteHand.style.transform = `rotate(${minuteAngle}deg)`;\n      }\n\n      if (secondHand instanceof HTMLElement) {\n        secondHand.style.transform = `rotate(${secondAngle}deg)`;\n      }\n    }\n\n    // Initialize the clock\n    createClockTicks();\n    updateClock();\n\n    // Update clock more frequently for smoother second hand movement\n    setInterval(updateClock, 50);\n  });\n<\/script> <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.8.0/p5.js"><\/script> <script>\n  function setup_canvas() {\n    let _canvas = createCanvas(512, 512);\n    _canvas.parent("canvas");\n    frameRate(60);\n    background(13);\n  }\n\n  // sketch\n  let yellow = [255, 224, 26];\n  let blue = [8, 9, 146];\n\n  function setup() {\n    setup_canvas();\n    describe("A sketch of THE Malaysian Favourite Clock.");\n    // sketch\n\n    angleMode(DEGREES);\n  }\n\n  function draw() {\n    background(13);\n\n    // sketch\n    push();\n    draw_clock();\n    pop();\n  }\n\n  function draw_clock() {\n    // Translate the origin to the center of the canvas\n    translate(width / 2, height / 2);\n    strokeCap(SQUARE);\n\n    // Draw clock face\n    stroke(255, 0, 0);\n    strokeWeight(38);\n    ellipse(0, 0, 350, 350);\n\n    fill(blue);\n    stroke(255);\n    strokeWeight(12);\n    ellipse(0, 0, 350, 350);\n\n    // Draw the ticks\n    for (let i = 0; i < 60; i++) {\n      let len = i % 5 === 0 ? 15 : 8;\n      if (i % 5 === 0) {\n        strokeWeight(6);\n      } else {\n        strokeWeight(4);\n      }\n      let angle = map(i, 0, 60, 0, 360);\n      let x1 = cos(angle) * 165;\n      let y1 = sin(angle) * 165;\n      let x2 = cos(angle) * (165 - len);\n      let y2 = sin(angle) * (165 - len);\n      line(x1, y1, x2, y2);\n    }\n\n    // Get the current UTC time\n    let now = new Date();\n    let hours = now.getUTCHours() + 8; // Convert to Malaysia time (GMT+8)\n    let minutes = now.getUTCMinutes();\n    let seconds = now.getUTCSeconds();\n\n    // Correct for number over 24\n    hours = hours >= 24 ? hours - 24 : hours;\n\n    let adjustAngleAsHandPointToRight = 90;\n\n    // Calculate angles for hands\n    let hourAngle =\n      map(hours % 12, 0, 12, 0, 360) +\n      minutes * 0.5 -\n      adjustAngleAsHandPointToRight;\n    let minuteAngle =\n      map(minutes, 0, 60, 0, 360) +\n      map(seconds, 0, 60, 0, 6) -\n      adjustAngleAsHandPointToRight;\n    let secondAngle =\n      map(seconds, 0, 60, 0, 360) - adjustAngleAsHandPointToRight;\n\n    // Draw the second hand\n    push();\n    // translate(10, 0);\n    stroke(yellow);\n    strokeWeight(5);\n    rotate(secondAngle);\n    line(-22, 0, 164, 0);\n    pop();\n\n    // Draw the minute hand\n    push();\n    stroke(yellow);\n    strokeWeight(6);\n    rotate(minuteAngle);\n    line(-20, 0, 148, 0);\n    pop();\n\n    // Draw the hour hand\n    push();\n    stroke(yellow);\n    strokeWeight(12);\n    rotate(hourAngle);\n    line(-20, 0, 140, 0);\n    pop();\n  }\n<\/script>'], ["", '  <script>\n  // Wait for DOM to be fully loaded\n  document.addEventListener("DOMContentLoaded", () => {\n    // Create clock ticks\n    function createClockTicks() {\n      const ticksContainer = document.querySelector(".ticks");\n\n      if (!ticksContainer) {\n        console.error("Ticks container not found");\n        return;\n      }\n\n      for (let i = 0; i < 60; i++) {\n        const tick = document.createElement("div");\n        tick.className = "tick";\n\n        // Make hour ticks (every 5 minutes) larger\n        if (i % 5 === 0) {\n          tick.classList.add("major");\n        }\n\n        // Position the tick around the clock face\n        const angle = (i / 60) * 360;\n        tick.style.transform = \\`rotate(\\${angle}deg)\\`;\n\n        // Calculate position using trigonometry\n        const radius = 210; // Distance from center to tick\n        const angleRad = (angle * Math.PI) / 180; // Convert to radians\n\n        // Calculate x and y position\n        const x = Math.sin(angleRad) * radius;\n        const y = -Math.cos(angleRad) * radius;\n\n        // Position the tick absolutely\n        tick.style.transform = "none"; // Clear rotation\n        tick.style.top = \\`calc(50% + \\${y}px)\\`;\n        tick.style.left = \\`calc(50% + \\${x}px)\\`;\n\n        // For major ticks (hour markers), make them larger\n        if (i % 5 === 0) {\n          tick.style.height = "10px";\n          tick.style.width = "24px";\n          tick.style.marginLeft = "-12px";\n          tick.style.marginTop = "-5px";\n        } else {\n          tick.style.height = "6px";\n          tick.style.width = "12px";\n          tick.style.marginLeft = "-6px";\n          tick.style.marginTop = "-3px";\n        }\n\n        // Rotate the tick to point toward the center\n        tick.style.transform = \\`rotate(\\${angle + 90}deg)\\`;\n\n        ticksContainer.appendChild(tick);\n      }\n    }\n\n    // Update clock hands\n    function updateClock() {\n      const now = new Date();\n\n      // Get local time (browser will handle timezone)\n      const hours = now.getHours();\n      const minutes = now.getMinutes();\n      const seconds = now.getSeconds();\n      const milliseconds = now.getMilliseconds();\n\n      const adjustAngleAsHandPointToRight = 180;\n      // Calculate angles for hands with smooth movement\n      // Hour hand: 30 degrees per hour + partial movement based on minutes\n      const hourAngle =\n        (hours % 12) * 30 + (minutes / 60) * 30 - adjustAngleAsHandPointToRight;\n\n      // Minute hand: 6 degrees per minute + partial movement based on seconds\n      const minuteAngle =\n        minutes * 6 + (seconds / 60) * 6 - adjustAngleAsHandPointToRight;\n\n      // Second hand: 6 degrees per second + partial movement based on milliseconds for smooth motion\n      const secondAngle = seconds * 6 - adjustAngleAsHandPointToRight;\n\n      // Apply rotations to hands with null checks\n      const hourHand = document.querySelector(".hour-hand");\n      const minuteHand = document.querySelector(".minute-hand");\n      const secondHand = document.querySelector(".second-hand");\n\n      if (hourHand instanceof HTMLElement) {\n        hourHand.style.transform = \\`rotate(\\${hourAngle}deg)\\`;\n      }\n\n      if (minuteHand instanceof HTMLElement) {\n        minuteHand.style.transform = \\`rotate(\\${minuteAngle}deg)\\`;\n      }\n\n      if (secondHand instanceof HTMLElement) {\n        secondHand.style.transform = \\`rotate(\\${secondAngle}deg)\\`;\n      }\n    }\n\n    // Initialize the clock\n    createClockTicks();\n    updateClock();\n\n    // Update clock more frequently for smoother second hand movement\n    setInterval(updateClock, 50);\n  });\n<\/script> <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.8.0/p5.js"><\/script> <script>\n  function setup_canvas() {\n    let _canvas = createCanvas(512, 512);\n    _canvas.parent("canvas");\n    frameRate(60);\n    background(13);\n  }\n\n  // sketch\n  let yellow = [255, 224, 26];\n  let blue = [8, 9, 146];\n\n  function setup() {\n    setup_canvas();\n    describe("A sketch of THE Malaysian Favourite Clock.");\n    // sketch\n\n    angleMode(DEGREES);\n  }\n\n  function draw() {\n    background(13);\n\n    // sketch\n    push();\n    draw_clock();\n    pop();\n  }\n\n  function draw_clock() {\n    // Translate the origin to the center of the canvas\n    translate(width / 2, height / 2);\n    strokeCap(SQUARE);\n\n    // Draw clock face\n    stroke(255, 0, 0);\n    strokeWeight(38);\n    ellipse(0, 0, 350, 350);\n\n    fill(blue);\n    stroke(255);\n    strokeWeight(12);\n    ellipse(0, 0, 350, 350);\n\n    // Draw the ticks\n    for (let i = 0; i < 60; i++) {\n      let len = i % 5 === 0 ? 15 : 8;\n      if (i % 5 === 0) {\n        strokeWeight(6);\n      } else {\n        strokeWeight(4);\n      }\n      let angle = map(i, 0, 60, 0, 360);\n      let x1 = cos(angle) * 165;\n      let y1 = sin(angle) * 165;\n      let x2 = cos(angle) * (165 - len);\n      let y2 = sin(angle) * (165 - len);\n      line(x1, y1, x2, y2);\n    }\n\n    // Get the current UTC time\n    let now = new Date();\n    let hours = now.getUTCHours() + 8; // Convert to Malaysia time (GMT+8)\n    let minutes = now.getUTCMinutes();\n    let seconds = now.getUTCSeconds();\n\n    // Correct for number over 24\n    hours = hours >= 24 ? hours - 24 : hours;\n\n    let adjustAngleAsHandPointToRight = 90;\n\n    // Calculate angles for hands\n    let hourAngle =\n      map(hours % 12, 0, 12, 0, 360) +\n      minutes * 0.5 -\n      adjustAngleAsHandPointToRight;\n    let minuteAngle =\n      map(minutes, 0, 60, 0, 360) +\n      map(seconds, 0, 60, 0, 6) -\n      adjustAngleAsHandPointToRight;\n    let secondAngle =\n      map(seconds, 0, 60, 0, 360) - adjustAngleAsHandPointToRight;\n\n    // Draw the second hand\n    push();\n    // translate(10, 0);\n    stroke(yellow);\n    strokeWeight(5);\n    rotate(secondAngle);\n    line(-22, 0, 164, 0);\n    pop();\n\n    // Draw the minute hand\n    push();\n    stroke(yellow);\n    strokeWeight(6);\n    rotate(minuteAngle);\n    line(-20, 0, 148, 0);\n    pop();\n\n    // Draw the hour hand\n    push();\n    stroke(yellow);\n    strokeWeight(12);\n    rotate(hourAngle);\n    line(-20, 0, 140, 0);\n    pop();\n  }\n<\/script>'])), renderComponent($$result, "BaseLayout", $$BaseLayout, { "title": "The Malaysian Clock - CSS Version" }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<main> <div class="container mx-auto"> <h1>The Malaysian Clock</h1> <p>A sketch of THE Malaysian Favourite Clock.</p> <div id="the-malaysian-clock"> <div class="clock-container"> <div class="clock"> <div class="outer-ring"></div> <div class="inner-face"></div> <!-- Clock Ticks --> <div class="ticks"> <!-- Major ticks (hours) will be created by JavaScript --> <!-- Minor ticks (minutes) will be created by JavaScript --> </div> <!-- Clock Hands --> <div class="hand hour-hand"></div> <div class="hand minute-hand"></div> <div class="hand second-hand"></div> </div> </div> </div> <div id="canvas"></div> </div> </main> ` }));
}, "/home/matsu/Desktop/jy/src/pages/sketches/2025/250316-the-malaysian-clock.astro", void 0);

const $$file = "/home/matsu/Desktop/jy/src/pages/sketches/2025/250316-the-malaysian-clock.astro";
const $$url = "/sketches/2025/250316-the-malaysian-clock";

const __vite_glob_0_4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$250316TheMalaysianClock,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_4 as _ };
