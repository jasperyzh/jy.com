import { a as createComponent, b as renderTemplate, g as renderHead } from './astro/server_BuftSjIy.mjs';
import 'kleur/colors';
import 'clsx';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$250327Gemini8Bitsfx = createComponent(async ($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(['<html lang="en"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Vanilla JS SFX Generator</title><script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"><\/script><style>\n      /* ... (Keep existing CSS) ... */\n      body {\n        font-family: sans-serif;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 20px;\n        background-color: #f4f4f4;\n      }\n      .container {\n        display: flex;\n        gap: 30px;\n        width: 100%;\n        max-width: 900px;\n        background-color: #fff;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      }\n      .controls,\n      .visualization {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n      }\n      fieldset {\n        border: 1px solid #ccc;\n        padding: 15px;\n        border-radius: 5px;\n        margin-bottom: 10px;\n      }\n      legend {\n        font-weight: bold;\n        padding: 0 5px;\n        color: #333;\n      }\n      label {\n        display: block;\n        margin-bottom: 3px;\n        font-size: 0.9em;\n        color: #555;\n      }\n      input[type="range"] {\n        width: 100%;\n        cursor: pointer;\n      }\n      select {\n        width: 100%;\n        padding: 5px;\n      }\n      button {\n        padding: 12px 25px;\n        font-size: 1.1em;\n        cursor: pointer;\n        background-color: #007bff;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      button:hover {\n        background-color: #0056b3;\n      }\n      button:active {\n        background-color: #004085;\n      }\n      .value-display {\n        font-style: italic;\n        color: #666;\n        font-size: 0.85em;\n        margin-left: 5px;\n      }\n      .placeholder {\n        border: 2px dashed #ccc;\n        height: 200px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: #aaa;\n        border-radius: 5px;\n        text-align: center;\n      }\n      /* Basic Responsive */\n      @media (max-width: 700px) {\n        .container {\n          flex-direction: column;\n        }\n      }\n    </style>', '</head> <body> <h1>Retro Sound Effect Generator (Vanilla JS)</h1> <div class="container"> <!-- Column 1: Controls --> <div class="controls"> <h2>Controls</h2> <button id="playButton">Play Sound</button>  <div> <label for="volumeSlider">Volume: <span class="value-display" id="volumeValue">-10 dB</span></label> <input type="range" id="volumeSlider" min="-60" max="0" step="0.5" value="-10"> </div> <div> <label for="waveTypeSelect">Wave Type:</label> <select id="waveTypeSelect"> <option value="sine">Sine</option> <option value="square" selected>Square</option> <option value="sawtooth">Sawtooth</option> <option value="triangle">Triangle</option> <option value="noise">Noise</option> </select> </div> <div> <label for="startFrequencySlider">Start Frequency: <span class="value-display" id="startFrequencyValue">440 Hz</span></label> <input type="range" id="startFrequencySlider" min="20" max="2000" step="1" value="440"> </div> <fieldset> <legend>Envelope</legend> <div> <label for="attackSlider">Attack: <span class="value-display" id="attackValue">0.010s</span></label> <input type="range" id="attackSlider" min="0.001" max="2" step="0.001" value="0.01"> </div> <div> <label for="decaySlider">Decay: <span class="value-display" id="decayValue">0.100s</span></label> <input type="range" id="decaySlider" min="0.001" max="2" step="0.001" value="0.1"> </div> <div> <label for="sustainSlider">Sustain: <span class="value-display" id="sustainValue">0.50</span></label> <input type="range" id="sustainSlider" min="0" max="1" step="0.01" value="0.5"> </div> <div> <label for="releaseSlider">Release: <span class="value-display" id="releaseValue">1.000s</span></label> <input type="range" id="releaseSlider" min="0.01" max="5" step="0.01" value="1.0"> </div> </fieldset> <fieldset> <legend>Filters</legend> <div> <label for="lpCutoffSlider">Low-pass Cutoff (Log): <span class="value-display" id="lpCutoffValue">~5623 Hz</span></label> <input type="range" id="lpCutoffSlider" min="1" max="100" step="1" value="75"> </div> <div> <label for="lpResonanceSlider">Low-pass Resonance: <span class="value-display" id="lpResonanceValue">1.0</span></label> <input type="range" id="lpResonanceSlider" min="0.1" max="20" step="0.1" value="1"> </div> <div> <label for="hpCutoffSlider">High-pass Cutoff (Log): <span class="value-display" id="hpCutoffValue">~20 Hz</span></label> <input type="range" id="hpCutoffSlider" min="1" max="100" step="1" value="1"> </div> </fieldset> </div> <!-- Column 2: Visualization (Placeholder) --> <div class="visualization"> <h2>Visualization (Todo)</h2> <div class="placeholder">Waveform Preview Canvas Here</div> </div> </div> <script>\n      document.addEventListener("DOMContentLoaded", () => {\n        // --- Global Tone.js Objects & State ---\n        let isInitialized = false;\n        let osc = null;\n        let noise = null;\n        let envelope = null;\n        let lpFilter = null;\n        let hpFilter = null;\n        let masterVolume = null;\n\n        // Initial Parameter Values\n        let params = {\n          /* ... same as before ... */ volume: -10,\n          waveType: "square",\n          startFrequency: 440,\n          attack: 0.01,\n          decay: 0.1,\n          sustain: 0.5,\n          release: 1.0,\n          lpCutoffSlider: 75,\n          lpResonance: 1,\n          hpCutoffSlider: 1,\n        };\n\n        // --- DOM Element References ---\n        const playButton = document.getElementById("playButton");\n        // ... (get all other element references as before) ...\n        const volumeSlider = document.getElementById("volumeSlider");\n        const volumeValue = document.getElementById("volumeValue");\n        const waveTypeSelect = document.getElementById("waveTypeSelect");\n        const startFrequencySlider = document.getElementById(\n          "startFrequencySlider"\n        );\n        const startFrequencyValue = document.getElementById(\n          "startFrequencyValue"\n        );\n        const attackSlider = document.getElementById("attackSlider");\n        const attackValue = document.getElementById("attackValue");\n        const decaySlider = document.getElementById("decaySlider");\n        const decayValue = document.getElementById("decayValue");\n        const sustainSlider = document.getElementById("sustainSlider");\n        const sustainValue = document.getElementById("sustainValue");\n        const releaseSlider = document.getElementById("releaseSlider");\n        const releaseValue = document.getElementById("releaseValue");\n        const lpCutoffSlider = document.getElementById("lpCutoffSlider");\n        const lpCutoffValue = document.getElementById("lpCutoffValue");\n        const lpResonanceSlider = document.getElementById("lpResonanceSlider");\n        const lpResonanceValue = document.getElementById("lpResonanceValue");\n        const hpCutoffSlider = document.getElementById("hpCutoffSlider");\n        const hpCutoffValue = document.getElementById("hpCutoffValue");\n\n        // --- Helper Functions ---\n        const logScale = (value, min, max) => {\n          /* ... same as before ... */\n          const minLog = Math.log(min || 1); // Avoid log(0)\n          const maxLog = Math.log(max);\n          const scale = (maxLog - minLog) / (100 - 1); // Slider range 1-100\n          return Math.exp(minLog + scale * (value - 1));\n        };\n        const updateDisplays = () => {\n          /* ... same as before ... */\n          volumeValue.textContent = `${parseFloat(volumeSlider.value).toFixed(1)} dB`;\n          startFrequencyValue.textContent = `${parseFloat(startFrequencySlider.value).toFixed(0)} Hz`;\n          attackValue.textContent = `${parseFloat(attackSlider.value).toFixed(3)}s`;\n          decayValue.textContent = `${parseFloat(decaySlider.value).toFixed(3)}s`;\n          sustainValue.textContent = `${parseFloat(sustainSlider.value).toFixed(2)}`;\n          releaseValue.textContent = `${parseFloat(releaseSlider.value).toFixed(3)}s`;\n          lpCutoffValue.textContent = `~${logScale(parseFloat(lpCutoffSlider.value), 20, 20000).toFixed(0)} Hz`;\n          lpResonanceValue.textContent = `${parseFloat(lpResonanceSlider.value).toFixed(1)}`;\n          hpCutoffValue.textContent = `~${logScale(parseFloat(hpCutoffSlider.value), 20, 20000).toFixed(0)} Hz`;\n        };\n\n        // Function to initialize Tone.js objects\n        const initializeTone = () => {\n          // Dispose existing nodes if re-initializing (safety measure)\n          osc?.dispose();\n          noise?.dispose();\n          envelope?.dispose();\n          lpFilter?.dispose();\n          hpFilter?.dispose();\n          masterVolume?.dispose();\n\n          // Create nodes\n          masterVolume = new Tone.Volume(params.volume).toDestination();\n          envelope = new Tone.AmplitudeEnvelope({\n            /* ... params ... */ attack: params.attack,\n            decay: params.decay,\n            sustain: params.sustain,\n            release: params.release,\n          }).connect(masterVolume);\n          lpFilter = new Tone.Filter({\n            /* ... params ... */\n            frequency: logScale(params.lpCutoffSlider, 20, 20000),\n            type: "lowpass",\n            Q: params.lpResonance,\n          }).connect(envelope);\n          hpFilter = new Tone.Filter({\n            /* ... params ... */\n            frequency: logScale(params.hpCutoffSlider, 20, 20000),\n            type: "highpass",\n          }).connect(lpFilter);\n\n          // Create sources but DON\'T start them here.\n          osc = new Tone.Oscillator({\n            frequency: params.startFrequency,\n            type: params.waveType,\n          });\n          noise = new Tone.Noise("white");\n\n          // Connect the initial source. Tone.js will handle starting it on trigger.\n          connectSource(params.waveType);\n\n          // *** IMPORTANT: Start the sources *now* after they are created and connected.\n          // *** Tone.js often requires sources to be started once to be usable.\n          // *** They won\'t make sound until triggered by the envelope.\n          osc.start();\n          noise.start();\n\n          console.log(\n            "Tone.js components initialized and sources started (but silent)."\n          );\n        };\n\n        // Function to connect the correct source\n        const connectSource = (type) => {\n          if (!hpFilter || !osc || !noise) return;\n          // osc.disconnect(hpFilter);\n          // noise.disconnect(hpFilter);\n\n          osc.disconnect(); // \u2705 Safely remove all osc connections\n          noise.disconnect(); // \u2705 Safely remove all noise connections\n\n          /*  if (type === "noise") {\n            noise.connect(hpFilter);\n          } else {\n            // Update oscillator type if needed (safer than relying on initial creation)\n            if (osc.type !== type) {\n              osc.type = type;\n            }\n            osc.connect(hpFilter);\n          } */\n          if (type === "noise") {\n            noise.connect(hpFilter);\n          } else {\n            osc.type = type;\n            osc.connect(hpFilter);\n          }\n          console.log(`Connected source: ${type}`);\n        };\n\n        // --- Event Listener Setup ---\n\n        // Play Button (REVISED)\n        playButton.addEventListener("click", async () => {\n          // 1. Ensure AudioContext is running (only does something on first click)\n          if (Tone.context.state !== "running") {\n            console.log("AudioContext not running, attempting Tone.start()...");\n            await Tone.start();\n            console.log(\n              "AudioContext state after Tone.start():",\n              Tone.context.state\n            );\n          }\n\n          // 2. Initialize Tone objects if they don\'t exist yet\n          if (!isInitialized) {\n            console.log("First play click: Initializing Tone components...");\n            initializeTone();\n            isInitialized = true;\n          }\n\n          // 3. Check if initialization seems successful\n          if (!envelope || !osc || !noise) {\n            console.error(\n              "Initialization failed or pending, cannot play sound."\n            );\n            // Maybe try initializing again? Or alert user.\n            if (!isInitialized) {\n              // If first attempt failed\n              console.log("Retrying initialization...");\n              initializeTone();\n              isInitialized = true; // Assume success for now\n              if (!envelope) return; // Bail if still failed\n            } else {\n              return; // Bail if failed on subsequent clicks\n            }\n          }\n\n          // 4. Trigger the envelope\n          const now = Tone.now();\n          // Using triggerAttackRelease is often simpler for basic SFX\n          const duration = params.attack + params.decay + params.release; // Total potential duration\n          // Let\'s use triggerAttackRelease - it handles start/stop based on envelope times\n          envelope.triggerAttackRelease(duration, now); // Duration here is max length\n\n          console.log(\n            `Triggering sound (max duration: ${duration.toFixed(3)}s) at ${now.toFixed(3)}`\n          );\n        });\n\n        // Parameter Sliders & Select (Input listeners - REVISED slightly for clarity)\n        volumeSlider.addEventListener("input", (e) => {\n          params.volume = parseFloat(e.target.value);\n          // Use rampTo for smoother volume changes, especially if changed during playback\n          if (masterVolume) masterVolume.volume.rampTo(params.volume, 0.05);\n          volumeValue.textContent = `${params.volume.toFixed(1)} dB`;\n        });\n\n        waveTypeSelect.addEventListener("change", (e) => {\n          params.waveType = e.target.value;\n          // Reconnect the source immediately if already initialized\n          if (isInitialized) {\n            connectSource(params.waveType);\n          }\n        });\n\n        startFrequencySlider.addEventListener("input", (e) => {\n          params.startFrequency = parseFloat(e.target.value);\n          if (osc) osc.frequency.value = params.startFrequency; // Direct set is fine for base freq\n          startFrequencyValue.textContent = `${params.startFrequency.toFixed(0)} Hz`;\n        });\n\n        // --- Envelope Parameter Updates ---\n        attackSlider.addEventListener("input", (e) => {\n          params.attack = parseFloat(e.target.value);\n          if (envelope) envelope.attack = params.attack;\n          attackValue.textContent = `${params.attack.toFixed(3)}s`;\n        });\n        decaySlider.addEventListener("input", (e) => {\n          params.decay = parseFloat(e.target.value);\n          if (envelope) envelope.decay = params.decay;\n          decayValue.textContent = `${params.decay.toFixed(3)}s`;\n        });\n        sustainSlider.addEventListener("input", (e) => {\n          params.sustain = parseFloat(e.target.value);\n          if (envelope) envelope.sustain = params.sustain;\n          sustainValue.textContent = `${params.sustain.toFixed(2)}`;\n        });\n        releaseSlider.addEventListener("input", (e) => {\n          params.release = parseFloat(e.target.value);\n          if (envelope) envelope.release = params.release;\n          releaseValue.textContent = `${params.release.toFixed(3)}s`;\n        });\n\n        // --- Filter Parameter Updates ---\n        lpCutoffSlider.addEventListener("input", (e) => {\n          params.lpCutoffSlider = parseFloat(e.target.value);\n          const freq = logScale(params.lpCutoffSlider, 20, 20000);\n          // Use rampTo for smoother filter sweeps if changed during playback\n          if (lpFilter) lpFilter.frequency.rampTo(freq, 0.05);\n          lpCutoffValue.textContent = `~${freq.toFixed(0)} Hz`;\n        });\n        lpResonanceSlider.addEventListener("input", (e) => {\n          params.lpResonance = parseFloat(e.target.value);\n          if (lpFilter) lpFilter.Q.value = params.lpResonance; // Direct set is usually fine for Q\n          lpResonanceValue.textContent = `${params.lpResonance.toFixed(1)}`;\n        });\n        hpCutoffSlider.addEventListener("input", (e) => {\n          params.hpCutoffSlider = parseFloat(e.target.value);\n          const freq = logScale(params.hpCutoffSlider, 20, 20000);\n          if (hpFilter) hpFilter.frequency.rampTo(freq, 0.05);\n          hpCutoffValue.textContent = `~${freq.toFixed(0)} Hz`;\n        });\n\n        // --- Initial Setup ---\n        updateDisplays(); // Set initial text values\n\n        // No need to call initializeTone() here, wait for first play click\n      }); // End DOMContentLoaded\n    <\/script> </body> </html> <!-- \n### **Prompt for Recreating the Sound Effect Generator Tool**  \n\n**Objective:**  \nCreate a web-based sound effect generator inspired by `sfxr` and `jsfxr`, with a user-friendly interface for designing retro 8-bit/chiptune-style sounds. The tool should allow users to tweak parameters, save presets, and export sounds in common formats (WAV, MP3).  Use tone.js.\n\n---\n\n### **Key Features to Implement**  \n\n#### **1. Two Modes: Simple & Advanced**  \n- **Simple Mode:**  \n  - Preset buttons (e.g., "Coin", "Jump", "Explosion", "Laser").  \n  - Basic sliders for volume, pitch, and tone.  \n  - One-click randomization ("Mutate").  \n\n- **Advanced Mode:**  \n  - Full control over waveform generation (Square, Saw, Sine, Noise).  \n  - Envelope controls (Attack, Sustain, Decay, Punch).  \n  - Frequency modulation (Vibrato, Arpeggio, Slide).  \n  - Filter controls (Low-pass, High-pass, Resonance).  \n  - Retrigger & Flanger effects.  \n\n#### **2. Improvements Over Existing Tools**  \n- **Visual Waveform Preview:** Show real-time waveform changes as parameters adjust.  \n- **Preset Management:** Save, load, and share custom sound presets (JSON/Base58).  \n- **Export Options:**  \n  - Multiple formats (WAV, MP3, OGG).  \n  - Direct integration with game engines (Unity, Godot, Unreal).  \n- **Undo/Redo History:** Track changes for easy experimentation.  \n- **Polyphonic Playback:** Test multiple sounds simultaneously.  \n\n#### **3. Modern UI Enhancements**  \n- **Dark/Light Mode Toggle**  \n- **Responsive Design:** Works on desktop and mobile.  \n- **Tooltips:** Explain parameters for beginners.  \n- **Keyboard Shortcuts:** Quick adjustments (e.g., arrow keys for fine-tuning).  \n\n---\n\n### **Example UI Layout**  \n\n#### **Simple Mode:**  \n```\n[ Presets: Random | Coin | Jump | Laser | Explosion ]  \n\nVolume: [=====|-----] (-10 dB)  \nPitch:  [=====|-----] (500 Hz)  \nTone:   [=====|-----] (Bright)  \n\n[ Play Sound ]  [ Mutate ]  [ Save Preset ]  \n```\n\n#### **Advanced Mode:**  \n```\nWave Type: [\u25CF Square] [\u25CB Saw] [\u25CB Sine] [\u25CB Noise]  \n\nEnvelope:  \n- Attack:  [=====|-----] (0.5s)  \n- Sustain: [=====|-----] (0.2s)  \n- Decay:   [=====|-----] (1.0s)  \n- Punch:   [=====|-----] (20%)  \n\nFrequency:  \n- Start:   [=====|-----] (440 Hz)  \n- Slide:   [=====|-----] (+0.5 oct/s)  \n- Vibrato: [=====|-----] (Depth: 10%, Speed: 5Hz)  \n\nFilters:  \n- Low-pass: [=====|-----] (Cutoff: 1000 Hz, Resonance: 30%)  \n- High-pass:[=====|-----] (Cutoff: 200 Hz)  \n\n[ Play ]  [ Undo ]  [ Redo ]  [ Export WAV ]  \n```\n\n---\n\n### **Technical Implementation Suggestions**  \n- **Web Audio API** for real-time sound synthesis.  \n- **React/Vue.js** for a dynamic, state-managed UI.  \n- **LocalStorage** for saving presets.  \n- **WebAssembly (WASM)** for optimized DSP processing if needed.  \n\n---\n\n### **Why This Improves on Existing Tools?**  \n\u2705 **Easier for beginners** (Simple Mode).  \n\u2705 **More powerful for experts** (Advanced Mode).  \n\u2705 **Better workflow** (Undo/Redo, Presets).  \n\u2705 **More export-friendly** (Multiple formats, game engine support).  \n-->'], ['<html lang="en"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Vanilla JS SFX Generator</title><script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"><\/script><style>\n      /* ... (Keep existing CSS) ... */\n      body {\n        font-family: sans-serif;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 20px;\n        background-color: #f4f4f4;\n      }\n      .container {\n        display: flex;\n        gap: 30px;\n        width: 100%;\n        max-width: 900px;\n        background-color: #fff;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      }\n      .controls,\n      .visualization {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n      }\n      fieldset {\n        border: 1px solid #ccc;\n        padding: 15px;\n        border-radius: 5px;\n        margin-bottom: 10px;\n      }\n      legend {\n        font-weight: bold;\n        padding: 0 5px;\n        color: #333;\n      }\n      label {\n        display: block;\n        margin-bottom: 3px;\n        font-size: 0.9em;\n        color: #555;\n      }\n      input[type="range"] {\n        width: 100%;\n        cursor: pointer;\n      }\n      select {\n        width: 100%;\n        padding: 5px;\n      }\n      button {\n        padding: 12px 25px;\n        font-size: 1.1em;\n        cursor: pointer;\n        background-color: #007bff;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      button:hover {\n        background-color: #0056b3;\n      }\n      button:active {\n        background-color: #004085;\n      }\n      .value-display {\n        font-style: italic;\n        color: #666;\n        font-size: 0.85em;\n        margin-left: 5px;\n      }\n      .placeholder {\n        border: 2px dashed #ccc;\n        height: 200px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: #aaa;\n        border-radius: 5px;\n        text-align: center;\n      }\n      /* Basic Responsive */\n      @media (max-width: 700px) {\n        .container {\n          flex-direction: column;\n        }\n      }\n    </style>', '</head> <body> <h1>Retro Sound Effect Generator (Vanilla JS)</h1> <div class="container"> <!-- Column 1: Controls --> <div class="controls"> <h2>Controls</h2> <button id="playButton">Play Sound</button>  <div> <label for="volumeSlider">Volume: <span class="value-display" id="volumeValue">-10 dB</span></label> <input type="range" id="volumeSlider" min="-60" max="0" step="0.5" value="-10"> </div> <div> <label for="waveTypeSelect">Wave Type:</label> <select id="waveTypeSelect"> <option value="sine">Sine</option> <option value="square" selected>Square</option> <option value="sawtooth">Sawtooth</option> <option value="triangle">Triangle</option> <option value="noise">Noise</option> </select> </div> <div> <label for="startFrequencySlider">Start Frequency: <span class="value-display" id="startFrequencyValue">440 Hz</span></label> <input type="range" id="startFrequencySlider" min="20" max="2000" step="1" value="440"> </div> <fieldset> <legend>Envelope</legend> <div> <label for="attackSlider">Attack: <span class="value-display" id="attackValue">0.010s</span></label> <input type="range" id="attackSlider" min="0.001" max="2" step="0.001" value="0.01"> </div> <div> <label for="decaySlider">Decay: <span class="value-display" id="decayValue">0.100s</span></label> <input type="range" id="decaySlider" min="0.001" max="2" step="0.001" value="0.1"> </div> <div> <label for="sustainSlider">Sustain: <span class="value-display" id="sustainValue">0.50</span></label> <input type="range" id="sustainSlider" min="0" max="1" step="0.01" value="0.5"> </div> <div> <label for="releaseSlider">Release: <span class="value-display" id="releaseValue">1.000s</span></label> <input type="range" id="releaseSlider" min="0.01" max="5" step="0.01" value="1.0"> </div> </fieldset> <fieldset> <legend>Filters</legend> <div> <label for="lpCutoffSlider">Low-pass Cutoff (Log): <span class="value-display" id="lpCutoffValue">~5623 Hz</span></label> <input type="range" id="lpCutoffSlider" min="1" max="100" step="1" value="75"> </div> <div> <label for="lpResonanceSlider">Low-pass Resonance: <span class="value-display" id="lpResonanceValue">1.0</span></label> <input type="range" id="lpResonanceSlider" min="0.1" max="20" step="0.1" value="1"> </div> <div> <label for="hpCutoffSlider">High-pass Cutoff (Log): <span class="value-display" id="hpCutoffValue">~20 Hz</span></label> <input type="range" id="hpCutoffSlider" min="1" max="100" step="1" value="1"> </div> </fieldset> </div> <!-- Column 2: Visualization (Placeholder) --> <div class="visualization"> <h2>Visualization (Todo)</h2> <div class="placeholder">Waveform Preview Canvas Here</div> </div> </div> <script>\n      document.addEventListener("DOMContentLoaded", () => {\n        // --- Global Tone.js Objects & State ---\n        let isInitialized = false;\n        let osc = null;\n        let noise = null;\n        let envelope = null;\n        let lpFilter = null;\n        let hpFilter = null;\n        let masterVolume = null;\n\n        // Initial Parameter Values\n        let params = {\n          /* ... same as before ... */ volume: -10,\n          waveType: "square",\n          startFrequency: 440,\n          attack: 0.01,\n          decay: 0.1,\n          sustain: 0.5,\n          release: 1.0,\n          lpCutoffSlider: 75,\n          lpResonance: 1,\n          hpCutoffSlider: 1,\n        };\n\n        // --- DOM Element References ---\n        const playButton = document.getElementById("playButton");\n        // ... (get all other element references as before) ...\n        const volumeSlider = document.getElementById("volumeSlider");\n        const volumeValue = document.getElementById("volumeValue");\n        const waveTypeSelect = document.getElementById("waveTypeSelect");\n        const startFrequencySlider = document.getElementById(\n          "startFrequencySlider"\n        );\n        const startFrequencyValue = document.getElementById(\n          "startFrequencyValue"\n        );\n        const attackSlider = document.getElementById("attackSlider");\n        const attackValue = document.getElementById("attackValue");\n        const decaySlider = document.getElementById("decaySlider");\n        const decayValue = document.getElementById("decayValue");\n        const sustainSlider = document.getElementById("sustainSlider");\n        const sustainValue = document.getElementById("sustainValue");\n        const releaseSlider = document.getElementById("releaseSlider");\n        const releaseValue = document.getElementById("releaseValue");\n        const lpCutoffSlider = document.getElementById("lpCutoffSlider");\n        const lpCutoffValue = document.getElementById("lpCutoffValue");\n        const lpResonanceSlider = document.getElementById("lpResonanceSlider");\n        const lpResonanceValue = document.getElementById("lpResonanceValue");\n        const hpCutoffSlider = document.getElementById("hpCutoffSlider");\n        const hpCutoffValue = document.getElementById("hpCutoffValue");\n\n        // --- Helper Functions ---\n        const logScale = (value, min, max) => {\n          /* ... same as before ... */\n          const minLog = Math.log(min || 1); // Avoid log(0)\n          const maxLog = Math.log(max);\n          const scale = (maxLog - minLog) / (100 - 1); // Slider range 1-100\n          return Math.exp(minLog + scale * (value - 1));\n        };\n        const updateDisplays = () => {\n          /* ... same as before ... */\n          volumeValue.textContent = \\`\\${parseFloat(volumeSlider.value).toFixed(1)} dB\\`;\n          startFrequencyValue.textContent = \\`\\${parseFloat(startFrequencySlider.value).toFixed(0)} Hz\\`;\n          attackValue.textContent = \\`\\${parseFloat(attackSlider.value).toFixed(3)}s\\`;\n          decayValue.textContent = \\`\\${parseFloat(decaySlider.value).toFixed(3)}s\\`;\n          sustainValue.textContent = \\`\\${parseFloat(sustainSlider.value).toFixed(2)}\\`;\n          releaseValue.textContent = \\`\\${parseFloat(releaseSlider.value).toFixed(3)}s\\`;\n          lpCutoffValue.textContent = \\`~\\${logScale(parseFloat(lpCutoffSlider.value), 20, 20000).toFixed(0)} Hz\\`;\n          lpResonanceValue.textContent = \\`\\${parseFloat(lpResonanceSlider.value).toFixed(1)}\\`;\n          hpCutoffValue.textContent = \\`~\\${logScale(parseFloat(hpCutoffSlider.value), 20, 20000).toFixed(0)} Hz\\`;\n        };\n\n        // Function to initialize Tone.js objects\n        const initializeTone = () => {\n          // Dispose existing nodes if re-initializing (safety measure)\n          osc?.dispose();\n          noise?.dispose();\n          envelope?.dispose();\n          lpFilter?.dispose();\n          hpFilter?.dispose();\n          masterVolume?.dispose();\n\n          // Create nodes\n          masterVolume = new Tone.Volume(params.volume).toDestination();\n          envelope = new Tone.AmplitudeEnvelope({\n            /* ... params ... */ attack: params.attack,\n            decay: params.decay,\n            sustain: params.sustain,\n            release: params.release,\n          }).connect(masterVolume);\n          lpFilter = new Tone.Filter({\n            /* ... params ... */\n            frequency: logScale(params.lpCutoffSlider, 20, 20000),\n            type: "lowpass",\n            Q: params.lpResonance,\n          }).connect(envelope);\n          hpFilter = new Tone.Filter({\n            /* ... params ... */\n            frequency: logScale(params.hpCutoffSlider, 20, 20000),\n            type: "highpass",\n          }).connect(lpFilter);\n\n          // Create sources but DON\'T start them here.\n          osc = new Tone.Oscillator({\n            frequency: params.startFrequency,\n            type: params.waveType,\n          });\n          noise = new Tone.Noise("white");\n\n          // Connect the initial source. Tone.js will handle starting it on trigger.\n          connectSource(params.waveType);\n\n          // *** IMPORTANT: Start the sources *now* after they are created and connected.\n          // *** Tone.js often requires sources to be started once to be usable.\n          // *** They won\'t make sound until triggered by the envelope.\n          osc.start();\n          noise.start();\n\n          console.log(\n            "Tone.js components initialized and sources started (but silent)."\n          );\n        };\n\n        // Function to connect the correct source\n        const connectSource = (type) => {\n          if (!hpFilter || !osc || !noise) return;\n          // osc.disconnect(hpFilter);\n          // noise.disconnect(hpFilter);\n\n          osc.disconnect(); // \u2705 Safely remove all osc connections\n          noise.disconnect(); // \u2705 Safely remove all noise connections\n\n          /*  if (type === "noise") {\n            noise.connect(hpFilter);\n          } else {\n            // Update oscillator type if needed (safer than relying on initial creation)\n            if (osc.type !== type) {\n              osc.type = type;\n            }\n            osc.connect(hpFilter);\n          } */\n          if (type === "noise") {\n            noise.connect(hpFilter);\n          } else {\n            osc.type = type;\n            osc.connect(hpFilter);\n          }\n          console.log(\\`Connected source: \\${type}\\`);\n        };\n\n        // --- Event Listener Setup ---\n\n        // Play Button (REVISED)\n        playButton.addEventListener("click", async () => {\n          // 1. Ensure AudioContext is running (only does something on first click)\n          if (Tone.context.state !== "running") {\n            console.log("AudioContext not running, attempting Tone.start()...");\n            await Tone.start();\n            console.log(\n              "AudioContext state after Tone.start():",\n              Tone.context.state\n            );\n          }\n\n          // 2. Initialize Tone objects if they don\'t exist yet\n          if (!isInitialized) {\n            console.log("First play click: Initializing Tone components...");\n            initializeTone();\n            isInitialized = true;\n          }\n\n          // 3. Check if initialization seems successful\n          if (!envelope || !osc || !noise) {\n            console.error(\n              "Initialization failed or pending, cannot play sound."\n            );\n            // Maybe try initializing again? Or alert user.\n            if (!isInitialized) {\n              // If first attempt failed\n              console.log("Retrying initialization...");\n              initializeTone();\n              isInitialized = true; // Assume success for now\n              if (!envelope) return; // Bail if still failed\n            } else {\n              return; // Bail if failed on subsequent clicks\n            }\n          }\n\n          // 4. Trigger the envelope\n          const now = Tone.now();\n          // Using triggerAttackRelease is often simpler for basic SFX\n          const duration = params.attack + params.decay + params.release; // Total potential duration\n          // Let\'s use triggerAttackRelease - it handles start/stop based on envelope times\n          envelope.triggerAttackRelease(duration, now); // Duration here is max length\n\n          console.log(\n            \\`Triggering sound (max duration: \\${duration.toFixed(3)}s) at \\${now.toFixed(3)}\\`\n          );\n        });\n\n        // Parameter Sliders & Select (Input listeners - REVISED slightly for clarity)\n        volumeSlider.addEventListener("input", (e) => {\n          params.volume = parseFloat(e.target.value);\n          // Use rampTo for smoother volume changes, especially if changed during playback\n          if (masterVolume) masterVolume.volume.rampTo(params.volume, 0.05);\n          volumeValue.textContent = \\`\\${params.volume.toFixed(1)} dB\\`;\n        });\n\n        waveTypeSelect.addEventListener("change", (e) => {\n          params.waveType = e.target.value;\n          // Reconnect the source immediately if already initialized\n          if (isInitialized) {\n            connectSource(params.waveType);\n          }\n        });\n\n        startFrequencySlider.addEventListener("input", (e) => {\n          params.startFrequency = parseFloat(e.target.value);\n          if (osc) osc.frequency.value = params.startFrequency; // Direct set is fine for base freq\n          startFrequencyValue.textContent = \\`\\${params.startFrequency.toFixed(0)} Hz\\`;\n        });\n\n        // --- Envelope Parameter Updates ---\n        attackSlider.addEventListener("input", (e) => {\n          params.attack = parseFloat(e.target.value);\n          if (envelope) envelope.attack = params.attack;\n          attackValue.textContent = \\`\\${params.attack.toFixed(3)}s\\`;\n        });\n        decaySlider.addEventListener("input", (e) => {\n          params.decay = parseFloat(e.target.value);\n          if (envelope) envelope.decay = params.decay;\n          decayValue.textContent = \\`\\${params.decay.toFixed(3)}s\\`;\n        });\n        sustainSlider.addEventListener("input", (e) => {\n          params.sustain = parseFloat(e.target.value);\n          if (envelope) envelope.sustain = params.sustain;\n          sustainValue.textContent = \\`\\${params.sustain.toFixed(2)}\\`;\n        });\n        releaseSlider.addEventListener("input", (e) => {\n          params.release = parseFloat(e.target.value);\n          if (envelope) envelope.release = params.release;\n          releaseValue.textContent = \\`\\${params.release.toFixed(3)}s\\`;\n        });\n\n        // --- Filter Parameter Updates ---\n        lpCutoffSlider.addEventListener("input", (e) => {\n          params.lpCutoffSlider = parseFloat(e.target.value);\n          const freq = logScale(params.lpCutoffSlider, 20, 20000);\n          // Use rampTo for smoother filter sweeps if changed during playback\n          if (lpFilter) lpFilter.frequency.rampTo(freq, 0.05);\n          lpCutoffValue.textContent = \\`~\\${freq.toFixed(0)} Hz\\`;\n        });\n        lpResonanceSlider.addEventListener("input", (e) => {\n          params.lpResonance = parseFloat(e.target.value);\n          if (lpFilter) lpFilter.Q.value = params.lpResonance; // Direct set is usually fine for Q\n          lpResonanceValue.textContent = \\`\\${params.lpResonance.toFixed(1)}\\`;\n        });\n        hpCutoffSlider.addEventListener("input", (e) => {\n          params.hpCutoffSlider = parseFloat(e.target.value);\n          const freq = logScale(params.hpCutoffSlider, 20, 20000);\n          if (hpFilter) hpFilter.frequency.rampTo(freq, 0.05);\n          hpCutoffValue.textContent = \\`~\\${freq.toFixed(0)} Hz\\`;\n        });\n\n        // --- Initial Setup ---\n        updateDisplays(); // Set initial text values\n\n        // No need to call initializeTone() here, wait for first play click\n      }); // End DOMContentLoaded\n    <\/script> </body> </html> <!-- \n### **Prompt for Recreating the Sound Effect Generator Tool**  \n\n**Objective:**  \nCreate a web-based sound effect generator inspired by \\`sfxr\\` and \\`jsfxr\\`, with a user-friendly interface for designing retro 8-bit/chiptune-style sounds. The tool should allow users to tweak parameters, save presets, and export sounds in common formats (WAV, MP3).  Use tone.js.\n\n---\n\n### **Key Features to Implement**  \n\n#### **1. Two Modes: Simple & Advanced**  \n- **Simple Mode:**  \n  - Preset buttons (e.g., "Coin", "Jump", "Explosion", "Laser").  \n  - Basic sliders for volume, pitch, and tone.  \n  - One-click randomization ("Mutate").  \n\n- **Advanced Mode:**  \n  - Full control over waveform generation (Square, Saw, Sine, Noise).  \n  - Envelope controls (Attack, Sustain, Decay, Punch).  \n  - Frequency modulation (Vibrato, Arpeggio, Slide).  \n  - Filter controls (Low-pass, High-pass, Resonance).  \n  - Retrigger & Flanger effects.  \n\n#### **2. Improvements Over Existing Tools**  \n- **Visual Waveform Preview:** Show real-time waveform changes as parameters adjust.  \n- **Preset Management:** Save, load, and share custom sound presets (JSON/Base58).  \n- **Export Options:**  \n  - Multiple formats (WAV, MP3, OGG).  \n  - Direct integration with game engines (Unity, Godot, Unreal).  \n- **Undo/Redo History:** Track changes for easy experimentation.  \n- **Polyphonic Playback:** Test multiple sounds simultaneously.  \n\n#### **3. Modern UI Enhancements**  \n- **Dark/Light Mode Toggle**  \n- **Responsive Design:** Works on desktop and mobile.  \n- **Tooltips:** Explain parameters for beginners.  \n- **Keyboard Shortcuts:** Quick adjustments (e.g., arrow keys for fine-tuning).  \n\n---\n\n### **Example UI Layout**  \n\n#### **Simple Mode:**  \n\\`\\`\\`\n[ Presets: Random | Coin | Jump | Laser | Explosion ]  \n\nVolume: [=====|-----] (-10 dB)  \nPitch:  [=====|-----] (500 Hz)  \nTone:   [=====|-----] (Bright)  \n\n[ Play Sound ]  [ Mutate ]  [ Save Preset ]  \n\\`\\`\\`\n\n#### **Advanced Mode:**  \n\\`\\`\\`\nWave Type: [\u25CF Square] [\u25CB Saw] [\u25CB Sine] [\u25CB Noise]  \n\nEnvelope:  \n- Attack:  [=====|-----] (0.5s)  \n- Sustain: [=====|-----] (0.2s)  \n- Decay:   [=====|-----] (1.0s)  \n- Punch:   [=====|-----] (20%)  \n\nFrequency:  \n- Start:   [=====|-----] (440 Hz)  \n- Slide:   [=====|-----] (+0.5 oct/s)  \n- Vibrato: [=====|-----] (Depth: 10%, Speed: 5Hz)  \n\nFilters:  \n- Low-pass: [=====|-----] (Cutoff: 1000 Hz, Resonance: 30%)  \n- High-pass:[=====|-----] (Cutoff: 200 Hz)  \n\n[ Play ]  [ Undo ]  [ Redo ]  [ Export WAV ]  \n\\`\\`\\`\n\n---\n\n### **Technical Implementation Suggestions**  \n- **Web Audio API** for real-time sound synthesis.  \n- **React/Vue.js** for a dynamic, state-managed UI.  \n- **LocalStorage** for saving presets.  \n- **WebAssembly (WASM)** for optimized DSP processing if needed.  \n\n---\n\n### **Why This Improves on Existing Tools?**  \n\u2705 **Easier for beginners** (Simple Mode).  \n\u2705 **More powerful for experts** (Advanced Mode).  \n\u2705 **Better workflow** (Undo/Redo, Presets).  \n\u2705 **More export-friendly** (Multiple formats, game engine support).  \n-->'])), renderHead());
}, "/home/matsu/Desktop/jy/src/pages/sketches/2025/250327-gemini_8bitsfx.astro", void 0);

const $$file = "/home/matsu/Desktop/jy/src/pages/sketches/2025/250327-gemini_8bitsfx.astro";
const $$url = "/sketches/2025/250327-gemini_8bitsfx";

const __vite_glob_0_22 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$250327Gemini8Bitsfx,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_22 as _ };
