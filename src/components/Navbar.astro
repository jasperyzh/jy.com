---
import { Button } from "@/components/starwind/button";
import { Icon } from "astro-icon/components";

import { SITE_TITLE } from "@/consts";
import ThemeToggleButton from "@/components/ThemeToggle.astro";

// Only show demo link in development mode
const isDevelopment = import.meta.env.DEV;

// Get current path to highlight active page
const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.endsWith("/") ? pathname.slice(0, -1) : pathname;
---

<nav aria-label="Main navigation">
  <Button class="home" href="/" variant="ghost" aria-label="Home"
    >{SITE_TITLE}</Button
  >

  <Button
    class="menu-toggle md:hidden"
    type="button"
    variant="ghost"
    size="icon"
    aria-controls="nav-links"
    aria-expanded="false"
    id="mobile-menu-button"
  >
    <span class="sr-only">Toggle menu</span>
    <Icon name="bi:list" />
  </Button>

  <div class="nav-links" id="nav-links">
    <Button
      class="close-menu md:hidden"
      variant="ghost"
      size="icon"
      aria-label="Close menu"
    >
      <Icon name="bi:x-lg" class="h-5 w-5" />
    </Button>

    {
      isDevelopment && (
        <Button href="/demo" variant="ghost" size="sm">
          Demo Pages
        </Button>
      )
    }
    <Button href="/sketches" variant="ghost" size="sm"
      >Sketches & Experiments</Button
    >
    <Button href="/blog" variant="ghost" size="sm">Blog</Button>
    <Button href="/#contact" variant="ghost" size="sm">Contact</Button>
    <div>
      <ThemeToggleButton />
    </div>
  </div>
</nav>

<style>
  nav {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: auto;
    padding-block: 0.75rem;

    & > .home {
      grid-column: 1 / span 2;
      justify-self: start;
    }

    & > .menu-toggle {
      grid-column: -1 / span 2;
      grid-row: 1;
      justify-self: end;
    }

    & > .nav-links {
      grid-column: -1 / span 4;
      justify-self: end;
    }
  }

  .menu-container {
    display: flex;
    align-items: center;
  }

  .nav-links {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 1rem;
  }

  @media (max-width: 768px) {
    .nav-links {
      position: fixed;
      top: 0;
      right: -60vw;
      bottom: 0;
      width: 60vw;
      z-index: 50;
      flex-direction: column;
      justify-content: flex-start;
      align-items: flex-end;
      padding: 5rem 2rem 2rem;
      gap: 1.5rem;
      background-color: var(--color-bg, #fff);
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
      background-color: rgba(255, 255, 255, 0.9);
      transition: right 0.3s ease;
      box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
    }

    :global(.dark) .nav-links {
      background-color: rgba(15, 23, 42, 0.9);
      box-shadow: -5px 0 15px rgba(0, 0, 0, 0.3);
    }

    .nav-links.active {
      right: 0;
    }

    .close-menu {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
    }
  }
</style>

<script>
  // Simple menu toggle
  document.addEventListener("DOMContentLoaded", () => {
    const menuButton = document.getElementById("mobile-menu-button");
    const navLinks = document.getElementById("nav-links");
    const closeButton = document.querySelector(".close-menu");

    // Toggle menu open
    if (menuButton && navLinks) {
      menuButton.addEventListener("click", () => {
        navLinks.classList.add("active");
        menuButton.setAttribute("aria-expanded", "true");
        document.body.style.overflow = "hidden";
      });
    }

    // Close menu
    if (closeButton && navLinks) {
      closeButton.addEventListener("click", closeMenu);
    }

    // Close when clicking on menu links
    const menuLinks = navLinks?.querySelectorAll("a");
    menuLinks?.forEach((link) => {
      link.addEventListener("click", () => {
        if (window.innerWidth < 768) {
          closeMenu();
        }
      });
    });

    // Close on escape key
    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        navLinks &&
        navLinks.classList.contains("active")
      ) {
        closeMenu();
      }
    });

    function closeMenu() {
      if (!navLinks || !menuButton) return;

      navLinks.classList.remove("active");
      menuButton.setAttribute("aria-expanded", "false");
      document.body.style.overflow = "";
      menuButton.focus();
    }
  });
</script>
