---
/**
 * MicroblogFeed component
 * Displays a feed of microblog posts with optional filtering
 */
import { type CollectionEntry } from "astro:content";
import MicroblogPost from "./MicroblogPost.astro";
import Pagination from "../Pagination.astro";

interface Props {
  posts: CollectionEntry<"microblog">[];
  currentPage?: number;
  totalPages?: number;
  prevUrl?: string | null;
  nextUrl?: string | null;
  showFilters?: boolean;
  currentFilter?: string | null;
}

const {
  posts,
  currentPage = 1,
  totalPages = 1,
  prevUrl = null,
  nextUrl = null,
  showFilters = true,
  currentFilter = null,
} = Astro.props;

// Define content type options for filtering
const contentTypes = [
  { value: "all", label: "All Posts" },
  { value: "text", label: "Text Only" },
  { value: "image", label: "Images" },
  { value: "video", label: "Videos" },
  { value: "mixed", label: "Mixed Content" },
];
---

<div class="microblog-feed">
  {/* Filter controls */}
  {showFilters && (
    <div class="microblog-filters mb-4">
      <div class="card">
        <div class="card-body">
          <h3 class="h5 mb-3">Filter Posts</h3>
          
          <div class="filter-options d-flex flex-wrap gap-2">
            {contentTypes.map(type => (
              <a 
                href={type.value === "all" ? "/microblog" : `/microblog/type/${type.value}`}
                class={`btn ${currentFilter === type.value ? 'btn-primary' : 'btn-outline-primary'}`}
              >
                {type.value === "text" && <i class="bi bi-file-text me-1"></i>}
                {type.value === "image" && <i class="bi bi-image me-1"></i>}
                {type.value === "video" && <i class="bi bi-film me-1"></i>}
                {type.value === "mixed" && <i class="bi bi-collection me-1"></i>}
                {type.value === "all" && <i class="bi bi-grid-3x3 me-1"></i>}
                {type.label}
              </a>
            ))}
          </div>
        </div>
      </div>
    </div>
  )}
  
  {/* Posts count */}
  <div class="mb-4">
    <p class="text-muted">
      Showing {posts.length} post{posts.length !== 1 ? 's' : ''}
      {totalPages > 1 && ` (Page ${currentPage} of ${totalPages})`}
    </p>
  </div>
  
  {/* Posts display */}
  <div class="posts-container">
    {posts.length > 0 ? (
      posts.map(post => <MicroblogPost post={post} />)
    ) : (
      <div class="alert alert-info">
        <i class="bi bi-info-circle me-2"></i>
        No microblog posts found. Try a different filter or check back later!
      </div>
    )}
  </div>
  
  {/* Pagination controls */}
  {(prevUrl || nextUrl) && (
    <div class="pagination-container mt-4">
      <Pagination {prevUrl} {nextUrl} />
    </div>
  )}
</div>

<style>
  .microblog-feed {
    max-width: 768px;
    margin: 0 auto;
  }
  
  .posts-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  @media (max-width: 768px) {
    .filter-options {
      flex-wrap: wrap;
      justify-content: center;
    }
    
    .filter-options a {
      margin-bottom: 0.5rem;
    }
  }
</style>

<script>
  // Progressive enhancement for filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Set all posts to visible initially to ensure they display
    document.querySelectorAll('.microblog-post').forEach(post => {
      // Add a small delay to make sure the transition works
      setTimeout(() => {
        post.classList.add('post-visible');
      }, 100);
    });

    // Intersection Observer for lazy loading content
    if ('IntersectionObserver' in window) {
      const postObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Add a class to animate the post when it comes into view
            entry.target.classList.add('post-visible');
            // Stop observing once the animation is triggered
            postObserver.unobserve(entry.target);
          }
        });
      }, {
        rootMargin: '0px 0px 100px 0px', // Start loading slightly before posts come into view
        threshold: 0.1
      });
      
      // Observe all microblog posts
      document.querySelectorAll('.microblog-post').forEach(post => {
        postObserver.observe(post);
      });
    }
  });
</script>

<script is:inline>
  // Immediate script to ensure posts are visible even if DOMContentLoaded has already fired
  window.addEventListener('load', function() {
    document.querySelectorAll('.microblog-post').forEach(post => {
      post.classList.add('post-visible');
    });
  });
</script>

<style is:global>
  .microblog-post {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
    will-change: opacity, transform;
  }
  
  .post-visible {
    opacity: 1 !important;
    transform: translateY(0) !important;
    visibility: visible !important;
  }
</style>