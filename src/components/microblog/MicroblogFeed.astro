---
/**
 * MicroblogFeed component
 * Displays a feed of microblog posts with optional filtering
 */
import { type CollectionEntry } from "astro:content";
import MicroblogPost from "./MicroblogPost.astro";
import Pagination from "../Pagination.astro";

interface Props {
  posts: CollectionEntry<"microblog">[];
  currentPage?: number;
  totalPages?: number;
  prevUrl?: string | null;
  nextUrl?: string | null;
  showFilters?: boolean;
  currentFilter?: string | null;
}

const {
  posts,
  currentPage = 1,
  totalPages = 1,
  prevUrl = null,
  nextUrl = null,
  showFilters = true,
  currentFilter = null,
} = Astro.props;

// Define content type options for filtering
const contentTypes = [
  { value: "all", label: "All Posts" },
  { value: "text", label: "Text Only" },
  { value: "image", label: "Images" },
  { value: "video", label: "Videos" },
  { value: "mixed", label: "Mixed Content" },
];
---

<div class="microblog-feed">
  {/* Filter controls */}
  {showFilters && (
    <div class="filter-container">
      <div class="filter-types">
        {contentTypes.map(type => (
          <a 
            href={type.value === "all" ? "/microblog" : `/microblog/type/${type.value}`}
            class={`filter-tab ${currentFilter === type.value ? 'active' : ''}`}
          >
            {type.value === "text" && <i class="bi bi-file-text"></i>}
            {type.value === "image" && <i class="bi bi-image"></i>}
            {type.value === "video" && <i class="bi bi-film"></i>}
            {type.value === "mixed" && <i class="bi bi-collection"></i>}
            {type.value === "all" && <i class="bi bi-grid-3x3"></i>}
            <span>{type.label}</span>
          </a>
        ))}
      </div>
    </div>
  )}
  
  {/* Posts count */}
  <div class="posts-info">
    <p>
      {posts.length} post{posts.length !== 1 ? 's' : ''}
      {totalPages > 1 && ` Â· Page ${currentPage} of ${totalPages}`}
    </p>
  </div>
  
  {/* Posts display */}
  <div class="posts-container">
    {posts.length > 0 ? (
      posts.map(post => <MicroblogPost post={post} />)
    ) : (
      <div class="no-posts">
        <i class="bi bi-info-circle"></i>
        <p>No posts found with this filter.</p>
        <a href="/microblog" class="return-link">View all posts</a>
      </div>
    )}
  </div>
  
  {/* Pagination controls */}
  {(prevUrl || nextUrl) && (
    <div class="pagination-container">
      <Pagination {prevUrl} {nextUrl} />
    </div>
  )}
</div>

<style>
  .microblog-feed {
    max-width: 600px;
    margin: 0 auto;
  }
  
  .filter-container {
    margin-bottom: 1.5rem;
    border-bottom: 1px solid #eee;
  }
  
  .filter-types {
    display: flex;
    overflow-x: auto;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
  }
  
  .filter-types::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }
  
  .filter-tab {
    padding: 0.75rem 1rem;
    color: #536471;
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    white-space: nowrap;
    transition: color 0.2s;
  }
  
  .filter-tab:hover {
    background-color: rgba(29, 161, 242, 0.1);
    color: #1DA1F2;
  }
  
  .filter-tab.active {
    color: #1DA1F2;
    font-weight: bold;
  }
  
  .filter-tab.active::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background-color: #1DA1F2;
    border-radius: 4px 4px 0 0;
  }
  
  .posts-info {
    color: #536471;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    padding-left: 0.5rem;
  }
  
  .posts-container {
    display: flex;
    flex-direction: column;
  }
  
  .no-posts {
    background-color: white;
    border: 1px solid #eee;
    border-radius: 1rem;
    padding: 2rem;
    text-align: center;
    color: #536471;
  }
  
  .no-posts i {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: #1DA1F2;
  }
  
  .no-posts p {
    margin-bottom: 1rem;
  }
  
  .return-link {
    display: inline-block;
    background-color: #1DA1F2;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    text-decoration: none;
    font-weight: bold;
    transition: background-color 0.2s;
  }
  
  .return-link:hover {
    background-color: #1a91da;
  }
  
  .pagination-container {
    margin-top: 1.5rem;
    display: flex;
    justify-content: center;
  }
  
  @media (max-width: 768px) {
    .microblog-feed {
      max-width: 100%;
      padding: 0 1rem;
    }
  }
</style>

<script>
  // Progressive enhancement for filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Set all posts to visible initially to ensure they display
    document.querySelectorAll('.tweet').forEach(post => {
      // Add a small delay to make sure the transition works
      setTimeout(() => {
        post.classList.add('post-visible');
      }, 100);
    });

    // Intersection Observer for lazy loading content
    if ('IntersectionObserver' in window) {
      const postObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Add a class to animate the post when it comes into view
            entry.target.classList.add('post-visible');
            // Stop observing once the animation is triggered
            postObserver.unobserve(entry.target);
          }
        });
      }, {
        rootMargin: '0px 0px 100px 0px', // Start loading slightly before posts come into view
        threshold: 0.1
      });
      
      // Observe all tweets
      document.querySelectorAll('.tweet').forEach(post => {
        postObserver.observe(post);
      });
    }
    
    // Add active hover state to tweet actions
    document.querySelectorAll('.tweet-action').forEach(action => {
      action.addEventListener('mouseenter', () => {
        action.classList.add('hover');
      });
      action.addEventListener('mouseleave', () => {
        action.classList.remove('hover');
      });
    });
  });
</script>

<script is:inline>
  // Immediate script to ensure posts are visible even if DOMContentLoaded has already fired
  window.addEventListener('load', function() {
    document.querySelectorAll('.tweet').forEach(post => {
      post.classList.add('post-visible');
    });
  });
</script>

<style is:global>
  .tweet {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
    will-change: opacity, transform;
  }
  
  .post-visible {
    opacity: 1 !important;
    transform: translateY(0) !important;
    visibility: visible !important;
  }
  
  /* PrismJS code blocks styling */
  pre[class*="language-"] {
    background-color: #282c34;
    color: #abb2bf;
    border-radius: 0.5rem;
    padding: 1rem;
    overflow-x: auto;
    margin: 1rem 0;
  }
  
  code[class*="language-"] {
    font-family: monospace;
    font-size: 0.9em;
    white-space: pre;
  }
  
  .token.comment,
  .token.prolog,
  .token.doctype,
  .token.cdata {
    color: #5c6370;
  }
  
  .token.punctuation {
    color: #abb2bf;
  }
  
  .token.selector,
  .token.tag {
    color: #e06c75;
  }
  
  .token.property,
  .token.boolean,
  .token.number,
  .token.constant,
  .token.symbol,
  .token.attr-name,
  .token.deleted {
    color: #d19a66;
  }
  
  .token.string,
  .token.char,
  .token.attr-value,
  .token.inserted {
    color: #98c379;
  }
  
  .token.operator,
  .token.entity,
  .token.url,
  .language-css .token.string,
  .style .token.string {
    color: #56b6c2;
  }
  
  .token.atrule,
  .token.keyword {
    color: #c678dd;
  }
  
  .token.function,
  .token.class-name {
    color: #61afef;
  }
  
  .token.regex,
  .token.important,
  .token.variable {
    color: #c678dd;
  }
</style>