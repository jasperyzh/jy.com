---
// critical styling
// critical script
// critical tracking

interface Props {
  title?: string | undefined;
  description?: string | undefined;
  image?: string;
}

const {
  title,
  description,
  image = "/placeholder-post.jpg",
} = Astro.props as Props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- PWA Meta Tags -->
<meta name="theme-color" content="#ffffff" />
<link rel="apple-touch-icon" href="/pwa-192x192.png">
<link rel="mask-icon" href="/favicon.svg" color="#ffffff" />
<link rel="manifest" href="/manifest.webmanifest" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Tracking -->
<!-- Google tag (gtag.js) -->
<script
  is:inline
  async
  src="https://www.googletagmanager.com/gtag/js?id=G-LQ2S4M9E6S"></script>
<script is:inline>
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    dataLayer.push(arguments);
  }
  gtag("js", new Date());

  gtag("config", "G-LQ2S4M9E6S");
</script>

<!-- Google fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap"
  rel="stylesheet"
/>

<script is:inline>
  // This code is inlined in the head to make dark mode instant & blocking.
  // This prevents theme flicker on page load
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  
  // Apply theme immediately before page render
  const themeValue = getThemePreference();
  const isDark = themeValue === "dark";
  
  // Apply theme to document
  document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");
  
  // For Bootstrap compatibility
  document.documentElement.setAttribute("data-bs-theme", isDark ? "dark" : "light");
  
  if (typeof localStorage !== "undefined") {
    // Watch the document element and persist user preference when it changes.
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("theme-dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
      
      // Keep Bootstrap theme in sync
      document.documentElement.setAttribute("data-bs-theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
