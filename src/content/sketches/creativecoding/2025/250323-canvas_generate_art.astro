---
// inspired by barba.js - https://barba.js.org/docs/getstarted/basic-transition/

import BaseLayout from "@/layouts/BaseLayout.astro";

const sketch_title = "View Transition";
---

<BaseLayout title={sketch_title}>
  <style>
    .container {
      padding: 20px;
      max-width: 1200px;
      width: 100%;
    }
    .toolbar {
      background: white;
      padding: 15px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
    }
    #canvas {
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      cursor: crosshair;
    }
    button {
      padding: 8px 15px;
      border: none;
      border-radius: 5px;
      background: #4a90e2;
      color: white;
      cursor: pointer;
      transition: background 0.3s;
    }
    button:hover {
      background: #357abd;
    }
    input[type="color"] {
      width: 50px;
      height: 35px;
      padding: 0;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    input[type="range"] {
      width: 150px;
    }
    .tool-group {
      display: flex;
      align-items: center;
      gap: 10px;
    }
  </style>
  <div class="container">
    <div class="toolbar">
      <div class="tool-group">
        <label for="colorPicker">Color:</label>
        <input type="color" id="colorPicker" value="#000000" />
      </div>
      <div class="tool-group">
        <label for="brushSize">Brush Size:</label>
        <input type="range" id="brushSize" min="1" max="50" value="5" />
      </div>
      <button id="generateBtn">Generate Art</button>
      <button id="eraserBtn">Eraser</button>
      <button id="penBtn">Pen</button>
      <button id="clearBtn">Clear Canvas</button>
      <button id="saveBtn">Save Artwork</button>
    </div>
    <canvas id="canvas"></canvas>
  </div>
</BaseLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const colorPicker = document.getElementById("colorPicker");
    const brushSize = document.getElementById("brushSize");
    const clearBtn = document.getElementById("clearBtn");
    const saveBtn = document.getElementById("saveBtn");
    const generateBtn = document.getElementById("generateBtn");
    const eraserBtn = document.getElementById("eraserBtn");
    const penBtn = document.getElementById("penBtn");

    let isEraser = false;
    let originalColor = colorPicker.value;

    // Set canvas size
    function resizeCanvas() {
      const container = document.querySelector(".container");
      canvas.width = Math.min(800, container.offsetWidth - 40);
      canvas.height = Math.min(600, window.innerHeight - 200);
    }

    resizeCanvas();
    window.addEventListener("resize", resizeCanvas);

    // Drawing state
    let isDrawing = false;
    let lastX = 0;
    let lastY = 0;

    // Drawing functions
    function startDrawing(e) {
      isDrawing = true;
      [lastX, lastY] = getMousePos(canvas, e);
    }

    function draw(e) {
      if (!isDrawing) return;

      const [x, y] = getMousePos(canvas, e);

      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.strokeStyle = isEraser ? "#ffffff" : colorPicker.value;
      ctx.lineWidth = brushSize.value;

      ctx.moveTo(lastX, lastY);
      ctx.lineTo(x, y);
      ctx.stroke();

      [lastX, lastY] = [x, y];
    }

    function stopDrawing() {
      isDrawing = false;
    }

    // Get mouse position relative to canvas
    function getMousePos(canvas, e) {
      const rect = canvas.getBoundingClientRect();
      return [e.clientX - rect.left, e.clientY - rect.top];
    }

    // Event listeners for mouse/touch events
    canvas.addEventListener("mousedown", startDrawing);
    canvas.addEventListener("mousemove", draw);
    canvas.addEventListener("mouseup", stopDrawing);
    canvas.addEventListener("mouseout", stopDrawing);

    // Touch support
    canvas.addEventListener("touchstart", (e) => {
      e.preventDefault();
      startDrawing(e.touches[0]);
    });
    canvas.addEventListener("touchmove", (e) => {
      e.preventDefault();
      draw(e.touches[0]);
    });
    canvas.addEventListener("touchend", stopDrawing);

    // Clear canvas
    clearBtn.addEventListener("click", () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    });

    // Save artwork
    saveBtn.addEventListener("click", () => {
      const link = document.createElement("a");
      link.download = "my-artwork.png";
      link.href = canvas.toDataURL();
      link.click();
    });

    // Set initial canvas background to white
    ctx.fillStyle = "white";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Generate random art
    function generateArt() {
      const shapes = ["circles", "lines", "rectangles"];
      const shape = shapes[Math.floor(Math.random() * shapes.length)];
      const colors = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEEAD"];

      // Get the current canvas state
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imageData.data;

      // Track white spaces
      const gridSize = 20; // Size of each grid cell
      const gridCols = Math.ceil(canvas.width / gridSize);
      const gridRows = Math.ceil(canvas.height / gridSize);
      const whiteSpaces = [];

      // Find white spaces in a grid
      for (let row = 0; row < gridRows; row++) {
        for (let col = 0; col < gridCols; col++) {
          const x = col * gridSize;
          const y = row * gridSize;
          let isWhite = true;

          // Sample center of each grid cell
          const centerX = x + gridSize / 2;
          const centerY = y + gridSize / 2;
          if (centerX < canvas.width && centerY < canvas.height) {
            const index =
              (Math.floor(centerY) * canvas.width + Math.floor(centerX)) * 4;
            if (
              data[index] === 255 &&
              data[index + 1] === 255 &&
              data[index + 2] === 255
            ) {
              whiteSpaces.push({ x, y });
            }
          }
        }
      }

      // Shuffle white spaces
      for (let i = whiteSpaces.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [whiteSpaces[i], whiteSpaces[j]] = [whiteSpaces[j], whiteSpaces[i]];
      }

      // Draw shapes in white spaces
      const numShapes = Math.min(50, whiteSpaces.length);
      for (let i = 0; i < numShapes; i++) {
        const space = whiteSpaces[i];
        const x = space.x + Math.random() * gridSize;
        const y = space.y + Math.random() * gridSize;
        const size = Math.random() * 30 + 10; // Smaller shapes
        const color = colors[Math.floor(Math.random() * colors.length)];

        ctx.beginPath();
        ctx.fillStyle = color;
        ctx.strokeStyle = color;
        ctx.lineWidth = Math.random() * 3 + 1; // Thinner lines

        if (shape === "circles") {
          ctx.beginPath();
          ctx.arc(x, y, size / 2, 0, Math.PI * 2);
          Math.random() > 0.5 ? ctx.fill() : ctx.stroke();
        } else if (shape === "lines") {
          ctx.beginPath();
          ctx.moveTo(x, y);
          ctx.lineTo(x + size, y + size);
          ctx.stroke();
        } else {
          ctx.beginPath();
          ctx.rect(x, y, size, size);
          Math.random() > 0.5 ? ctx.fill() : ctx.stroke();
        }
      }
    }

    // Tool buttons event listeners
    generateBtn.addEventListener("click", generateArt);

    eraserBtn.addEventListener("click", () => {
      isEraser = true;
      eraserBtn.style.background = "#357abd";
      penBtn.style.background = "#4a90e2";
    });

    penBtn.addEventListener("click", () => {
      isEraser = false;
      penBtn.style.background = "#357abd";
      eraserBtn.style.background = "#4a90e2";
    });
  });
</script>
