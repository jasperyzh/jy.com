---
import BaseLayout from "@/layouts/BaseLayout.astro";
---

<BaseLayout>
  <main class="container mx-auto">
    <h1>Flow Arrow</h1>

    <!-- p5.js core library -->
    <script
      is:inline
      src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.6.0/p5.js"></script>
    <!-- p5.js DOM library (for createButton, etc.) -->
    <script
      is:inline
      src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.6.0/addons/p5.dom.min.js"
    ></script>
    <!-- dat.GUI library -->
    <script
      is:inline
      src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.9/dat.gui.min.js"
    ></script>
    <!-- p5.svg library -->
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/p5.js-svg@1.5.1/dist/p5.svg.min.js"
    ></script>
    <!-- Your sketch file -->
    <div id="p5js-canvas"></div>
  </main>
</BaseLayout>

<script is:inline>
 let gui;
let canvas;

// --- Parameters object for GUI control ---
let params = {
  canvasWidth: 600,
  canvasHeight: 800,
  cols: 60, // Number of columns
  rows: 80, // Number of rows

  // Noise settings for position distortion
  posNoiseScale: 0.05,
  posNoiseStrength: 40,
  posNoiseZOffset: Math.random() * 1000, // Start with random offset

  // Noise settings for color variation
  colorNoiseScale: 0.08,
  colorNoiseZOffset: Math.random() * 1000 + 1000, // Use a different random offset

  // Element appearance
  elementSizeFactor: 0.8, // Size relative to cell size
  elementCornerRadius: 2,
  elementStrokeWeight: 0.5,

  // Color Palette (Will be defined in setup/draw, maybe expose via GUI later if needed)

  redraw: function() { // Function to trigger redraw
    console.log("Redrawing sketch...");
    // Update Z offsets for a new pattern if desired on manual redraw
    this.posNoiseZOffset = Math.random() * 1000;
    this.colorNoiseZOffset = Math.random() * 1000 + 1000;
    updateGuiDisplay(); // Make sure sliders reflect the new Z offsets if we show them
    redrawSketch();
  },
  randomize: function() { // Function to randomize parameters
    console.log("Randomizing parameters...");
    this.cols = floor(random(20, 60));
    this.rows = floor(random(30, 80)); // Keep aspect ratio roughly similar if desired
    // OR // this.rows = floor(this.cols * (this.canvasHeight / this.canvasWidth));

    this.posNoiseScale = random(0.01, 0.15);
    this.posNoiseStrength = random(5, 80);
    this.posNoiseZOffset = Math.random() * 1000;

    this.colorNoiseScale = random(0.02, 0.2);
    this.colorNoiseZOffset = Math.random() * 1000 + 1000; // Keep offsets different

    this.elementSizeFactor = random(0.5, 1.0);
    this.elementCornerRadius = random(0, min(this.canvasWidth / this.cols, this.canvasHeight / this.rows) * this.elementSizeFactor * 0.5); // Max half size
    this.elementStrokeWeight = random(0.1, 1.5);

    updateGuiDisplay(); // Update sliders visually
    redrawSketch();     // Redraw with new parameters
  }
};

// Global scope for colors (can be moved into params if needed)
let color1, color2, color3, color4, strokeColor;

// Helper function to update GUI display after programmatic changes
function updateGuiDisplay() {
  if (gui) {
    for (let i in gui.__controllers) {
      gui.__controllers[i].updateDisplay();
    }
  }
}

function setup() {
    // Create canvas with SVG renderer
    canvas = createCanvas(params.canvasWidth, params.canvasHeight, SVG);
    // Attach canvas to the specific div
    canvas.parent("p5js-canvas");
    pixelDensity(1); // Crucial for SVG consistency

    noiseDetail(4, 0.5); // Consistent noise algorithm
    rectMode(CENTER);

    // --- Initialize dat.GUI ---
    gui = new dat.GUI();

    // --- Add GUI Controls ---
    gui.add(params, "canvasWidth", 300, 1200).step(10).name("Canvas Width").onChange(resizeAndRedraw);
    gui.add(params, "canvasHeight", 300, 1200).step(10).name("Canvas Height").onChange(resizeAndRedraw);
    gui.add(params, "cols", 10, 150).step(1).name("Columns").onChange(redrawSketch);
    gui.add(params, "rows", 10, 200).step(1).name("Rows").onChange(redrawSketch);

    let noiseFolder = gui.addFolder('Noise Settings');
    noiseFolder.add(params, "posNoiseScale", 0.001, 0.2).step(0.001).name("Pos Scale").onChange(redrawSketch);
    noiseFolder.add(params, "posNoiseStrength", 0, 100).step(1).name("Pos Strength").onChange(redrawSketch);
    // noiseFolder.add(params, "posNoiseZOffset", 0, 2000).step(0.1).name("Pos Z Offset").onChange(redrawSketch); // Option to control offset
    noiseFolder.add(params, "colorNoiseScale", 0.001, 0.3).step(0.001).name("Color Scale").onChange(redrawSketch);
    // noiseFolder.add(params, "colorNoiseZOffset", 0, 3000).step(0.1).name("Color Z Offset").onChange(redrawSketch); // Option to control offset
    // noiseFolder.open(); // Keep folder open by default if desired

    let appearanceFolder = gui.addFolder('Element Appearance');
    appearanceFolder.add(params, "elementSizeFactor", 0.1, 1.2).step(0.01).name("Size Factor").onChange(redrawSketch);
    appearanceFolder.add(params, "elementCornerRadius", 0, 20).step(0.5).name("Corner Radius").onChange(redrawSketch);
    appearanceFolder.add(params, "elementStrokeWeight", 0, 5).step(0.1).name("Stroke Weight").onChange(redrawSketch);
    // appearanceFolder.open();

    gui.add(params, "redraw").name("Redraw (New Pattern)"); // Add button for redraw function
    gui.add(params, "randomize").name("Randomize Parameters"); // Add button for randomize function

    console.log("Setup complete. Controls added. Initial draw upcoming.");
    // Don't use noLoop() - allow redraws
    // Initial draw happens automatically after setup
    // Add Export button using p5 native method
    let exportButton = createButton("Export SVG");
    exportButton.mousePressed(exportSVG);
    exportButton.position(10, height + 15); // Position below canvas
    
}

function draw() {
  background(255); // White background

  // --- Recalculate dependent variables based on current params ---
  let cellWidth = width / params.cols; // Use width (canvas width)
  let cellHeight = height / params.rows; // Use height (canvas height)
  let elementBaseSize = min(cellWidth, cellHeight) * params.elementSizeFactor;

  // --- Define/Update Colors --- (Can be done once in setup if static)
  color1 = color(40, 40, 55);       // Dark grayish blue/purple
  color2 = color(60, 100, 150);    // Muted mid blue
  color3 = color(150, 200, 230, 200); // Lighter, slightly transparent blue highlight
  color4 = color(100, 70, 130);     // Purple tint
  strokeColor = color(50, 50, 50, 150); // Dark semi-transparent stroke

  // --- Grid Drawing Logic --- (Mostly unchanged, uses params now)
  let marginX = cellWidth / 2;
  let marginY = cellHeight / 2;

  for (let i = 0; i < params.cols; i++) {
    for (let j = 0; j < params.rows; j++) {
      let originalX = marginX + i * cellWidth;
      let originalY = marginY + j * cellHeight;

      let noiseFactorX = noise(i * params.posNoiseScale, j * params.posNoiseScale, params.posNoiseZOffset);
      let noiseFactorY = noise(i * params.posNoiseScale + 100, j * params.posNoiseScale + 100, params.posNoiseZOffset);

      let offsetX = map(noiseFactorX, 0, 1, -params.posNoiseStrength, params.posNoiseStrength);
      let offsetY = map(noiseFactorY, 0, 1, -params.posNoiseStrength, params.posNoiseStrength);

      let distortedX = originalX + offsetX;
      let distortedY = originalY + offsetY;

      let colorNoiseFactor = noise(i * params.colorNoiseScale, j * params.colorNoiseScale, params.colorNoiseZOffset);
      let finalColor;
       if (colorNoiseFactor < 0.35) {
            let amt = map(colorNoiseFactor, 0, 0.35, 0, 1);
            finalColor = lerpColor(color1, color4, amt);
       } else if (colorNoiseFactor < 0.65) {
            let amt = map(colorNoiseFactor, 0.35, 0.65, 0, 1);
             finalColor = lerpColor(color4, color2, amt);
       } else {
            let amt = map(colorNoiseFactor, 0.65, 1, 0, 1);
            finalColor = lerpColor(color2, color3, amt);
       }

      push();
      translate(distortedX, distortedY);
      // fill(finalColor);
      stroke(strokeColor);
      strokeWeight(params.elementStrokeWeight);
      // Clamp corner radius to be at most half the element size
      let actualRadius = min(params.elementCornerRadius, elementBaseSize * 0.5);
      rect(0, 0, elementBaseSize, elementBaseSize, actualRadius);
      pop();
    }
  }
  console.log("Draw cycle finished.");
}

// --- Helper Functions ---

// Function to simply trigger p5's redraw mechanism
function redrawSketch() {
    console.log("redrawSketch() called");
    redraw(); // P5 function to execute draw() once
}

// Function to handle canvas resize AND redraw
function resizeAndRedraw() {
    console.log(`Resizing canvas to ${params.canvasWidth}x${params.canvasHeight}`);
    resizeCanvas(params.canvasWidth, params.canvasHeight);
    redrawSketch(); // Redraw after resizing
}

// Function to save the canvas (SVG or PNG depending on renderer)
function keyPressed() {
  if (key === 's' || key === 'S') {
    let filename = `distorted_grid_${params.cols}x${params.rows}_${Date.now()}`; // Add timestamp for uniqueness
    if (canvas.elt.nodeName === 'svg') { // Check if it's actually SVG
        console.log("Saving SVG:", filename + ".svg");
        save(filename + ".svg");
    } else {
        console.log("Saving PNG:", filename + ".png");
        save(filename + ".png");
    }
  }
}  function exportSVG() {
    save("flowing_lines.svg"); // p5.svg library provides this function
    console.log("SVG exported.");
  }
</script>
