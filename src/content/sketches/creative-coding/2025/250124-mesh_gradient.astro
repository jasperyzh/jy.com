---
// Simple component to render a mesh gradient with canvas-sketch
---

<div id="mesh-gradient-container" class="w-full h-full min-h-[400px] relative">
    <!-- Canvas will be inserted here -->
</div>

<!-- Load libraries from CDN -->
<script is:inline src="https://cdn.jsdelivr.net/npm/canvas-sketch@0.7.7/dist/canvas-sketch.umd.min.js"></script>

<script is:inline>
    /**
     * Mesh Gradient in canvas-sketch
     * ---------------------------------------
     * This script subdivides between control points to create a smooth color mesh.
     */

    // Access libraries from global scope
    const canvasSketch = window.canvasSketch;
    // Simple lerp implementation to avoid require() issues
    const lerp = (a, b, t) => a + (b - a) * t;

    // ----- Settings -----
    const settings = {
        dimensions: [800, 800],
        animate: true,
        duration: 4, // 4-second loop
        fps: 60,
        loop: true,
        resizeCanvas: true,
    };

    const baseControlPoints = [
        [
            { x: 0, y: 0, color: [255, 0, 0] },
            { x: 0.5, y: 0, color: [0, 255, 0] },
            { x: 1, y: 0, color: [0, 0, 255] },
        ],
        [
            { x: 0, y: 0.5, color: [255, 255, 0] },
            { x: 0.5, y: 0.5, color: [100, 0, 255] },
            { x: 1, y: 0.5, color: [0, 255, 255] },
        ],
        [
            { x: 0, y: 1, color: [255, 128, 0] },
            { x: 0.5, y: 1, color: [68, 0, 68] },
            { x: 1, y: 1, color: [0, 128, 128] },
        ],
    ];

    // Subdivision steps along X and Y for interpolation
    const stepsX = 5;
    const stepsY = 5;

    const runSketch = (container) => {
        const sketch = () => {
            return ({ context, width, height, playhead }) => {
                // Create a fresh copy of control points each frame
                // and apply some animated offset in y using sine wave
                const animatedPoints = animatePoints(
                    baseControlPoints,
                    playhead,
                );

                // Interpolate the updated grid
                const mesh = interpolateGrid(
                    animatedPoints,
                    stepsX,
                    stepsY,
                );

                // Clear the canvas
                context.clearRect(0, 0, width, height);

                // Determine cell size for drawing
                const cellW = width / (mesh[0].length - 1);
                const cellH = height / (mesh.length - 1);

                // Render each cell
                for (let row = 0; row < mesh.length - 1; row++) {
                    for (
                        let col = 0;
                        col < mesh[row].length - 1;
                        col++
                    ) {
                        const { color: c } = mesh[row][col];
                        context.fillStyle = `rgb(${c[0]}, ${c[1]}, ${c[2]})`;
                        context.fillRect(
                            col * cellW,
                            row * cellH,
                            cellW + 1,
                            cellH + 1,
                        );
                    }
                }
            };
        };

        /**
         * Animate control points with a sine wave in the y direction.
         */
        function animatePoints(basePoints, playhead) {
            const amplitude = 0.03;
            const animated = JSON.parse(JSON.stringify(basePoints));

            animated.forEach((row, r) => {
                row.forEach((pt, c) => {
                    const bx = basePoints[r][c].x;
                    const by = basePoints[r][c].y;
                    const baseColor = basePoints[r][c].color;

                    // Map playhead (0..1) to 0..2Ï€ for smooth loops
                    const phase = 2 * Math.PI * playhead + (r + c);

                    // Vertical sine wave offset
                    const offsetY = amplitude * Math.sin(phase);
                    pt.x = bx;
                    pt.y = by + offsetY;

                    // Color animation
                    const colorShift = 50 * Math.sin(phase);
                    const shiftedR = baseColor[0] + colorShift;
                    pt.color = [shiftedR, baseColor[1], baseColor[2]];
                });
            });

            return animated;
        }

        /**
         * Interpolates a grid of control points into smaller subdivided cells.
         * Each point is { x, y, color }, with x,y in [0..1].
         */
        function interpolateGrid(controlPoints, stepsX, stepsY) {
            const rowCount = controlPoints.length;
            const colCount = controlPoints[0].length;

            const subdivided = [];

            for (
                let row = 0;
                row < (rowCount - 1) * stepsY + 1;
                row++
            ) {
                const tRow = row / (stepsY * (rowCount - 1));
                const rowIndex = Math.floor(tRow * (rowCount - 1));
                const rowFrac = tRow * (rowCount - 1) - rowIndex;
                subdivided[row] = [];

                for (
                    let col = 0;
                    col < (colCount - 1) * stepsX + 1;
                    col++
                ) {
                    const tCol = col / (stepsX * (colCount - 1));
                    const colIndex = Math.floor(tCol * (colCount - 1));
                    const colFrac = tCol * (colCount - 1) - colIndex;

                    // Guard for final boundary
                    if (
                        rowIndex >= rowCount - 1 ||
                        colIndex >= colCount - 1
                    ) {
                        continue;
                    }

                    const topLeft = controlPoints[rowIndex][colIndex];
                    const topRight =
                        controlPoints[rowIndex][colIndex + 1];
                    const botLeft =
                        controlPoints[rowIndex + 1][colIndex];
                    const botRight =
                        controlPoints[rowIndex + 1][colIndex + 1];
                    if (
                        !topLeft ||
                        !topRight ||
                        !botLeft ||
                        !botRight
                    ) {
                        continue;
                    }

                    // Interpolate top edge
                    const topX = lerp(topLeft.x, topRight.x, colFrac);
                    const topY = lerp(topLeft.y, topRight.y, colFrac);
                    const topColor = lerpColor(
                        topLeft.color,
                        topRight.color,
                        colFrac,
                    );

                    // Interpolate bottom edge
                    const botX = lerp(botLeft.x, botRight.x, colFrac);
                    const botY = lerp(botLeft.y, botRight.y, colFrac);
                    const botColor = lerpColor(
                        botLeft.color,
                        botRight.color,
                        colFrac,
                    );

                    // Interpolate between top and bottom edge
                    const finalX = lerp(topX, botX, rowFrac);
                    const finalY = lerp(topY, botY, rowFrac);
                    const finalColor = lerpColor(
                        topColor,
                        botColor,
                        rowFrac,
                    );

                    subdivided[row][col] = {
                        x: finalX,
                        y: finalY,
                        color: finalColor,
                    };
                }
            }
            return subdivided;
        }

        function lerpColor(c1, c2, t) {
            return [
                lerp(c1[0], c2[0], t),
                lerp(c1[1], c2[1], t),
                lerp(c1[2], c2[2], t),
            ];
        }

        // Create a new canvas and insert it into the container
        const canvasEl = document.createElement("canvas");
        container.appendChild(canvasEl);
        
        // Pass the canvas to canvas-sketch
        const newSettings = {
            ...settings,
            canvas: canvasEl
        };
        
        canvasSketch(sketch, newSettings);
    };

    // Run the sketch when the component is loaded
    document.addEventListener("DOMContentLoaded", () => {
        const container = document.getElementById("mesh-gradient-container");
        if (container) {
            runSketch(container);
        }
    });
</script>
