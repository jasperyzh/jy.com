---
// Astro component script (if needed, empty for now)
---

<div class="camera-app">
  <h2>Camera Filter Demo</h2>
  <video id="cameraFeed" autoplay playsinline width="640" height="480"></video>
  <div class="controls">
    <button id="startCamera">Start Camera</button>
    <button id="takePhoto" disabled>Take Pixelated Photo</button>
    <label for="pixelSize">Pixel Size:</label>
    <input type="range" id="pixelSize" name="pixelSize" min="2" max="50" value="10">
    <span id="pixelSizeValue">10</span>
  </div>
  <canvas id="photoCanvas" style="display: none;"></canvas> <!-- Canvas for processing -->
  <img id="processedPhoto" alt="Processed Photo" style="max-width: 100%; margin-top: 10px; border: 1px solid #eee;"> <!-- Display processed image -->
</div>

<script>
  const video = document.getElementById('cameraFeed') as HTMLVideoElement;
  const startCameraButton = document.getElementById('startCamera') as HTMLButtonElement;
  const takePhotoButton = document.getElementById('takePhoto') as HTMLButtonElement;
  const canvas = document.getElementById('photoCanvas') as HTMLCanvasElement;
  const processedPhoto = document.getElementById('processedPhoto') as HTMLImageElement;
  const pixelSizeSlider = document.getElementById('pixelSize') as HTMLInputElement;
  const pixelSizeValueSpan = document.getElementById('pixelSizeValue') as HTMLSpanElement;
  const context = canvas.getContext('2d', { willReadFrequently: true }); // Added willReadFrequently for performance

  let mediaStream: MediaStream | null = null; // To hold the camera stream
  let currentPixelSize = 10;

  if (pixelSizeSlider && pixelSizeValueSpan) {
    currentPixelSize = parseInt(pixelSizeSlider.value, 10);
    pixelSizeValueSpan.textContent = pixelSizeSlider.value;

    pixelSizeSlider.addEventListener('input', (event) => {
      currentPixelSize = parseInt((event.target as HTMLInputElement).value, 10);
      pixelSizeValueSpan.textContent = currentPixelSize.toString();
    });
  } else {
    console.error("Pixel size slider or value span not found");
  }


  if (startCameraButton && takePhotoButton && video && context) {
    startCameraButton.addEventListener('click', async () => {
      try {
        // Request camera access
        mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = mediaStream;
        video.onloadedmetadata = () => {
          video.play();
          takePhotoButton.disabled = false; // Enable photo button once stream loads
          startCameraButton.disabled = true;
          startCameraButton.textContent = 'Camera Active';
          console.log('Camera stream started.');
        };
      } catch (err) {
        console.error('Error accessing camera: ', err);
        alert('Could not access camera. Please check permissions.');
      }
    });

    takePhotoButton.addEventListener('click', () => {
      if (!mediaStream || !context) return;
      console.log('Taking photo...');

      // Set canvas dimensions to match video feed dimensions
      const videoWidth = video.videoWidth;
      const videoHeight = video.videoHeight;
      canvas.width = videoWidth;
      canvas.height = videoHeight;

      // Draw the current video frame onto the canvas
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      console.log(`Drawn video frame to canvas (${canvas.width}x${canvas.height})`);


      // Apply the pixelate effect
      applyPixelateEffect(canvas, currentPixelSize);

      // Display the processed image
      processedPhoto.src = canvas.toDataURL('image/png');
      processedPhoto.style.display = 'block'; // Show the processed image
      console.log('Processed image displayed.');

    });
  } else {
      console.error("Required elements (buttons, video, canvas context) not found.");
  }


  function applyPixelateEffect(targetCanvas: HTMLCanvasElement, pixelSize: number) {
      const ctx = targetCanvas.getContext('2d');
      if (!ctx) return;

      const width = targetCanvas.width;
      const height = targetCanvas.height;
      console.log(`Applying pixelate effect with size ${pixelSize} to ${width}x${height} canvas`);


      // Get the pixel data from the current canvas state
      const imageData = ctx.getImageData(0, 0, width, height);
      const data = imageData.data; // This is a Uint8ClampedArray R,G,B,A, R,G,B,A...

      // Create new ImageData for the output
      const outputImageData = ctx.createImageData(width, height);
      const outputData = outputImageData.data;

      pixelSize = Math.max(1, Math.floor(pixelSize)); // Ensure pixelSize is at least 1

      for (let y = 0; y < height; y += pixelSize) {
          for (let x = 0; x < width; x += pixelSize) {
              // Calculate the index of the top-left pixel of the current block
              // Ensure x and y are within bounds for sampling
              const sampleX = Math.min(x, width - 1);
              const sampleY = Math.min(y, height - 1);
              const pixelIndex = (sampleY * width + sampleX) * 4;

              // Get the color of the top-left pixel (R, G, B, A)
              const r = data[pixelIndex];
              const g = data[pixelIndex + 1];
              const b = data[pixelIndex + 2];
              const a = data[pixelIndex + 3]; // Keep original alpha

              // Fill the entire block (pixelSize x pixelSize) in the output data
              for (let blockY = 0; blockY < pixelSize; blockY++) {
                  for (let blockX = 0; blockX < pixelSize; blockX++) {
                      const currentY = y + blockY;
                      const currentX = x + blockX;

                      // Make sure we don't go out of bounds for writing
                      if (currentY < height && currentX < width) {
                          const currentPixelIndex = (currentY * width + currentX) * 4;
                           outputData[currentPixelIndex] = r;
                           outputData[currentPixelIndex + 1] = g;
                           outputData[currentPixelIndex + 2] = b;
                           outputData[currentPixelIndex + 3] = a;
                      }
                  }
              }
          }
      }

      // Put the modified pixel data back onto the canvas
      ctx.putImageData(outputImageData, 0, 0);
      console.log('Pixelate effect applied.');
  }


  // Remember to stop the stream when the user leaves the page or doesn't need it
  window.addEventListener('beforeunload', () => {
    if (mediaStream) {
      console.log('Stopping media stream tracks.');
      mediaStream.getTracks().forEach(track => track.stop());
    }
  });

</script>

<style>
  .camera-app {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 15px;
    font-family: sans-serif;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    max-width: 700px;
    margin: 20px auto;
    background-color: #f9f9f9;
  }
  #cameraFeed {
    border: 2px solid #333;
    background-color: #000; /* Placeholder background */
    max-width: 100%;
    height: auto;
    display: block; /* Prevents extra space below video */
  }
  .controls {
    display: flex;
    flex-wrap: wrap; /* Allow controls to wrap on smaller screens */
    gap: 10px;
    align-items: center;
    justify-content: center; /* Center controls */
    width: 100%; /* Make controls take full width */
    padding: 10px 0;
  }
  button {
    padding: 10px 18px;
    cursor: pointer;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1em;
    transition: background-color 0.2s ease;
  }
  button:hover:not(:disabled) {
    background-color: #0056b3;
  }
  button:disabled {
    cursor: not-allowed;
    opacity: 0.6;
    background-color: #6c757d;
  }
  label {
    margin-left: 10px;
    font-weight: bold;
  }
  input[type="range"] {
    width: 120px;
    cursor: pointer;
    vertical-align: middle; /* Align slider nicely with label/span */
  }
  #pixelSizeValue {
    display: inline-block;
    min-width: 25px; /* Ensure space for two digits */
    text-align: right;
    font-weight: bold;
  }
  #processedPhoto {
     display: none; /* Initially hidden */
     border: 1px solid #ccc;
     max-width: 100%; /* Ensure image fits within container */
     height: auto; /* Maintain aspect ratio */
  }
  h2 {
      margin-bottom: 10px;
      color: #333;
  }
</style>


