---
// No server-side logic needed for this component yet
---

<div id="coffee-masters-app">
  <header>
    <h1><img src="/sketch/vanilla-js-app/images/logo.svg" width="140" alt="Coffee Masters"></h1>
    <nav>
      <a class="navlink material-symbols-outlined" id="linkHome" href="#">
        local_cafe
      </a>
      <a class="navlink material-symbols-outlined" id="linkOrder" href="#order">
        shopping_cart
      </a>
      <span id="badge" hidden>0</span>
    </nav>
  </header>

  <main>
    <!-- Content will be injected here by JavaScript -->
  </main>

  <!-- Templates -->
  <template id="menu-page-template">
    <section>
      <h2>Menu</h2>
      <div id="menu">Loading...</div>
    </section>
  </template>

  <template id="product-item-template">
    <article>
      <a> <!-- Anchor wraps image and details, click navigates -->
        <img alt="">
        <section>
          <div>
            <h4></h4>
            <p class="price"></p>
          </div>
          <button>Add</button>
        </section>
      </a>
    </article>
  </template>

  <template id="details-page-template">
    <div class="details-container">
      <header>
        <a href="#" class="back-link">&lt; Back</a>
        <h2>Product Name</h2>
        <!-- Placeholder for potential future actions like favorite -->
        <a></a>
      </header>
      <img src="" alt="">
      <p class="description"></p>
      <p class="price"></p>
      <button class="add-to-cart-button">Add to cart</button>
    </div>
  </template>

  <template id="order-page-template">
      <section>
        <h2>Your Order</h2>
        <div id="order-summary">
          <ul id="cart-items">
            <!-- Cart items will be rendered here -->
          </ul>
          <p id="total-line" hidden>Total: <span id="total-amount">$0.00</span></p>
          <p class="empty" hidden>Your cart is empty.</p>
        </div>
      </section>
  </template>

   <template id="cart-item-template">
        <li>
            <p class='qty'></p>
            <p class='name'></p>
            <p class='price'></p>
            <p class='toolbar'>
                <a href="#" class="delete-button">
                    üóëÔ∏è
                </a>
            </p>
        </li>
    </template>
</div>

<style>
  /* Reset and Base Styles (from styles.css) */
  #coffee-masters-app :root { /* Scope variables to the app container */
    --background-surface: #EFEFEF;
    --primaryColor: #43281C;
    --secondaryColor: #333D29;
    --color3: #7F4F24;
    --color4: #B08968;
    --color5: #DDB892;
    --color6: #EDE0D4;
    --highlight: #FBF2C6;
  }

  #coffee-masters-app { /* Container for the app */
    font-family: 'Open Sans', sans-serif;
    margin: 0 auto;
    max-width: 600px; /* Or adjust as needed */
    border: 1px solid #ccc; /* Optional: frame the app */
    border-radius: 8px;
    overflow: hidden;
    background-color: var(--background-surface);
  }

  #coffee-masters-app * {
      box-sizing: border-box;
  }

  #coffee-masters-app header {
    position: relative; /* Changed from fixed */
    width: 100%;
    background-color: var(--primaryColor);
    color: white;
  }

  #coffee-masters-app main {
    margin: 0; /* Reset margin */
    padding: 10px;
    min-height: 300px; /* Ensure main has some height */
  }

  #coffee-masters-app h1 {
    background-color: var(--primaryColor);
    color: white;
    margin: 0;
    text-align: center;
    padding: 10px 0 5px 0;
    font-size: 20px;
    font-weight: normal;
  }
   #coffee-masters-app h1 img {
     vertical-align: middle;
   }

  #coffee-masters-app nav {
      position: relative;
      padding-bottom: 10px;
  }

  #coffee-masters-app a.navlink {
    color: var(--highlight);
    padding: 8px;
    text-decoration: none;
    font-size: 28px; /* Adjust icon size */
  }

  #coffee-masters-app #linkHome {
    display: block;
    position: absolute;
    top: -38px; /* Adjust positioning relative to h1 */
    left: 10px;
  }

  #coffee-masters-app #linkOrder {
    display: block;
    position: absolute;
    top: -38px; /* Adjust positioning relative to h1 */
    right: 10px;
  }

  #coffee-masters-app #badge {
    padding: 2px 6px; /* Adjusted padding */
    background-color: red;
    border-radius: 10px; /* Make it rounder */
    min-width: 18px; /* Ensure minimum width */
    height: 18px; /* Ensure minimum height */
    text-align: center;
    font-size: 11px; /* Smaller font */
    line-height: 14px; /* Center text vertically */
    color: white;
    position: absolute;
    right: 5px; /* Position relative to nav */
    top: -42px; /* Position relative to nav */
    font-weight: bold;
    box-shadow: 1px 1px 3px rgba(0,0,0,0.5);
    display: inline-block; /* Use inline-block */
  }

  /* MenuPage Styles (from MenuPage.css & adjusted) */
  #coffee-masters-app #menu ul {
    list-style: none;
    padding: 0;
    margin: 0;
    background-color: transparent; /* Remove background */
  }
   #coffee-masters-app #menu > li { /* Top level category list items */
      margin-bottom: 20px;
   }
   #coffee-masters-app #menu > li > ul { /* Product list */
       background-color: var(--color6);
       margin: 4px 6px;
       padding: 10px 12px;
       border-radius: 10px;
       box-shadow: 1px 1px 4px rgba(0,0,0,0.1);
   }

  #coffee-masters-app #menu h3 {
    color: var(--primaryColor); /* Adjusted color */
    font-weight: bold; /* Make it bolder */
    padding: 0 10px; /* Adjusted padding */
    margin: 10px 0 5px 0;
    font-size: 18px; /* Adjusted size */
    border-bottom: 1px solid var(--color5);
  }

  #coffee-masters-app #menu article {
    background-color: white;
    margin-bottom: 16px;
    padding-bottom: 1px;
    border-radius: 5px;
    overflow: hidden; /* Contain image */
    box-shadow: 1px 1px 3px rgba(0,0,0,0.1);
    transition: transform 0.2s ease-in-out;
  }
  #coffee-masters-app #menu article:hover {
    transform: scale(1.02);
  }

  #coffee-masters-app #menu article img {
    width: 100%;
    display: block; /* Remove extra space below image */
  }

  #coffee-masters-app #menu article a {
    text-decoration: none;
    display: block;
    color: inherit; /* Inherit text color */
  }

  #coffee-masters-app #menu article section {
    display: flex;
    align-items: center; /* Align items vertically */
    padding: 5px 10px; /* Add padding */
  }

  #coffee-masters-app #menu article section div {
    flex-grow: 1; /* Allow text div to grow */
    margin-right: 10px; /* Add space before button */
  }


  #coffee-masters-app #menu article button {
    background-color: var(--color5);
    border: none;
    padding: 8px 15px; /* Adjust padding */
    border-radius: 20px; /* Rounder buttons */
    color: var(--primaryColor); /* Adjusted color */
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.2s;
    white-space: nowrap; /* Prevent wrapping */
  }

  #coffee-masters-app #menu article button:hover {
      background-color: var(--color4);
      color: white;
  }

  #coffee-masters-app #menu article h4 {
    margin: 0 0 2px 0; /* Adjusted margin */
    color: var(--secondaryColor);
    font-size: 16px;
    font-weight: bold;
  }

  #coffee-masters-app #menu article .price {
    margin: 0; /* Reset margin */
    color: var(--color4);
    font-weight: bold;
    font-size: 14px;
  }

  /* DetailsPage Styles (from DetailsPage.css & adjusted) */
  #coffee-masters-app .details-container {
    padding: 10px;
  }

  #coffee-masters-app .details-container header {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    border-bottom: 1px solid var(--color5);
    padding-bottom: 10px;
  }

  #coffee-masters-app .details-container header a.back-link {
    flex: 0 0 auto; /* Don't grow or shrink, keep initial size */
    text-decoration: none;
    color: var(--primaryColor);
    padding: 5px 10px;
    border: 1px solid var(--color5);
    border-radius: 15px;
    transition: background-color 0.2s;
    font-size: 14px;
  }
   #coffee-masters-app .details-container header a.back-link:hover {
       background-color: var(--color6);
   }

  #coffee-masters-app .details-container h2 {
    color: var(--secondaryColor);
    font-weight: bold; /* Bolder */
    font-size: 20px;
    flex-grow: 1; /* Take remaining space */
    margin: 0 10px; /* Add margin */
    text-align: center;
  }

  #coffee-masters-app .details-container img {
    width: 100%;
    max-width: 400px; /* Limit image size */
    display: block;
    margin: 0 auto 15px auto; /* Center image */
    border-radius: 5px;
  }

  #coffee-masters-app .details-container .description {
    margin: 0 0 10px 0;
    padding: 0 5px;
    color: var(--primaryColor);
    font-size: 14px; /* Slightly larger */
    line-height: 1.5;
  }

  #coffee-masters-app .details-container .price {
    color: var(--secondaryColor);
    font-weight: bold;
    font-size: 18px; /* Larger price */
    padding: 0 5px;
    margin-bottom: 15px;
  }

  #coffee-masters-app .details-container button.add-to-cart-button {
    display: block;
    background-color: var(--color5);
    border: 0;
    width: 80%;
    margin: 16px auto; /* Center button */
    padding: 12px 0;
    border-radius: 40px;
    color: var(--primaryColor);
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  #coffee-masters-app .details-container button.add-to-cart-button:hover {
      background-color: var(--color4);
      color: white;
  }


  /* OrderPage/Cart Styles (from OrderPage.css & adjusted) */
  #coffee-masters-app #order-summary {
      background-color: var(--color6);
      padding: 16px;
      margin: 12px 0; /* Only top/bottom margin */
      border-radius: 5px;
      box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
  }

  #coffee-masters-app #order-summary h2 {
      text-align: center;
      color: var(--secondaryColor);
      font-weight: normal;
      font-size: 20px;
      margin: 0 0 15px 0;
      border-bottom: 1px solid var(--color5);
      padding-bottom: 10px;
  }

  #coffee-masters-app #cart-items {
      list-style: none;
      padding: 0;
      margin: 0;
  }

  #coffee-masters-app #cart-items li {
      display: flex;
      align-items: center;
      border-bottom: 1px dashed var(--color5); /* Dashed border */
      padding: 8px 0;
  }

  #coffee-masters-app #cart-items li:last-child {
      border-bottom: 0;
  }

  #coffee-masters-app #cart-items .qty {
      color: var(--color4);
      flex: 0 0 30px; /* Fixed width for qty */
      text-align: right;
      padding-right: 10px;
      font-weight: bold;
  }
   #coffee-masters-app #cart-items .qty::after {
       content: 'x';
       padding-left: 4px;
       font-weight: normal;
       color: #aaa;
   }

  #coffee-masters-app #cart-items .name {
      font-weight: bold;
      color: var(--secondaryColor);
      flex-grow: 1; /* Take up remaining space */
      padding-right: 10px;
  }

  #coffee-masters-app #cart-items .price {
      color: var(--secondaryColor);
      flex: 0 0 60px; /* Fixed width for price */
      text-align: right;
      font-weight: bold;
  }

  #coffee-masters-app #cart-items .toolbar {
      flex: 0 0 30px; /* Fixed width for delete button */
      text-align: right;
  }

  #coffee-masters-app #cart-items .toolbar a.delete-button {
      text-decoration: none;
      color: red;
      font-size: 18px;
      padding: 5px;
      opacity: 0.7;
      transition: opacity 0.2s;
  }
  #coffee-masters-app #cart-items .toolbar a.delete-button:hover {
      opacity: 1;
  }

  #coffee-masters-app #total-line {
      text-align: right;
      margin-top: 15px;
      padding-top: 10px;
      border-top: 1px solid var(--color4);
      font-weight: bold;
      font-size: 18px;
      color: var(--primaryColor);
  }
  #coffee-masters-app #total-line #total-amount {
    min-width: 70px;
    display: inline-block;
    text-align: right;
  }

  #coffee-masters-app #order-summary .empty {
      text-align: center;
      color: var(--color3);
      padding: 20px;
      font-style: italic;
  }


  /* Material Symbols Outlined */
  .material-symbols-outlined {
    font-variation-settings:
    'FILL' 0,
    'wght' 400,
    'GRAD' 0,
    'opsz' 24; /* Base size */
     font-family: 'Material Symbols Outlined';
     font-weight: normal;
     font-style: normal;
     font-size: 24px;  /* Preferred icon size */
     display: inline-block;
     line-height: 1;
     text-transform: none;
     letter-spacing: normal;
     word-wrap: normal;
     white-space: nowrap;
     direction: ltr;
     /* Support for all WebKit browsers. */
     -webkit-font-smoothing: antialiased;
     /* Support for Safari and Chrome. */
     text-rendering: optimizeLegibility;
     /* Support for Firefox. */
     -moz-osx-font-smoothing: grayscale;
     /* Support for IE. */
     font-feature-settings: 'liga';
     vertical-align: middle; /* Align icons better with text */
  }

</style>

<script is:inline>
  // Make app global within this script's scope
  window.app = {};

  // === Store ===
  const Store = {
    menu: null,
    cart: [], // { product: {}, quantity: 1 }
  };

  app.store = new Proxy(Store, {
    set(target, property, value) {
      target[property] = value;
      if (property === "menu") {
        window.dispatchEvent(new CustomEvent("menuChanged"));
      }
      if (property === "cart") {
        window.dispatchEvent(new CustomEvent("cartChanged"));
      }
      // console.log("Store changed:", property, value);
      return true;
    },
    get(target, property) {
      return target[property];
    }
  });

  // === API (Simplified Menu Loading) ===
  async function loadMenuData() {
    try {
      const response = await fetch('/sketch/vanilla-js-app/data/menu.json'); // Assumes menu.json is in public/data
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      app.store.menu = data;
    } catch (error) {
      console.error("Failed to load menu data:", error);
      // Optionally display an error message to the user
      const menuDiv = document.querySelector('#coffee-masters-app #menu');
      if (menuDiv) {
          menuDiv.innerHTML = '<p style="color: red; text-align: center;">Error loading menu.</p>';
      }
    }
  }

  // === Router (Simplified Hash-Based) ===
  const Router = {
    init: () => {
      // Initial load based on hash or default
      Router.go(location.hash, false);

      // Listen for hash changes
      window.addEventListener("hashchange", () => {
        Router.go(location.hash, false);
      });

      // Set up nav links (ensure they are within the component scope)
      const appContainer = document.getElementById('coffee-masters-app');
      appContainer.querySelectorAll("a.navlink").forEach(link => {
        link.addEventListener("click", event => {
          event.preventDefault();
          const url = link.getAttribute("href");
          Router.go(url); // Update hash and render
        });
      });

       // Cart update listener
       window.addEventListener('cartChanged', () => Router.updateBadge());
       Router.updateBadge(); // Initial update

    },
    go: (route, addToHistory = true) => {
      // console.log(`Router going to ${route}`);

      if (addToHistory && location.hash !== route) {
        history.pushState(null, '', route); // Use hash for simplicity
      } else if (!addToHistory && !route) {
          // Default route if hash is empty
          route = '#';
      }

      let pageElement = null;
      const mainContentArea = document.querySelector("#coffee-masters-app main");
      if (!mainContentArea) {
          console.error("Main content area not found!");
          return;
      }
      mainContentArea.innerHTML = ""; // Clear previous content

      // Use startsWith for flexibility, remove leading #
      const cleanRoute = route.startsWith('#') ? route.substring(1) : route;

      if (cleanRoute.startsWith("/product-")) {
        pageElement = document.createElement("details-page");
        const paramId = cleanRoute.substring(cleanRoute.lastIndexOf("-") + 1);
        pageElement.dataset.id = paramId;
      } else if (cleanRoute === "order") {
         pageElement = document.createElement("order-page");
      } else { // Default to menu page (route is '' or '/')
        pageElement = document.createElement("menu-page");
      }

      if (pageElement) {
        mainContentArea.appendChild(pageElement);
        window.scrollTo(0, 0); // Scroll to top on page change
      } else {
          mainContentArea.innerHTML = '<p>Page not found</p>';
      }

      // Highlight active nav link (basic example)
      const appContainer = document.getElementById('coffee-masters-app');
      appContainer.querySelectorAll("a.navlink").forEach(link => {
          link.style.backgroundColor = 'transparent'; // Reset style
          const linkRoute = (link.getAttribute('href') || '').startsWith('#') ? link.getAttribute('href').substring(1) : link.getAttribute('href');
          if (cleanRoute === linkRoute || (cleanRoute === '' && linkRoute === '/')) { // Match empty or / for home
              link.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'; // Simple highlight
          }
      });

    },
    updateBadge: () => {
        const badge = document.querySelector("#coffee-masters-app #badge");
        if (badge) {
            const cartCount = app.store.cart.reduce((sum, item) => sum + item.quantity, 0);
            badge.textContent = cartCount;
            badge.hidden = cartCount === 0;
        }
    }
  };

  // === Web Components ===

  // --- ProductItem Component ---
  class ProductItem extends HTMLElement {
    constructor() {
      super();
      // No shadow DOM for simpler integration in Astro
    }

    connectedCallback() {
      const template = document.getElementById("product-item-template");
      if (!template) {
          console.error("Product item template not found!");
          return;
      }
      const content = template.content.cloneNode(true);
      this.appendChild(content);

      // Check if product data exists
      if (!this.dataset.product) {
          console.error("Product data missing for item:", this);
          this.innerHTML = '<p>Error displaying product.</p>'; // Show error inplace
          return;
      }

      try {
          const product = JSON.parse(this.dataset.product);

          this.querySelector("h4").textContent = product.name;
          this.querySelector("p.price").textContent = `$${product.price.toFixed(2)}`;
          // Adjust image path - assuming images are moved to public/images/
          this.querySelector("img").src = `/sketch/vanilla-js-app/images/${product.image}`;
          this.querySelector("img").alt = product.name; // Add alt text

          const link = this.querySelector("a");
          const button = this.querySelector("button");

          // Click handler for the whole item (navigate to details)
          link.addEventListener("click", event => {
            // Prevent navigation if the button was clicked
            if (event.target === button || button.contains(event.target)) {
              return;
            }
            event.preventDefault();
            Router.go(`#/product-${product.id}`);
          });

          // Click handler specifically for the Add button
          button.addEventListener("click", event => {
             event.preventDefault(); // Prevent link navigation
             event.stopPropagation(); // Stop event bubbling
             addToCart(product.id);
             // Optional: visual feedback
             button.textContent = 'Added!';
             setTimeout(() => { button.textContent = 'Add'; }, 1000);
          });

      } catch (error) {
          console.error("Error parsing product data or setting up item:", error, this.dataset.product);
          this.innerHTML = '<p>Error loading product details.</p>';
      }
    }
  }
  // Only define if not already defined
  if (!customElements.get('product-item')) {
    customElements.define("product-item", ProductItem);
  }


  // --- MenuPage Component ---
  class MenuPage extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const template = document.getElementById("menu-page-template");
       if (!template) {
          console.error("Menu page template not found!");
          return;
      }
      const content = template.content.cloneNode(true);
      this.appendChild(content);

      this.render(); // Initial render
      window.addEventListener("menuChanged", () => this.render());
    }

    render() {
        const menuContainer = this.querySelector("#menu");
        if (!menuContainer) return; // Guard clause

        if (app.store.menu) {
            menuContainer.innerHTML = ""; // Clear loading/previous content
            const menuList = document.createElement("ul"); // Create the main list

            if (app.store.menu.length === 0) {
                menuList.innerHTML = '<p>No menu items available.</p>';
            } else {
                app.store.menu.forEach(category => {
                    const liCategory = document.createElement("li");
                    liCategory.innerHTML = `<h3>${category.name}</h3><ul class="category-products"></ul>`;
                    const productList = liCategory.querySelector(".category-products");

                    if (category.products && category.products.length > 0) {
                        category.products.forEach(product => {
                            const item = document.createElement("product-item");
                            // Crucial: Pass product data via dataset
                            item.dataset.product = JSON.stringify(product);
                            productList.appendChild(item);
                        });
                    } else {
                        productList.innerHTML = '<li><p>No items in this category.</p></li>';
                    }
                    menuList.appendChild(liCategory);
                });
            }
            menuContainer.appendChild(menuList); // Append the populated list
        } else {
            // Keep "Loading..." or show a more robust loading indicator
             menuContainer.innerHTML = "Loading...";
        }
    }

  }
   if (!customElements.get('menu-page')) {
       customElements.define("menu-page", MenuPage);
   }


  // --- DetailsPage Component ---
  class DetailsPage extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const template = document.getElementById("details-page-template");
       if (!template) {
          console.error("Details page template not found!");
          return;
      }
      const content = template.content.cloneNode(true);
      this.appendChild(content);
      this.render();
    }

    render() {
      const productId = parseInt(this.dataset.id);
      if (isNaN(productId) || !app.store.menu) {
        this.innerHTML = "<p>Loading product details...</p>";
        // If menu is loaded but product not found after a check
        if (app.store.menu) {
             // Small delay to allow menu to potentially load
             setTimeout(() => {
                if (!this.findProduct(productId)) {
                     this.innerHTML = "<p>Product not found.</p>";
                }
             }, 100);
        }
        return;
      }

      const product = this.findProduct(productId);

      if (product) {
        this.querySelector("h2").textContent = product.name;
        this.querySelector("img").src = `/sketch/vanilla-js-app/images/${product.image}`;
        this.querySelector("img").alt = product.name;
        this.querySelector(".description").textContent = product.description;
        this.querySelector(".price").textContent = `$${product.price.toFixed(2)}`;

        // Add to cart button listener
        const button = this.querySelector(".add-to-cart-button");
        button.onclick = (event) => { // Use onclick for simplicity here
            event.preventDefault();
            addToCart(product.id);
            button.textContent = 'Added!';
             setTimeout(() => { button.textContent = 'Add to cart'; }, 1000);
        };

        // Back link listener
        this.querySelector("a.back-link").onclick = (event) => {
            event.preventDefault();
            // Go back to menu (or potentially previous state if more complex routing was needed)
            Router.go("#/");
        };

      } else {
        this.innerHTML = "<p>Product not found.</p>";
      }
    }

    findProduct(productId) {
        if (!app.store.menu) return null;
        for (let category of app.store.menu) {
            const found = category.products.find(p => p.id === productId);
            if (found) return found;
        }
        return null;
    }
  }
   if (!customElements.get('details-page')) {
      customElements.define("details-page", DetailsPage);
   }


    // --- OrderPage Component (Cart Display) ---
    class OrderPage extends HTMLElement {
        constructor() {
            super();
        }

        connectedCallback() {
            const template = document.getElementById("order-page-template");
             if (!template) {
                console.error("Order page template not found!");
                return;
            }
            const content = template.content.cloneNode(true);
            this.appendChild(content);

            this.render(); // Initial render
            window.addEventListener("cartChanged", () => this.render());
        }

        render() {
            const cartItemsUl = this.querySelector("#cart-items");
            const totalLine = this.querySelector("#total-line");
            const totalAmountSpan = this.querySelector("#total-amount");
            const emptyMessage = this.querySelector(".empty");

            if (!cartItemsUl || !totalLine || !totalAmountSpan || !emptyMessage) return; // Guard

            cartItemsUl.innerHTML = ''; // Clear current items

            if (app.store.cart.length === 0) {
                totalLine.hidden = true;
                emptyMessage.hidden = false;
            } else {
                emptyMessage.hidden = true;
                totalLine.hidden = false;
                let total = 0;

                app.store.cart.forEach(item => {
                    const cartItemTemplate = document.getElementById("cart-item-template");
                    if (!cartItemTemplate) return; // Skip if template missing

                    const li = cartItemTemplate.content.cloneNode(true);
                    const product = item.product; // Get product details from cart item

                    li.querySelector(".qty").textContent = item.quantity;
                    li.querySelector(".name").textContent = product.name;
                    li.querySelector(".price").textContent = `$${(product.price * item.quantity).toFixed(2)}`;

                    const deleteButton = li.querySelector(".delete-button");
                    deleteButton.onclick = (e) => {
                        e.preventDefault();
                        removeFromCart(product.id);
                    };

                    cartItemsUl.appendChild(li);
                    total += item.quantity * product.price;
                });

                totalAmountSpan.textContent = `$${total.toFixed(2)}`;
            }
        }
    }
     if (!customElements.get('order-page')) {
        customElements.define("order-page", OrderPage);
     }

  // === Cart Functions ===
  function addToCart(id) {
    const product = findProductInStore(id);
    if (!product) return;

    let existingItem = app.store.cart.find(item => item.product.id === id);

    if (existingItem) {
      existingItem.quantity++;
      // Since cart is an array, need to trigger proxy update by reassigning
      app.store.cart = [...app.store.cart];
    } else {
      // Add product details directly to the cart item
      app.store.cart = [...app.store.cart, { product: product, quantity: 1 }];
    }
    // console.log("Cart after add:", app.store.cart);
  }

 function removeFromCart(id) {
    app.store.cart = app.store.cart.filter(item => item.product.id !== id);
    // console.log("Cart after remove:", app.store.cart);
  }

  function findProductInStore(id) {
      if (!app.store.menu) return null;
      for (let category of app.store.menu) {
          const found = category.products.find(p => p.id === id);
          if (found) return found;
      }
      return null;
  }


  // === Initialization ===
  document.addEventListener("DOMContentLoaded", () => {
    // console.log("DOM Loaded, initializing Coffee Masters App");
    // Check if essential templates exist before initializing
    if (document.getElementById('menu-page-template') &&
        document.getElementById('product-item-template') &&
        document.getElementById('details-page-template') &&
        document.getElementById('order-page-template') &&
        document.getElementById('cart-item-template')) {

        Router.init();
        loadMenuData(); // Load data after router is ready
    } else {
        console.error("One or more essential templates are missing. App cannot initialize.");
        const mainArea = document.querySelector("#coffee-masters-app main");
        if (mainArea) {
             mainArea.innerHTML = "<p style='color: red; text-align: center;'>Error: Application templates missing. Cannot load the coffee app.</p>";
        }
    }
  });

</script>

<!-- Link Google Fonts and Icons (place in <head> ideally, but works here too) -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;700&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

</rewritten_file>