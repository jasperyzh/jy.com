---
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/starwind/card";
import { Button } from "@/components/starwind/button";

// You can replace this with your actual Google Form URL
const demoFormUrl = "https://docs.google.com/forms/d/e/YOUR_FORM_ID/viewform?embedded=true";

// Configuration for the custom form
const formConfig = {
  title: "Contact Us",
  description: "We'd love to hear from you! Fill out the form below to get in touch.",
  fields: [
    { id: "name", label: "Full Name", type: "text", required: true, placeholder: "John Doe" },
    { id: "email", label: "Email Address", type: "email", required: true, placeholder: "you@example.com" },
    { id: "phone", label: "Phone Number", type: "tel", required: false, placeholder: "(555) 123-4567" },
    { id: "message", label: "Message", type: "textarea", required: true, placeholder: "Let us know how we can help..." },
    { id: "source", label: "How did you hear about us?", type: "select", required: false, options: [
      { value: "", label: "Please select an option" },
      { value: "search", label: "Search Engine" },
      { value: "social", label: "Social Media" },
      { value: "friend", label: "Friend/Referral" },
      { value: "other", label: "Other" }
    ]}
  ],
  submitButtonText: "Submit",
  successMessage: "Thanks for contacting us! We'll get back to you soon."
};

// Function to generate Google Sheet script URL (in a real application)
// This would be where your Google Sheet web app is deployed
const getGoogleScriptUrl = () => {
  // Replace with your Google Script Web App URL
  return "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec";
};
---

<div class="mx-auto max-w-3xl">
  <h2 class="text-2xl font-bold mb-6">Lead Collection Form Examples</h2>
  
  <!-- Option 1: Simple Google Form Embed -->
  <Card class="mb-10">
    <CardHeader>
      <CardTitle>Option 1: Google Form Direct Embed</CardTitle>
      <CardDescription>
        The simplest implementation: just embed the Google Form directly.
      </CardDescription>
    </CardHeader>
    <CardContent>
      <!-- For demo purposes, we're showing a placeholder instead of an actual embed -->
      <div class="border-2 border-dashed border-gray-300 bg-gray-50 p-6 rounded-md text-center">
        <p class="text-gray-600 mb-4">An embedded Google Form would appear here.</p>
        <p class="text-sm text-gray-500">
          To implement this, replace this placeholder with an iframe pointing to your Google Form URL.
        </p>
        <pre class="mt-4 bg-gray-100 p-2 rounded text-left overflow-x-auto text-xs">
&lt;iframe 
  src="YOUR_GOOGLE_FORM_URL?embedded=true" 
  width="100%" 
  height="800" 
  frameborder="0"&gt;
  Loading...
&lt;/iframe&gt;</pre>
      </div>
    </CardContent>
  </Card>
  
  <!-- Option 2: Custom Form with Google Sheets Backend -->
  <Card>
    <CardHeader>
      <CardTitle>Option 2: Custom Form with Google Sheets Backend</CardTitle>
      <CardDescription>
        A styled form that matches your website design while still using Google Sheets for data storage.
      </CardDescription>
    </CardHeader>
    <CardContent>
      <form id="lead-form" class="space-y-4">
        {formConfig.fields.map((field) => (
          <div class="form-group">
            <label for={field.id} class="block text-sm font-medium mb-1">
              {field.label} {field.required && <span class="text-red-500">*</span>}
            </label>
            
            {field.type === 'textarea' ? (
              <textarea
                id={field.id}
                name={field.id}
                required={field.required}
                placeholder={field.placeholder}
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
                rows="4"
              ></textarea>
            ) : field.type === 'select' ? (
              <select
                id={field.id}
                name={field.id}
                required={field.required}
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
              >
                {field.options && field.options.map(option => (
                  <option value={option.value}>{option.label}</option>
                ))}
              </select>
            ) : (
              <input
                type={field.type}
                id={field.id}
                name={field.id}
                required={field.required}
                placeholder={field.placeholder}
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
              />
            )}
          </div>
        ))}
        
        <div class="pt-2">
          <Button type="submit" id="submit-button">
            {formConfig.submitButtonText}
          </Button>
        </div>
      </form>
      
      <!-- Success message (hidden by default) -->
      <div id="success-message" class="hidden mt-4 p-4 bg-green-50 text-green-700 rounded-md">
        {formConfig.successMessage}
      </div>
    </CardContent>
    <CardFooter class="border-t pt-6">
      <div class="text-sm text-gray-500">
        <h3 class="font-semibold text-gray-700 mb-2">How This Works:</h3>
        <ol class="list-decimal list-inside space-y-1">
          <li>This form submits data to Google Sheets via Apps Script</li>
          <li>Create a Sheet and set up a Google Apps Script Web App</li>
          <li>Connect this form to your Script's URL</li>
          <li>Enjoy collecting leads with your custom-styled form!</li>
        </ol>
      </div>
    </CardFooter>
  </Card>
  
  <!-- Implementation Instructions -->
  <div class="mt-12">
    <h3 class="text-xl font-bold mb-4">Next Steps: Scaling Your Lead Collection</h3>
    <div class="prose max-w-none">
      <p>
        When you outgrow Google Sheets, consider these options:
      </p>
      <ul class="list-disc pl-5 space-y-2">
        <li><strong>CRM Integration:</strong> Export your lead data to a proper CRM like HubSpot or Salesforce</li>
        <li><strong>Email Marketing:</strong> Connect your form to Mailchimp or similar services via Zapier</li>
        <li><strong>Custom Backend:</strong> Develop a dedicated database solution for higher volumes</li>
      </ul>
    </div>
  </div>
</div>

<script>
  // Demo script for form handling (client-side)
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('lead-form');
    const submitButton = document.getElementById('submit-button');
    const successMessage = document.getElementById('success-message');
    
    if (form && submitButton && successMessage) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Disable the submit button and show loading state
        submitButton.disabled = true;
        submitButton.innerText = 'Submitting...';
        
        // In a real implementation, you would send the form data to Google Sheets
        // via the Google Script Web App URL
        
        // Simulate form submission delay
        setTimeout(() => {
          // Show success message
          successMessage.classList.remove('hidden');
          
          // Reset form
          form.reset();
          
          // Reset button
          submitButton.disabled = false;
          submitButton.innerText = 'Submit';
          
          // Auto-hide success message after 5 seconds
          setTimeout(() => {
            successMessage.classList.add('hidden');
          }, 5000);
        }, 1000);
        
        // In a real implementation, you would have code like this:
        /*
        const formData = new FormData(form);
        fetch('YOUR_GOOGLE_SCRIPT_WEB_APP_URL', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          successMessage.classList.remove('hidden');
          form.reset();
          submitButton.disabled = false;
          submitButton.innerText = 'Submit';
        })
        .catch(error => {
          console.error('Error:', error);
          submitButton.disabled = false;
          submitButton.innerText = 'Submit';
          alert('There was an error submitting the form. Please try again.');
        });
        */
      });
    }
  });
</script>
