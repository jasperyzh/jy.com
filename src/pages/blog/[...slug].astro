---
import { getCollection, render } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getBlogFilename } from "@/utils/blogUtils";

// Commented out until component is implemented
import Article from "@/components/Article.astro";
import ArticleHeader from "@/components/ArticleHeader.astro";
import ArticleContent from "@/components/ArticleContent.astro";
import ArticleFooter from "@/components/ArticleFooter.astro";

// Fetch all posts and generate paths for each post
export async function getStaticPaths() {
  const allPosts = await getCollection("ob_blog");

  // Log all post IDs for debugging
  // const postIds = allPosts.map((post) => post.data.draft);
  // console.log("All blog post IDs:", postIds);

  // Filter out draft posts (unless in development)
  // const publishedPosts = import.meta.env.DEV
  //   ? allPosts
  //   : allPosts.filter((post) => {
  //       return !post.data.draft;
  //     });
  const publishedPosts = allPosts.filter((post) => {
    return !post.data.draft;
  });
  // console.log(publishedPosts.map((post) => post.data.draft));

  // Generate paths for each post using clean URLs
  const paths = publishedPosts.map((entry) => {
    // Use just the filename for the URL, ignoring the directory structure
    const cleanSlug = getBlogFilename(entry);

    return {
      params: { slug: cleanSlug },
      props: { entry },
    };
  });

  // Log generated paths for debugging
  /* console.log(
    "Generated paths:",
    paths.map((p) => p.params.slug)
  ); */
  return paths;
}

const { entry } = Astro.props;

// Add prerender directive to fix the warning
export const prerender = true;

// Check if entry exists before rendering
let Content;
if (entry) {
  const rendered = await render(entry);
  Content = rendered.Content;
} else {
  console.error("Blog entry not found");
}
---

<BaseLayout
  title={entry?.data.title || "Blog Post Not Found"}
  description={entry?.data.description ||
    "The requested blog post could not be found"}
>
  {
    entry ? (
      <Article>
        <ArticleHeader
          date={entry.data.pubDate}
          title={entry.data.title}
          description={entry.data.description}
          tags={entry.data.tags}
        />

        <ArticleContent>
          {Content && <Content />}
          {!Content && <p>Content could not be loaded</p>}
        </ArticleContent>

        <ArticleFooter
          returnUrl="/blog"
          returnLabel="Back to Blog"
          title={entry.data.title}
        />
      </Article>
    ) : (
      <p>Blog Post Not Found</p>
    )
  }
</BaseLayout>
