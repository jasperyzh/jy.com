---
import { getCollection, render } from "astro:content";
import Layout from "@/layouts/BaseLayout.astro";
import ReturnButton from "@/components/ReturnButton.astro";
import CacheCurrentPage from "@/components/CacheCurrentPage.astro";

// import SingleSidebar from "../../components/SingleSidebar.astro";

// Fetch all posts and generate paths for each post
export async function getStaticPaths() {
  const allPosts = await getCollection("ob_blog");

  // Filter out draft posts
  const publishedPosts = allPosts.filter((post) => !post.data.draft);

  return publishedPosts.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await render(entry);
---

<Layout title={entry?.data.title} description={entry?.data.description}>
  <main>
    <article>
      <header>
        <!-- Back Button -->
        <ReturnButton label="Back" onClick="history.back()" />

        <h1>{entry?.data.title}</h1>
        <p>{entry?.data.description}</p>
        <hr />
      </header>
      <main>
        <Content />
      </main>
    </article>
    <style>
      :root {
        --spacing: 2.15rem;
      }
      article {
        & > header {
          max-width: 820px;
          margin: 1rem auto;
        }
        & > main {
          max-width: 720px;
          margin: var(--spacing) auto;
          line-height: var(--spacing);

          h1,
          h2,
          h3,
          h4,
          h5,
          h6 {
            margin-top: var(--spacing);
          }
        }
        hr {
          margin: var(--spacing) auto;
        }
        blockquote {
          font-style: italic;
          line-height: 1.65;
          border-left: 2px solid #eee;
          padding-left: 1rem;
          margin: 2rem auto;
          margin-left: 1rem;
        }
      }
    </style>
  </main>
  
  <!-- Cache this page for offline use -->
  <CacheCurrentPage />
</Layout>

<script>
  // Import Prism core and theme
  import Prism from "prismjs";

  // Import additional languages
  import "prismjs/components/prism-javascript";
  import "prismjs/components/prism-typescript";
  import "prismjs/components/prism-css";
  import "prismjs/components/prism-scss";
  import "prismjs/components/prism-bash";
  import "prismjs/components/prism-markdown";
  import "prismjs/components/prism-json";
  import "prismjs/components/prism-yaml";

  // Initialize Prism
  document.addEventListener("DOMContentLoaded", () => {
    requestAnimationFrame(() => {
      Prism.highlightAll();
    });
  });
</script>

<style is:global>
  /* Code block styling */
  pre[class*="language-"] {
    padding: 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0.5rem;
    overflow-x: auto;
    background: #1a1a1a !important;
    border: 1px solid #2d2d2d;
  }

  code[class*="language-"] {
    font-family: "Fira Code", Menlo, Monaco, Consolas, "Courier New", monospace;
    font-size: 0.9rem;
    line-height: 1.5;
    text-shadow: none;
  }

  /* Inline code styling */
  :not(pre) > code {
    padding: 0.2em 0.4em;
    margin: 0;
    border-radius: 3px;
    background: #2d2d2d;
    color: #e6e6e6;
    font-size: 0.9em;
  }

  /* Token colors overrides if needed */
  .token.comment,
  .token.prolog,
  .token.doctype,
  .token.cdata {
    color: #608b4e;
  }

  .token.punctuation {
    color: #808080;
  }

  .token.property,
  .token.tag,
  .token.boolean,
  .token.number,
  .token.constant,
  .token.symbol {
    color: #569cd6;
  }

  .token.selector,
  .token.attr-name,
  .token.string,
  .token.char,
  .token.builtin {
    color: #ce9178;
  }
</style>
