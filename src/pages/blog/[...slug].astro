---
import { getCollection, render } from "astro:content";
import Layout from "@/layouts/BaseLayout.astro";
import ReturnButton from "@/components/ReturnButton.astro";
import { formatYymmddDate } from "@/utils/formatDate";
import { getBlogFilename } from "@/utils/blogUtils";

// Commented out until component is implemented
// import FooterBlogShare from "@/components/FooterBlogShare.astro";

// Fetch all posts and generate paths for each post
export async function getStaticPaths() {
  const allPosts = await getCollection("ob_blog");

  // Log all post IDs for debugging
  const postIds = allPosts.map((post) => post.id);
  console.log("All blog post IDs:", postIds);

  // Filter out draft posts (unless in development)
  const publishedPosts = import.meta.env.DEV
    ? allPosts
    : allPosts.filter((post) => !post.data.draft);

  // Generate paths for each post using clean URLs
  const paths = publishedPosts.map((entry) => {
    // Use just the filename for the URL, ignoring the directory structure
    const cleanSlug = getBlogFilename(entry);

    return {
      params: { slug: cleanSlug },
      props: { entry },
    };
  });

  // Log generated paths for debugging
  /* console.log(
    "Generated paths:",
    paths.map((p) => p.params.slug)
  ); */
  return paths;
}

const { entry } = Astro.props;

// Add prerender directive to fix the warning
export const prerender = true;

// Check if entry exists before rendering
let Content;
if (entry) {
  const rendered = await render(entry);
  Content = rendered.Content;
} else {
  console.error("Blog entry not found");
}
---

<Layout
  title={entry?.data.title || "Blog Post Not Found"}
  description={entry?.data.description ||
    "The requested blog post could not be found"}
>
  <div class="container container--grid max-w-5xl mx-auto mb-16   px-4">
    {
      entry ? (
        <article>
          <header>
            <time datetime={entry.data.pubDate.toISOString()}>
              {formatYymmddDate(entry.data.pubDate).toLocaleDateString(
                "en-US",
                {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                }
              )}
            </time>
            <h1>{entry.data.title}</h1>
            <div class="flex items-center justify-end text-sm">
              {entry.data.tags && entry.data.tags.length > 0 && (
                <>
                  {entry.data.tags.map((tag: string) => (
                    <span class="inline-block mx-2">{tag}</span>
                  ))}
                </>
              )}
            </div>
          </header>

          <div class="content-wrapper max-w-2xl md:mx-auto">
            <div class="prose prose-lg">
              {Content && <Content />}
              {!Content && <p>Content could not be loaded</p>}
            </div>
          </div>

          <footer>
            <ReturnButton href="/blog" label="Back to Blog" />
            {/* <FooterBlogShare {entry} /> */}
          </footer>
        </article>
      ) : (
        <p>Blog Post Not Found</p>
      )
    }
  </div>
</Layout>
<style>
  .container--grid > article {
    /* Base mobile layout first */
    display: grid;
    grid-column: 1 / -1;
    grid-template-columns: subgrid; /* Single column on mobile */
    position: relative;

    header {
      grid-column: 1 / -1; /* Full width on mobile */
      grid-row: 1;
    }

    .content-wrapper {
      grid-column: 1 / -1; /* Full width on mobile */
      grid-row: 2;

      overflow-x: auto;
    }

    footer {
      grid-column: 1 / -1; /* Full width on mobile */
      /* grid-row: 3; */

      justify-self: center; /* Center on mobile */
      position: relative; /* Normal flow on mobile */

      margin-block: 1rem;
    }

    @media (min-width: 1024px) {
      padding: 0 1rem;
      grid-template-columns: subgrid;
      grid-template-rows: auto auto auto;
      header {
        grid-column: 1 / span 2;
        grid-row: 1 / span 1;

        position: sticky;
        top: 6rem; /* Adjust to account for fixed navbar height + some padding */

        padding-inline-end: 1rem;
      }

      .content-wrapper {
        grid-column: 3 / span 4;
        grid-row: 1 / 4;
      }

      footer {
        grid-column: 1 / span 2;
        grid-row: -1 / -2;
      }
    }
  }
</style>
