---
/**
 * Paginated blog page
 * Handles routes like /blog/page/2, /blog/page/3, etc.
 */
import { getCollection } from "astro:content";
import PageBlog from "@/layouts/PageBlog.astro";
import { formatYymmddDate } from "@/utils/formatDate";
import { getBlogFilename, formatForUrl } from "@/utils/blogUtils";

// Import the posts per page constant from blog index
import { POSTS_PER_PAGE } from "../index.astro";

// Define props and generate static paths
export async function getStaticPaths() {
  const allPosts = await getCollection("blog");

  // Sort posts by date (newest first)
  const sortedPosts = allPosts.sort((a, b) => {
    const dateA = formatYymmddDate(a.data.pubDate || new Date());
    const dateB = formatYymmddDate(b.data.pubDate || new Date());
    return dateB.getTime() - dateA.getTime();
  });

  // Filter out draft posts in production
  const publishedPosts = import.meta.env.PROD
    ? sortedPosts.filter((post) => !post.data.draft)
    : sortedPosts;

  // Calculate total number of pages
  const totalPages = Math.ceil(publishedPosts.length / POSTS_PER_PAGE);

  // Generate an array of page numbers [1, 2, 3, ...]
  return Array.from({ length: totalPages }).map((_, i) => {
    const page = i + 1;
    const start = i * POSTS_PER_PAGE;
    const end = start + POSTS_PER_PAGE;

    return {
      params: { page: page.toString() },
      props: {
        posts: publishedPosts.slice(start, end),
        totalPosts: publishedPosts.length,
        currentPage: page,
        totalPages,
        allPosts: publishedPosts, // Pass all posts for tag filtering
      },
    };
  });
}

// Define page props
const { posts, totalPosts, currentPage, totalPages, allPosts } = Astro.props;

// Calculate pagination URLs
const prevUrl =
  currentPage > 1
    ? currentPage === 2
      ? "/blog"
      : `/blog/page/${currentPage - 1}`
    : null;
const nextUrl =
  currentPage < totalPages ? `/blog/page/${currentPage + 1}` : null;

// Extract all tags for filtering
const allTags = allPosts.flatMap(post => post.data.tags || []);
const tags = [...new Set(allTags)].sort();

// Calculate count for each tag
const tagCounts = {};
tags.forEach(tag => {
  tagCounts[tag] = allPosts.filter(post => 
    post.data.tags && post.data.tags.includes(tag)
  ).length;
});

export const prerender = true;
---

<PageBlog
  title={`Blog - Page ${currentPage}`}
  description="Insights, tutorials, and thoughts on web development, creative coding, and more."
  currentPage={currentPage}
  totalPages={totalPages}
  prevUrl={prevUrl}
  nextUrl={nextUrl}
  paginatedPosts={posts}
  tags={tags}
  tagCounts={tagCounts}
  baseUrl="/blog"
  allPostsCount={totalPosts}
/>
