---
/**
 * Paginated blog page
 * Handles routes like /blog/page/2, /blog/page/3, etc.
 */
import Layout from "@/layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import TagCloud from "@/components/TagCloud.astro";
import Pagination from "@/components/Pagination.astro";
import { formatYymmddDate } from "@/utils/formatDate";
import BlogPostCard from "@/components/BlogPostCard.astro";
import { getBlogFilename } from "@/utils/blogUtils";

// Import the posts per page constant from blog index
import { POSTS_PER_PAGE } from "../index.astro";

// Define props and generate static paths
export async function getStaticPaths() {
  const allPosts = await getCollection("ob_blog");

  // Sort posts by date (newest first)
  const sortedPosts = allPosts.sort((a, b) => {
    const dateA = formatYymmddDate(a.data.pubDate || new Date());
    const dateB = formatYymmddDate(b.data.pubDate || new Date());
    return dateB.getTime() - dateA.getTime();
  });

  // Filter out draft posts in production
  const publishedPosts = import.meta.env.PROD
    ? sortedPosts.filter((post) => !post.data.draft)
    : sortedPosts;

  // Calculate total number of pages
  const totalPages = Math.ceil(publishedPosts.length / POSTS_PER_PAGE);

  // Generate an array of page numbers [1, 2, 3, ...]
  return Array.from({ length: totalPages }).map((_, i) => {
    const page = i + 1;
    const start = i * POSTS_PER_PAGE;
    const end = start + POSTS_PER_PAGE;

    return {
      params: { page: page.toString() },
      props: {
        posts: publishedPosts.slice(start, end),
        totalPosts: publishedPosts.length,
        currentPage: page,
        totalPages,
      },
    };
  });
}

// Define page props
const { posts, totalPosts, currentPage, totalPages } = Astro.props;

// Calculate pagination URLs
const prevUrl =
  currentPage > 1
    ? `/blog/page/${currentPage - 1}`
    : currentPage > 2
      ? "/blog"
      : null;
const nextUrl =
  currentPage < totalPages ? `/blog/page/${currentPage + 1}` : null;

export const prerender = true;
---

<Layout title={`Blog - Page ${currentPage}`}>
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-7xl mx-auto">
      <!-- Header Section -->
      <div class="mb-8 text-center">
        <h1 class="text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-purple-700 text-transparent bg-clip-text">Blog</h1>
        <p class="text-lg text-slate-600 dark:text-slate-300 max-w-2xl mx-auto">
          Insights, tutorials, and thoughts on web development, creative coding, and more.
        </p>
      </div>
      
      <!-- Filters Section -->
      <div class="mb-8 p-4 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
        <div class="flex flex-col md:flex-row justify-between items-center gap-4">
          <div class="w-full md:w-auto">
            <TagCloud />
          </div>
          <div class="text-sm text-slate-500 dark:text-slate-400">
            Showing {posts.length} of {totalPosts} posts
            {totalPages > 1 && `(Page ${currentPage} of ${totalPages})`}
          </div>
        </div>
      </div>

      <!-- Blog Posts Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
        {
          posts.map((post) => (
            <BlogPostCard
              title={post.data.title}
              description={post.data.description || "No description available"}
              date={formatYymmddDate(post.data.pubDate || new Date())}
              tags={post.data.tags || []}
              category={post.data.category}
              url={`/blog/${getBlogFilename(post)}`}
              thumbnail={post.data.thumbnail || "/img/placeholder.png"}
            />
          ))
        }
      </div>

      <!-- Empty State -->
      {posts.length === 0 && (
        <div class="text-center py-12">
          <div class="text-6xl mb-4">üìù</div>
          <h3 class="text-2xl font-bold mb-2">No posts found</h3>
          <p class="text-slate-600 dark:text-slate-300">
            There are no posts available at the moment. Please check back later.
          </p>
        </div>
      )}

      <!-- Pagination controls -->
      {(prevUrl || nextUrl) && (
        <div class="mt-8">
          <Pagination {prevUrl} {nextUrl} />
        </div>
      )}
    </div>
  </main>
</Layout>

<style>
  .card-tags {
    position: relative;
    z-index: 2;
  }

  .card-tags a {
    pointer-events: auto;
  }
</style>
