---
/**
 * Blog index page with pagination support
 * Displays all blog posts organized by date (newest first)
 * Also shows a tag cloud for filtering posts by topic
 */
import Layout from "@/layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import TagCloud from "@/components/TagCloud.astro";
import Pagination from "@/components/Pagination.astro";
import { formatYymmddDate } from "@/utils/formatDate";
import CardComponent from "@/components/CardComponent.astro";


// Pagination configuration
export const POSTS_PER_PAGE = 6;

// Get all blog posts
const allPosts = await getCollection("ob_blog");

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort((a, b) => {
  const dateA = formatYymmddDate(a.data.pubDate || new Date());
  const dateB = formatYymmddDate(b.data.pubDate || new Date());
  return dateB.getTime() - dateA.getTime();
});

// Filter out draft posts in production
const publishedPosts = import.meta.env.PROD
  ? sortedPosts.filter((post) => !post.data.draft)
  : sortedPosts;

// Calculate pagination
const totalPages = Math.ceil(publishedPosts.length / POSTS_PER_PAGE);
const currentPage = 1;
const start = 0;
const end = start + POSTS_PER_PAGE;
const paginatedPosts = publishedPosts.slice(start, end);

// Calculate previous and next page URLs
const prevUrl = currentPage > 1 ? `/blog/page/${currentPage - 1}` : null;
const nextUrl =
  currentPage < totalPages ? `/blog/page/${currentPage + 1}` : null;
---

<Layout title="Blog - All Posts">
  <main>
    <section class="container mx-auto">
      <h1 class="mb-4">All Blog Posts</h1>
      
      <div class="container">
        <TagCloud />
        <p>
          Showing {paginatedPosts.length} of {publishedPosts.length} posts
          {totalPages > 1 && `(Page ${currentPage} of ${totalPages})`}
        </p>
      </div>

      <div class="container grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {
          paginatedPosts.map((post) => (
            <CardComponent
              title={post.data.title}
              description={post.data.description || "No description available"}
              date={formatYymmddDate(post.data.pubDate || new Date())}
              tags={post.data.tags || []}
              actionLink={`/blog/${post.id}`}
              actionText="Read"
              buttonVariant="primary"
            />
          ))
        }
      </div>
    </section>

    {/* Pagination controls */}
    {(prevUrl || nextUrl) && <Pagination {prevUrl} {nextUrl} />}
  </main>
</Layout>

<style>
  .card-tags {
    position: relative;
    z-index: 2;
  }

  .card-tags a {
    pointer-events: auto;
  }
</style>
