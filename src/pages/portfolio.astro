---
import Layout from "@/layouts/BaseLayout.astro";
import { Badge } from "@/components/starwind/badge";
import { Button } from "@/components/starwind/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/starwind/card";

import { SITE_TITLE } from "../consts";
import { getEntry } from "astro:content";
import { Icon } from "astro-icon/components";

// Get portfolio data from content collection
const portfolioEntry = await getEntry("portfolio", "index");
if (!portfolioEntry) {
  throw new Error("Portfolio data not found");
}

const { items } = portfolioEntry.data;

// Sort projects by year (newest to oldest)
const sortedProjects = [...items].sort((a, b) => b.year.localeCompare(a.year));
---

<Layout title={`Portfolio - ${SITE_TITLE}`}>
  <div class="container container--grid mx-auto px-4 max-w-7xl">
    <!-- Header Section -->
    <header class="header--page">
      <h1>Portfolio</h1>
      <p>A collection of my work and projects</p>
    </header>

    <!-- Portfolio grid -->
    <section class="posts-grid">
      {
        sortedProjects.map((project, projectIndex) => (
          <Card class="card hover:border-primary/50 transition-colors overflow-hidden">
            <CardHeader class="p-0 mb-3">
              <img
                src={project.thumbnail}
                alt={project.title}
                class="aspect-[4/3] w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
              />
            </CardHeader>
            <CardContent class="pb-1">
              <span class="text-sm text-gray-500 dark:text-gray-400 my-2">
                {project.year}
              </span>
              <CardTitle class="text-balance">{project.title}</CardTitle>
              <CardDescription class="hidden md:block lg:max-w-2xl text-balance">
                <p class="mb-4">{project.description}</p>
              </CardDescription>
            </CardContent>
            <CardFooter class="pb-4">
              <div class="flex justify-between items-start w-100 mb-3">
                <Badge variant="outline">{project.category}</Badge>
                <div class="flex flex-wrap gap-1 mb-3">
                  {project.tags.slice(0, 3).map((tag) => (
                    <Badge>{tag}</Badge>
                  ))}
                  {project.tags.length > 3 && (
                    <span class="text-xs text-gray-500 dark:text-gray-400">
                      +{project.tags.length - 3} more
                    </span>
                  )}
                </div>
              </div>
            </CardFooter>
            <a
              href="#"
              data-project-index={projectIndex}
              class="stretched-link gallery-trigger"
              aria-label={`View the ${project.title}`}
            />
          </Card>
        ))
      }
    </section>

    <!-- Contact CTA -->
    <section
      class="text-white text-center md:m-16 my-16 p-12 rounded-lg shadow-lg bg-gradient-to-br from-slate-700 to-slate-800"
    >
      <h2 class="text-4xl font-bold mb-4">Interested in working together?</h2>
      <p class="text-lg mb-8">
        Let's discuss your project and bring your ideas to life.
      </p>
      <Button size="lg" href="mailto:jasper.yzh@gmail.com" target="_blank">
        <Icon name="bi:envelope-fill" /> Get in Touch
      </Button>
    </section>

    <!-- Hidden container with all project images for PhotoSwipe -->
    <div class="hidden">
      <div class="pswp-gallery-all">
        {
          items.map((project, projectIndex) =>
            project.images.map((image, imageIndex) => (
              <a
                href={image.src}
                data-pswp-width={image.width}
                data-pswp-height={image.height}
                data-global-index={imageIndex + projectIndex * 100}
                data-project-index={projectIndex}
                data-image-index={imageIndex}
                class="gallery-item-hidden"
                data-pswp-caption={`<div class="pswp__title">${project.title}</div><div class="pswp__description">${image.caption}</div>`}
              >
                <img
                  src={image.src}
                  alt={image.caption}
                  loading="lazy"
                  class="hidden"
                />
              </a>
            ))
          )
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  // Use dynamic imports for better compatibility with build systems
  const loadPhotoswipe = async () => {
    try {
      const PhotoSwipe = (await import("photoswipe")).default;

      // Define gallery item type
      type GalleryItem = {
        src: string;
        width: number;
        height: number;
        alt: string;
        caption: string;
        projectId: number;
        imageId: number;
      };

      // Create a single continuous gallery with all images
      const allGalleryItems: GalleryItem[] = [];

      // Process all images from all projects into a single array
      document.querySelectorAll(".pswp-gallery-all a").forEach((link) => {
        if (link instanceof HTMLAnchorElement) {
          const item: GalleryItem = {
            src: link.href,
            width: parseInt(link.getAttribute("data-pswp-width") || "1920", 10),
            height: parseInt(
              link.getAttribute("data-pswp-height") || "1080",
              10
            ),
            alt: link.querySelector("img")?.alt || "",
            caption: link.getAttribute("data-pswp-caption") || "",
            projectId: parseInt(
              link.getAttribute("data-project-index") || "0",
              10
            ),
            imageId: parseInt(link.getAttribute("data-image-index") || "0", 10),
          };
          allGalleryItems.push(item);
        }
      });

      // Map to track the starting index for each project in the continuous gallery
      const projectStartIndices: Record<string, number> = {};

      // Calculate starting indices for each project
      allGalleryItems.forEach((item, index) => {
        const projectId = item.projectId.toString();
        if (projectStartIndices[projectId] === undefined) {
          projectStartIndices[projectId] = index;
        }
      });

      // Add click handlers to all thumbnail images and buttons
      document
        .querySelectorAll(".gallery-item, .gallery-trigger")
        .forEach((item) => {
          item.addEventListener("click", (e) => {
            e.preventDefault();

            // Get the project index
            const projectIndex = item.getAttribute("data-project-index");
            if (!projectIndex) return;

            // Find starting index for this project
            const startIndex = projectStartIndices[projectIndex] || 0;

            // Create new PhotoSwipe instance with all images
            const pswp = new PhotoSwipe({
              dataSource: allGalleryItems,
              appendToEl: document.body,
              index: startIndex,
              closeOnVerticalDrag: true,
              loop: true,
              padding: { top: 20, bottom: 20, left: 20, right: 20 },
            });

            // Add custom caption
            pswp.on("uiRegister", () => {
              if (pswp.ui) {
                pswp.ui.registerElement({
                  name: "custom-caption",
                  order: 9,
                  isButton: false,
                  appendTo: "root",
                  html: "",
                  onInit: (el) => {
                    pswp.on("change", () => {
                      if (
                        pswp.currSlide &&
                        pswp.currIndex >= 0 &&
                        pswp.currIndex < allGalleryItems.length
                      ) {
                        const currentItem = allGalleryItems[pswp.currIndex];
                        if (currentItem && currentItem.caption) {
                          el.innerHTML = currentItem.caption;
                        } else {
                          el.innerHTML = "";
                        }
                      }
                    });
                  },
                });
              }
            });

            pswp.init();
          });
        });
    } catch (error) {
      console.error("Failed to initialize PhotoSwipe:", error);
    }
  };

  // Initialize when the DOM is ready
  document.addEventListener("DOMContentLoaded", loadPhotoswipe);
</script>

<style is:global>
  @import "photoswipe/dist/photoswipe.css";

  /* PhotoSwipe Customization */
  .pswp__caption {
    background: rgba(0, 0, 0, 0.85);
    padding: 16px;
    width: 100%;
    position: absolute;
    bottom: 0;
    backdrop-filter: blur(10px);
  }

  .pswp__title {
    color: white;
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
  }

  .pswp__description {
    color: #ccc;
    margin: 4px 0 0;
    font-size: 0.875rem;
  }

  /* Custom PhotoSwipe UI */
  .pswp__custom-caption {
    background: rgba(0, 0, 0, 0.75);
    color: #fff;
    padding: 16px;
    width: 100%;
    position: absolute;
    bottom: 0;
    text-align: center;
    backdrop-filter: blur(5px);
  }

  /* Improve PhotoSwipe loading and transitions */
  .pswp__preloader {
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -20px;
    margin-left: -20px;
  }

  .pswp__img {
    object-fit: contain;
  }
</style>

<style>
  .posts-grid {
    display: grid;
    grid-template-columns: subgrid;
    grid-column: 1 / -1;

    @media (min-width: 768px) {
      & > * {
        grid-column: auto / span 3;
      }
    }
    @media (min-width: 1024px) {
      grid-column: 1 / -1;

      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;

      max-width: 1000px;
      margin: auto;

      & > * {
        grid-column: auto / span 1;
      }
    }
  }
</style>
