---
import Layout from "@/layouts/BaseLayout.astro";
import { Badge } from "@/components/starwind/badge";
import { Button } from "@/components/starwind/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/starwind/card";
import PageSidebar from "@/layouts/PageSidebar.astro";
import { formatForUrl } from "@/utils/blogUtils";

import { SITE_TITLE } from "../consts";
import { getCollection, type CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";

// Get all portfolio items from the collection
const allPortfolioItems = await getCollection("portfolio");

// Filter out draft items (unless in development)
const publishedPortfolioItems = import.meta.env.DEV
  ? allPortfolioItems.filter((item) => !item.data.draft)
  : allPortfolioItems.filter((item) => !item.data.draft);

// Sort projects by date (newest to oldest)
const sortedProjects = publishedPortfolioItems.sort((a, b) => {
    const dateA = new Date(a.data.date);
    const dateB = new Date(b.data.date);
    return dateB.getTime() - dateA.getTime();
});

// Extract all unique tags and categories with counts
const allTags = new Set<string>();
const tagCounts: Record<string, number> = {};
const allCategories = new Set<string>();
const categoryCounts: Record<string, number> = {};

publishedPortfolioItems.forEach((item) => {
  // Process tags
  if (item.data.tags && Array.isArray(item.data.tags)) {
    item.data.tags.forEach((tag) => {
      allTags.add(tag);
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
  }
  
  // Process categories
  if (item.data.category) {
    allCategories.add(item.data.category);
    categoryCounts[item.data.category] = (categoryCounts[item.data.category] || 0) + 1;
  }
});

// Convert Sets to sorted arrays
const sortedTags = Array.from(allTags).sort();
const sortedCategories = Array.from(allCategories).sort();
---

<Layout title={`Portfolio - ${SITE_TITLE}`}>
  <div class="container container--grid mx-auto my-6 px-4 max-w-7xl">
    <!-- Header Section -->
    <header class="header--page">
      <h1>Portfolio</h1>
      <p>A collection of my work and projects</p>
    </header>

    <!-- Sidebar -->
    <PageSidebar
      type="portfolio"
      baseUrl="/portfolio"
      tags={sortedTags}
      tagCounts={tagCounts}
      showCounts={false}
      showHref={false}
      categories={sortedCategories}
      categoryCounts={categoryCounts}
      allItemsCount={publishedPortfolioItems.length}
      formatTagUrl={(tag) => `/portfolio/tag/${formatForUrl(tag)}`}
      formatCategoryUrl={(category) => `/portfolio/category/${formatForUrl(category)}`}
    />
      
    <!-- Portfolio grid -->
    <section class="posts-grid">
      {
        sortedProjects.map((project, projectIndex) => (
          <Card class="card hover:border-primary/50 transition-colors overflow-hidden group">
            <CardHeader class="p-0 mb-3">
              {project.data.thumbnail && (
                <img
                  src={project.data.thumbnail}
                  alt={project.data.title}
                  class="aspect-[4/3] w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
                  loading="lazy"
                />
              )}
            </CardHeader>
            <CardContent class="pb-1">
              <span class="text-sm text-gray-500 dark:text-gray-400 my-2 block">
                 {new Date(project.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long' })}
              </span>
              <CardTitle class="text-balance mb-2">{project.data.title}</CardTitle>
              {project.data.description && (
                <CardDescription class="text-balance">
                  {project.data.description}
                </CardDescription>
              )}
            </CardContent>
            <CardFooter class="flex-col items-start pb-4">
               {project.data.category && (
                  <Badge variant="outline" class="mb-3">{project.data.category}</Badge>
               )}
               {project.data.tags && project.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-1 mb-3">
                  {project.data.tags.slice(0, 3).map((tag) => (
                    <Badge>{tag}</Badge>
                  ))}
                  {project.data.tags.length > 3 && (
                    <span class="text-xs text-gray-500 dark:text-gray-400">
                      +{project.data.tags.length - 3} more
                    </span>
                  )}
                </div>
               )}
               {/* Make the entire card clickable as a gallery trigger */}
               <a
                 href="#"
                 data-project-index={projectIndex}
                 class="stretched-link gallery-trigger"
                 aria-label={`View gallery for ${project.data.title}`}
               />
            </CardFooter>
          </Card>
        ))
      }
    </section>

    <!-- Contact CTA -->
    <section
      class="text-white text-center md:m-16 my-16 p-12 rounded-lg shadow-lg bg-gradient-to-br from-slate-700 to-slate-800"
    >
      <h2 class="text-4xl font-bold mb-4">Interested in working together?</h2>
      <p class="text-lg mb-8">
        Let's discuss your project and bring your ideas to life.
      </p>
      <Button size="lg" href="mailto:jasper.yzh@gmail.com" target="_blank" class="inline-flex items-center">
        <Icon name="bi:envelope-fill" class="h-5 w-5 me-2" /> 
        <span>Get in Touch</span>
      </Button>
    </section>

    <!-- Hidden container with all project images for PhotoSwipe -->
    <div class="hidden">
      <div class="pswp-gallery-all">
        {
          sortedProjects.map((project, projectIndex) =>
            project.data.images && project.data.images.map((image, imageIndex) => (
              <a
                href={image.src}
                data-pswp-width={image.width}
                data-pswp-height={image.height}
                data-global-index={imageIndex + projectIndex * 100}
                data-project-index={projectIndex}
                data-image-index={imageIndex}
                class="gallery-item-hidden"
                data-pswp-caption={`<div class="pswp__title">${project.data.title}</div><div class="pswp__description">${image.caption || ""}</div>`}
              >
                <img
                  src={image.src}
                  alt={image.caption || `Image for ${project.data.title}`}
                  loading="lazy"
                  class="hidden"
                />
              </a>
            ))
          )
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  // Use dynamic imports for better compatibility with build systems
  const loadPhotoswipe = async () => {
    try {
      const PhotoSwipe = (await import("photoswipe")).default;

      // Define gallery item type
      type GalleryItem = {
        src: string;
        width: number;
        height: number;
        alt: string;
        caption: string;
        projectId: number;
        imageId: number;
      };

      // Create a single continuous gallery with all images
      const allGalleryItems: GalleryItem[] = [];

      // Process all images from all projects into a single array
      document.querySelectorAll(".pswp-gallery-all a").forEach((link) => {
        if (link instanceof HTMLAnchorElement) {
          const item: GalleryItem = {
            src: link.href,
            width: parseInt(link.getAttribute("data-pswp-width") || "1920", 10),
            height: parseInt(
              link.getAttribute("data-pswp-height") || "1080",
              10
            ),
            alt: link.querySelector("img")?.alt || "",
            caption: link.getAttribute("data-pswp-caption") || "",
            projectId: parseInt(
              link.getAttribute("data-project-index") || "0",
              10
            ),
            imageId: parseInt(link.getAttribute("data-image-index") || "0", 10),
          };
          allGalleryItems.push(item);
        }
      });

      // Map to track the starting index for each project in the continuous gallery
      const projectStartIndices: Record<string, number> = {};

      // Calculate starting indices for each project
      allGalleryItems.forEach((item, index) => {
        const projectId = item.projectId.toString();
        if (projectStartIndices[projectId] === undefined) {
          projectStartIndices[projectId] = index;
        }
      });

      // Add click handlers to all gallery triggers (the card links)
      document
        .querySelectorAll(".gallery-trigger")
        .forEach((item) => {
          item.addEventListener("click", (e) => {
            e.preventDefault();

            // Get the project index
            const projectIndex = item.getAttribute("data-project-index");
            if (!projectIndex) return;

            // Find starting index for this project
            const startIndex = projectStartIndices[projectIndex] || 0;

            // Create new PhotoSwipe instance with all images
            const pswp = new PhotoSwipe({
              dataSource: allGalleryItems,
              appendToEl: document.body,
              index: startIndex,
              closeOnVerticalDrag: true,
              loop: true,
              padding: { top: 20, bottom: 20, left: 20, right: 20 },
            });

            // Add custom caption
            pswp.on("uiRegister", () => {
              if (pswp.ui) {
                pswp.ui.registerElement({
                  name: "custom-caption",
                  order: 9,
                  isButton: false,
                  appendTo: "root",
                  html: "",
                  onInit: (el) => {
                    pswp.on("change", () => {
                      if (
                        pswp.currSlide &&
                        pswp.currIndex >= 0 &&
                        pswp.currIndex < allGalleryItems.length
                      ) {
                        const currentItem = allGalleryItems[pswp.currIndex];
                        if (currentItem && currentItem.caption) {
                          el.innerHTML = currentItem.caption;
                        } else {
                          el.innerHTML = "";
                        }
                      }
                    });
                  },
                });
              }
            });

            pswp.init();
          });
        });
    } catch (error) {
      console.error("Failed to initialize PhotoSwipe:", error);
    }
  };

  // Initialize when the DOM is ready
  document.addEventListener("DOMContentLoaded", loadPhotoswipe);
</script>

<style is:global>
  @import "photoswipe/dist/photoswipe.css";

  /* PhotoSwipe Customization */
  .pswp__caption {
    background: rgba(0, 0, 0, 0.85);
    padding: 16px;
    width: 100%;
    position: absolute;
    bottom: 0;
    backdrop-filter: blur(10px);
  }

  .pswp__title {
    color: white;
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
  }

  .pswp__description {
    color: #ccc;
    margin: 4px 0 0;
    font-size: 0.875rem;
  }

  /* Custom PhotoSwipe UI */
  .pswp__custom-caption {
    background: rgba(0, 0, 0, 0.75);
    color: #fff;
    padding: 16px;
    width: 100%;
    position: absolute;
    bottom: 0;
    text-align: center;
    backdrop-filter: blur(5px);
  }

  /* Improve PhotoSwipe loading and transitions */
  .pswp__preloader {
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -20px;
    margin-left: -20px;
  }

  .pswp__img {
    object-fit: contain;
  }
</style>

<!-- <style>
  .posts-grid {
    display: grid;
    /* Use subgrid to align items within the parent grid defined in BaseLayout */
    grid-template-columns: subgrid;
    grid-column: 1 / -1;
    gap: 1.5rem; /* Add gap between cards */

    /* Default to 1 column */
    & > * {
        grid-column: auto / span 12;
    }

    /* 2 columns on medium screens */
    @media (min-width: 768px) {
      & > * {
        grid-column: auto / span 6;
      }
    }

    /* 3 columns on large screens */
    @media (min-width: 1024px) {
      /* Account for sidebar */
      grid-column: 4 / -1;
      
      & > * {
        grid-column: auto / span 1;
      }
    }
  }

  .card {
    /* Ensure cards fill the grid cell height */
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  .card > *:last-child {
      margin-top: auto; /* Push footer to bottom */
  }
</style> -->