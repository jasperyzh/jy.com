---
import Layout from "@/layouts/BaseLayout.astro";
import { Badge } from "@/components/starwind/badge";
import ContactCTA from "@/components/ContactCTA.astro";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/starwind/card";
import PageSidebar from "@/layouts/PageSidebar.astro";
import { formatForUrl } from "@/utils/blogUtils";

import FormattedDate from "@/components/FormattedDate.astro";
import { formatYymmddDate } from "@/utils/formatDate";

import { SITE_TITLE } from "../consts";
import { getCollection, type CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";

// Get all portfolio items from the collection
const allPortfolioItems = await getCollection("portfolio");

// Filter out draft items (unless in development)
const publishedPortfolioItems = import.meta.env.DEV
  ? allPortfolioItems.filter((item) => !item.data.draft)
  : allPortfolioItems.filter((item) => !item.data.draft);

// Sort projects by date (newest to oldest)
const sortedProjects = publishedPortfolioItems.sort((a, b) => {
  // Primary sort: by 'order' property (ascending), treat missing order as high value
  const orderA = a.data.order ?? Infinity;
  const orderB = b.data.order ?? Infinity;

  console.log(orderA, orderB);

  if (orderA !== orderB) {
    return orderA - orderB;
  }

  // Secondary sort: by date (descending - newest first) if orders are equal or missing
  const dateA = new Date(a.data.date);
  const dateB = new Date(b.data.date);
  return dateB.getTime() - dateA.getTime();
});

// Extract all unique tags and categories with counts
const allTags = new Set<string>();
const tagCounts: Record<string, number> = {};
const allCategories = new Set<string>();
const categoryCounts: Record<string, number> = {};

publishedPortfolioItems.forEach((item) => {
  // Process tags
  if (item.data.tags && Array.isArray(item.data.tags)) {
    item.data.tags.forEach((tag) => {
      allTags.add(tag);
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
  }

  // Process categories
  if (item.data.category) {
    allCategories.add(item.data.category);
    categoryCounts[item.data.category] =
      (categoryCounts[item.data.category] || 0) + 1;
  }
});

// Convert Sets to sorted arrays
const sortedTags = Array.from(allTags).sort();
const sortedCategories = Array.from(allCategories).sort();
---

<Layout title={`Portfolio - ${SITE_TITLE}`}>
  <div class="container container--grid mx-auto my-6 px-4 max-w-7xl">
    <!-- Header Section -->
    <header class="header--page">
      <h1>Portfolio</h1>
      <p>A collection of my work and projects</p>
    </header>

    <!-- Sidebar -->
    <PageSidebar
      type="portfolio"
      baseUrl="/portfolio"
      tags={sortedTags}
      tagCounts={tagCounts}
      showCounts={false}
      showHref={false}
      categories={sortedCategories}
      categoryCounts={categoryCounts}
      allItemsCount={publishedPortfolioItems.length}
      formatTagUrl={(tag) => `/portfolio/tag/${formatForUrl(tag)}`}
      formatCategoryUrl={(category) =>
        `/portfolio/category/${formatForUrl(category)}`}
    />

    <!-- Portfolio grid -->
    <section class="posts-grid">
      {
        sortedProjects.map((project, projectIndex) => (
          <Card class="card hover:border-primary/50 transition-colors overflow-hidden group lg:!col-span-3">
            {project.data.thumbnail && (
              <figure class="overflow-hidden">
                <img
                  src={project.data.thumbnail}
                  alt={project.data.title}
                  class="object-cover w-full h-full aspect-[4/3] transform group-hover:scale-104 transition-transform duration-200"
                  loading="lazy"
                />
              </figure>
            )}

            <div class="card-content pb-5 md:py-4">
              <CardHeader class="py-0">
                {/* <time class={`font-mono text-lg `}>
                  {project.data.date &&
                    formatYymmddDate(project.data.date).toLocaleDateString(
                      "en-US",
                      {
                        year: "numeric",
                        month: "long",
                      }
                    )}
                </time> */}
                <CardTitle class="text-balance mb-2">
                  {project.data.title}
                </CardTitle>
              </CardHeader>

              <CardContent class="pb-1">
                {project.data.description && (
                  <CardDescription class="text-balance mb-4">
                    {project.data.description}
                  </CardDescription>
                )}
              </CardContent>
              <CardFooter class="flex-col items-start py-0">
                <div class="flex flex-wrap gap-2">
                  {project.data.category && (
                    <Badge variant="ghost" size="lg">
                      {project.data.category}
                    </Badge>
                  )}
                  {project.data.tags &&
                    project.data.tags.length > 0 &&
                    project.data.tags.map((tag) => (
                      <Badge>{tag}</Badge>
                    ))}
                </div>
              </CardFooter>
            </div>
            <a
              href="#"
              data-project-index={projectIndex}
              class="stretched-link gallery-trigger"
              aria-label={`View gallery for ${project.data.title}`}
            />
          </Card>
        ))
      }
    </section>

    <ContactCTA />

    <!-- Hidden container with all project images for PhotoSwipe -->
    <div class="hidden">
      <div class="pswp-gallery-all">
        {
          sortedProjects.map(
            (project, projectIndex) =>
              project.data.images &&
              project.data.images.map((image, imageIndex) => (
                <a
                  href={image.src}
                  data-pswp-width={image.width}
                  data-pswp-height={image.height}
                  data-global-index={imageIndex + projectIndex * 100}
                  data-project-index={projectIndex}
                  data-image-index={imageIndex}
                  class="gallery-item-hidden"
                  data-pswp-caption={`<div class="pswp__title">${project.data.title}</div><div class="pswp__description">${image.caption || ""}</div>`}
                >
                  <img
                    src={image.src}
                    alt={image.caption || `Image for ${project.data.title}`}
                    loading="lazy"
                    class="hidden"
                  />
                </a>
              ))
          )
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  // Use dynamic imports for better compatibility with build systems
  const loadPhotoswipe = async () => {
    try {
      const PhotoSwipe = (await import("photoswipe")).default;

      // Define gallery item type
      type GalleryItem = {
        src: string;
        width: number;
        height: number;
        alt: string;
        caption: string;
        projectId: number;
        imageId: number;
      };

      // Create a single continuous gallery with all images
      const allGalleryItems: GalleryItem[] = [];

      // Process all images from all projects into a single array
      document.querySelectorAll(".pswp-gallery-all a").forEach((link) => {
        if (link instanceof HTMLAnchorElement) {
          const item: GalleryItem = {
            src: link.href,
            width: parseInt(link.getAttribute("data-pswp-width") || "1920", 10),
            height: parseInt(
              link.getAttribute("data-pswp-height") || "1080",
              10
            ),
            alt: link.querySelector("img")?.alt || "",
            caption: link.getAttribute("data-pswp-caption") || "",
            projectId: parseInt(
              link.getAttribute("data-project-index") || "0",
              10
            ),
            imageId: parseInt(link.getAttribute("data-image-index") || "0", 10),
          };
          allGalleryItems.push(item);
        }
      });

      // Map to track the starting index for each project in the continuous gallery
      const projectStartIndices: Record<string, number> = {};

      // Calculate starting indices for each project
      allGalleryItems.forEach((item, index) => {
        const projectId = item.projectId.toString();
        if (projectStartIndices[projectId] === undefined) {
          projectStartIndices[projectId] = index;
        }
      });

      // Add click handlers to all gallery triggers (the card links)
      document.querySelectorAll(".gallery-trigger").forEach((item) => {
        item.addEventListener("click", (e) => {
          e.preventDefault();

          // Get the project index
          const projectIndex = item.getAttribute("data-project-index");
          if (!projectIndex) return;

          // Find starting index for this project
          const startIndex = projectStartIndices[projectIndex] || 0;

          // Create new PhotoSwipe instance with all images
          const pswp = new PhotoSwipe({
            dataSource: allGalleryItems,
            appendToEl: document.body,
            index: startIndex,
            closeOnVerticalDrag: true,
            loop: true,
            padding: { top: 20, bottom: 20, left: 20, right: 20 },
          });

          // Add custom caption
          pswp.on("uiRegister", () => {
            if (pswp.ui) {
              pswp.ui.registerElement({
                name: "custom-caption",
                order: 9,
                isButton: false,
                appendTo: "root",
                html: "",
                onInit: (el) => {
                  pswp.on("change", () => {
                    if (
                      pswp.currSlide &&
                      pswp.currIndex >= 0 &&
                      pswp.currIndex < allGalleryItems.length
                    ) {
                      const currentItem = allGalleryItems[pswp.currIndex];
                      if (currentItem && currentItem.caption) {
                        el.innerHTML = currentItem.caption;
                      } else {
                        el.innerHTML = "";
                      }
                    }
                  });
                },
              });
            }
          });

          pswp.init();
        });
      });
    } catch (error) {
      console.error("Failed to initialize PhotoSwipe:", error);
    }
  };

  // Initialize when the DOM is ready
  document.addEventListener("DOMContentLoaded", loadPhotoswipe);
</script>

<style is:global>
  @import "photoswipe/dist/photoswipe.css";

  /* PhotoSwipe Customization */
  .pswp__caption {
    background: rgba(0, 0, 0, 0.85);
    padding: 16px;
    width: 100%;
    position: absolute;
    bottom: 0;
    backdrop-filter: blur(10px);
  }

  .pswp__title {
    color: white;
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
  }

  .pswp__description {
    color: #ccc;
    margin: 4px 0 0;
    font-size: 0.875rem;
  }

  /* Custom PhotoSwipe UI */
  .pswp__custom-caption {
    background: rgba(0, 0, 0, 0.75);
    color: #fff;
    padding: 16px;
    width: 100%;
    position: absolute;
    bottom: 0;
    text-align: center;
    backdrop-filter: blur(5px);
  }

  /* Improve PhotoSwipe loading and transitions */
  .pswp__preloader {
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -20px;
    margin-left: -20px;
  }

  .pswp__img {
    object-fit: contain;
  }
</style>
