---
import { getCollection } from "astro:content";
import PageSketch from "@/layouts/PageSketch.astro";
import { getSketchFullUrl, getCategoryUrl } from "@/utils/sketchUtils";

// Pagination configuration
export const SKETCHES_PER_PAGE = 9;

// Get all sketches (excluding drafts)
const allSketches = await getCollection("sketches", ({ data }) => !data.draft);

// Sort sketches by date (newest first)
const sortedSketches = allSketches.sort((a, b) => {
  const dateA =
    a.data.pubDate instanceof Date ? a.data.pubDate : new Date(a.data.pubDate);
  const dateB =
    b.data.pubDate instanceof Date ? b.data.pubDate : new Date(b.data.pubDate);
  return dateB.getTime() - dateA.getTime();
});

// Calculate pagination for first page
const totalPages = Math.ceil(sortedSketches.length / SKETCHES_PER_PAGE);
const currentPage = 1;
const start = 0;
const end = start + SKETCHES_PER_PAGE;
const paginatedSketches = sortedSketches.slice(start, end);

// Calculate previous and next page URLs
const prevUrl = currentPage > 1 ? `/sketches/page/${currentPage - 1}` : null;
const nextUrl =
  currentPage < totalPages ? `/sketches/page/${currentPage + 1}` : null;

// Extract all categories and tags for filtering
const categories = [
  ...new Set(sortedSketches.map((sketch) => sketch.data.category)),
];
const allTags = sortedSketches.flatMap((sketch) => sketch.data.tags || []);
const tags = [...new Set(allTags)].sort();

// Calculate count for each category
const categoryCounts = {};
categories.forEach((category) => {
  categoryCounts[category] = sortedSketches.filter(
    (sketch) => sketch.data.category === category
  ).length;
});

// Calculate count for each tag
const tagCounts = {};
tags.forEach((tag) => {
  tagCounts[tag] = sortedSketches.filter(
    (sketch) => sketch.data.tags && sketch.data.tags.includes(tag)
  ).length;
});
---

<PageSketch
  title="Sketches - Code & Design Ideas"
  description="A collection of code sketches, design experiments, and interactive demos"
  currentPage={currentPage}
  totalPages={totalPages}
  prevUrl={prevUrl}
  nextUrl={nextUrl}
  paginatedSketches={paginatedSketches}
  categories={categories}
  tags={tags}
  categoryCounts={categoryCounts}
  tagCounts={tagCounts}
  baseUrl="/sketches"
  allSketchesCount={sortedSketches.length}
/>
