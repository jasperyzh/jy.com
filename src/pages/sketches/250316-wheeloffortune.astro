---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { audioPlayer } from "@/scripts/custom-tone.js";
---

<BaseLayout title="Wheel of Fortune">
  <main>
    <h1>Wheel of Fortune</h1>

    <div id="app"></div>
    <div id="confetti-container"></div>

    <!-- Volume Control UI -->
    <div class="audio-controls">
      <label for="volume-slider">Volume:</label>
      <input type="range" id="volume-slider" min="0" max="100" value="40" />
      <button id="mute-toggle">ðŸ”Š</button>
    </div>
  </main>
</BaseLayout>

<style is:global>
  .wheel-container {
    position: relative;
    margin: 20px auto;
    width: 300px;
    height: 300px;
  }

  .wheel {
    position: relative;
    width: 300px;
    height: 300px;
    border-radius: 50%;
    border: 5px solid #333;
    transform-origin: 50% 50%;
    transition: transform 5s ease-out;
    overflow: hidden;
  }

  /* Each segment forms a wedge. */
  .segment {
    position: absolute;
    width: 100%;
    height: 100%;
    transform-origin: 50% 50%;
    clip-path: polygon(50% 50%, 0% 0%, 50% 0%);
    display: flex;
    justify-content: center;
    align-items: flex-start;
  }

  .segment-text {
    transform: rotate(90deg) translate(-10px, -8px);
    transform-origin: 0% bottom;
    margin-top: 0px;
    font-size: 14px;
    font-weight: bold;
    text-align: center;
    width: 60px;
  }

  .pointer {
    position: absolute;
    width: 0;
    height: 0;
    border-left: 15px solid transparent;
    border-right: 15px solid transparent;
    border-bottom: 25px solid red;
    top: -10px;
    left: 50%;
    transform: translateX(-31%) rotate(-180deg);
    z-index: 10;
  }

  button {
    margin-top: 20px;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    background-color: #4caf50;
    color: white;
    border: none;
    border-radius: 4px;
    transition: background-color 0.3s;
  }

  button:hover:not(:disabled) {
    background-color: #45a049;
  }

  button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }

  .result {
    margin-top: 20px;
    text-align: center;
    position: relative;
  }

  #confetti-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    overflow: hidden;
    z-index: 999;
  }

  .confetti-piece {
    position: absolute;
    width: 10px;
    height: 10px;
    animation: fall 3s linear forwards;
    opacity: 0;
  }

  @keyframes fall {
    0% {
      transform: translateY(-50px) rotate(0deg);
      opacity: 1;
    }

    100% {
      transform: translateY(100vh) rotate(360deg);
      opacity: 0;
    }
  }

  .audio-controls {
    position: fixed;
    bottom: 20px;
    right: 20px;
    display: flex;
    align-items: center;
    gap: 10px;
    background-color: rgba(255, 255, 255, 0.8);
    padding: 10px;
    border-radius: 5px;
    z-index: 100;
  }

  .audio-controls button {
    margin: 0;
    padding: 5px 10px;
  }
</style>

<script>
  // Import Vue in the client-side script
  import {
    createApp,
    ref,
    computed,
    onUnmounted,
  } from "vue/dist/vue.esm-bundler.js";
  import { audioPlayer } from "@/scripts/custom-tone.js";

  // Create a wheel of fortune component
  const WheelOfFortune = {
    template: `
      <div class="wheel-container">
        <div class="wheel" :style="{ transform: 'rotate(' + rotation + 'deg)' }">
          <div v-for="(cuisine, index) in cuisines" :key="index" class="segment" :style="getSegmentStyle(index)">
            <span class="segment-text">{{ cuisine }}</span>
          </div>
        </div>
        <div class="pointer"></div>
      </div>

      <button @click="spinWheel" :disabled="isSpinning">Spin the Wheel</button>

      <div v-if="winner" class="result">
        <h2>Winner: {{ winner }}</h2>
      </div>
    `,
    data() {
      return {
        cuisines: [
          "Italian",
          "Chinese",
          "Indian",
          "Mexican",
          "Japanese",
          "Thai",
          "French",
          "Mediterranean",
        ],
        rotation: 0,
        isSpinning: false,
        winner: null,
      };
    },
    methods: {
      getSegmentStyle(index) {
        const segmentAngle = 360 / this.cuisines.length;
        return {
          transform: `rotate(${index * segmentAngle}deg)`,
          backgroundColor: index % 2 === 0 ? "#f8b400" : "#ffe8a1",
        };
      },
      async spinWheel() {
        if (this.isSpinning) return;

        this.isSpinning = true;
        this.winner = null;

        // Initialize audio on game start
        if (!audioPlayer.initialized) {
          try {
            await audioPlayer.init();
            audioPlayer.setVolume(0.4);
            console.log("Audio initialized on game start");
          } catch (error) {
            console.error("Failed to initialize audio:", error);
          }
        }

        // Play spin sound
        audioPlayer.playMelody([
          { note: "G3", duration: "8n" },
          { note: "C4", duration: "8n" }
        ], 240); // Faster tempo for quick sound effect

        const spins = Math.floor(Math.random() * 5) + 5; // Random spins: 5 to 9
        const randomAngle = Math.random() * 360; // Random offset angle
        const totalRotation = spins * 360 + randomAngle;

        const segmentAngle = 360 / this.cuisines.length; // Angle of each segment
        const pointerCorrection = segmentAngle / 2; // Align pointer to the center of a segment
        const initialOffset = -80; // Adjust for initial -90-degree offset

        const finalAngle = (this.rotation + totalRotation) % 360; // Final rotation angle
        const adjustedAngle =
          (finalAngle + pointerCorrection + initialOffset) % 360; // Correct for pointer and offset

        // Calculate the winning segment index
        const winnerIndex = Math.floor(
          (this.cuisines.length - adjustedAngle / segmentAngle) %
            this.cuisines.length
        );

        this.rotation += totalRotation;

        // Match timeout duration with the CSS transition
        setTimeout(() => {
          this.winner = this.cuisines[winnerIndex];
          this.isSpinning = false;
          this.showConfetti();
          // Play win sound
          audioPlayer.playCorrect();
        }, 5000);
      },
      showConfetti() {
        const confettiContainer = document.querySelector("#confetti-container");
        if (!confettiContainer) return;

        confettiContainer.innerHTML = "";
        for (let i = 0; i < 100; i++) {
          const confetti = document.createElement("div");
          confetti.className = "confetti-piece";
          confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;
          confetti.style.left = Math.random() * 100 + "%";
          confetti.style.animationDelay = Math.random() + "s";
          confettiContainer.appendChild(confetti);
        }

        setTimeout(() => {
          confettiContainer.innerHTML = "";
        }, 3000);
      },
    },
  };

  // Initialize Vue app after the DOM is fully loaded
  document.addEventListener("DOMContentLoaded", () => {
    const app = createApp({
      components: {
        WheelOfFortune,
      },
      setup() {
        // Volume control logic
        const volume = ref(40);
        const isMuted = ref(false);

        const updateVolume = () => {
          if (isMuted.value) {
            audioPlayer.mute();
          } else {
            audioPlayer.unmute();
            audioPlayer.setVolume(volume.value / 100);
          }
        };

        // Initialize audio volume
        updateVolume();

        return {
          volume,
          isMuted,
          toggleMute() {
            isMuted.value = !isMuted.value;
            updateVolume();
            document.getElementById("mute-toggle").textContent = isMuted.value
              ? "ðŸ”‡"
              : "ðŸ”Š";
          },
        };
      },
      template: `
        <wheel-of-fortune></wheel-of-fortune>
      `,
    });

    app.mount("#app");

    // Set up volume control event listeners
    const volumeSlider = document.getElementById("volume-slider");
    const muteToggle = document.getElementById("mute-toggle");

    if (volumeSlider) {
      volumeSlider.addEventListener("input", (e) => {
        const app = document.getElementById("app").__vue_app__;
        if (app) {
          const volume = parseInt(e.target.value);
          app._instance.setupState.volume = volume;
          app._instance.setupState.isMuted = volume === 0;
          muteToggle.textContent = volume === 0 ? "ðŸ”‡" : "ðŸ”Š";
          if (volume === 0) {
            audioPlayer.mute();
          } else {
            audioPlayer.unmute();
            audioPlayer.setVolume(volume / 100);
          }
        }
      });
    }

    if (muteToggle) {
      muteToggle.addEventListener("click", () => {
        const app = document.getElementById("app").__vue_app__;
        if (app) {
          app._instance.setupState.toggleMute();
        }
      });
    }
  });
</script>
