---
/**
 * Paginated sketches page
 * Handles routes like /sketches/page/2, /sketches/page/3, etc.
 */
import { getCollection } from "astro:content";
import SketchPage from "@/layouts/SketchPage.astro";
import { SKETCHES_PER_PAGE } from "../index.astro";

// Define props and generate static paths
export async function getStaticPaths() {
  const allSketches = await getCollection("sketches");

  // Sort sketches by date (newest first)
  const sortedSketches = allSketches.sort((a, b) => {
    const dateA = a.data.date instanceof Date ? a.data.date : new Date(a.data.date);
    const dateB = b.data.date instanceof Date ? b.data.date : new Date(b.data.date);
    return dateB.getTime() - dateA.getTime();
  });

  // Calculate total number of pages
  const totalPages = Math.ceil(sortedSketches.length / SKETCHES_PER_PAGE);

  // Generate an array of page numbers [1, 2, 3, ...]
  return Array.from({ length: totalPages }).map((_, i) => {
    const page = i + 1;
    const start = i * SKETCHES_PER_PAGE;
    const end = start + SKETCHES_PER_PAGE;

    return {
      params: { page: page.toString() },
      props: {
        sketches: sortedSketches.slice(start, end),
        totalSketches: sortedSketches.length,
        currentPage: page,
        totalPages,
        allSketches: sortedSketches, // Pass all sketches for filtering categories/tags
      },
    };
  });
}

// Define page props
const { sketches, totalSketches, currentPage, totalPages, allSketches } = Astro.props;

// Calculate pagination URLs
const prevUrl =
  currentPage > 1
    ? currentPage === 2
      ? "/sketches" 
      : `/sketches/page/${currentPage - 1}`
    : null;
const nextUrl =
  currentPage < totalPages ? `/sketches/page/${currentPage + 1}` : null;

// Extract all categories and tags for filtering
const categories = [...new Set(allSketches.map(sketch => sketch.data.category))];
const allTags = allSketches.flatMap(sketch => sketch.data.tags || []);
const tags = [...new Set(allTags)].sort();

// Calculate count for each category
const categoryCounts = {};
categories.forEach(category => {
  categoryCounts[category] = allSketches.filter(sketch => 
    sketch.data.category === category
  ).length;
});

// Calculate count for each tag
const tagCounts = {};
tags.forEach(tag => {
  tagCounts[tag] = allSketches.filter(sketch => 
    sketch.data.tags && sketch.data.tags.includes(tag)
  ).length;
});

export const prerender = true;
---

<SketchPage
  title={`Sketches - Page ${currentPage}`}
  description="A collection of code sketches, design experiments, and interactive demos"
  currentPage={currentPage}
  totalPages={totalPages}
  prevUrl={prevUrl}
  nextUrl={nextUrl}
  paginatedSketches={sketches}
  categories={categories}
  tags={tags}
  categoryCounts={categoryCounts}
  tagCounts={tagCounts}
  baseUrl="/sketches"
  allSketchesCount={totalSketches}
/> 