---
/**
 * Paginated sketches page
 * Handles routes like /sketches/page/2, /sketches/page/3, etc.
 */
import Layout from "@/layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import Pagination from "@/components/Pagination.astro";
import { formatYymmddDate } from "@/utils/formatDate";
import { getSketchFullUrl, getCategoryUrl } from "@/utils/sketchUtils";
import { Button } from "@/components/starwind/button";
import { Badge } from "@/components/starwind/badge";

// Import the sketches per page constant from sketches index
import { SKETCHES_PER_PAGE } from "../index.astro";

// Define props and generate static paths
export async function getStaticPaths() {
  const allSketches = await getCollection("sketches");

  // Sort sketches by date (newest first)
  const sortedSketches = allSketches.sort((a, b) => {
    const dateA = a.data.date instanceof Date ? a.data.date : new Date(a.data.date);
    const dateB = b.data.date instanceof Date ? b.data.date : new Date(b.data.date);
    return dateB.getTime() - dateA.getTime();
  });

  // Calculate total number of pages
  const totalPages = Math.ceil(sortedSketches.length / SKETCHES_PER_PAGE);

  // Generate an array of page numbers [1, 2, 3, ...]
  return Array.from({ length: totalPages }).map((_, i) => {
    const page = i + 1;
    const start = i * SKETCHES_PER_PAGE;
    const end = start + SKETCHES_PER_PAGE;

    return {
      params: { page: page.toString() },
      props: {
        sketches: sortedSketches.slice(start, end),
        totalSketches: sortedSketches.length,
        currentPage: page,
        totalPages,
        allSketches: sortedSketches, // Pass all sketches for filtering categories/tags
      },
    };
  });
}

// Define page props
const { sketches, totalSketches, currentPage, totalPages, allSketches } = Astro.props;

// Calculate pagination URLs
const prevUrl =
  currentPage > 1
    ? currentPage === 2
      ? "/sketches" 
      : `/sketches/page/${currentPage - 1}`
    : null;
const nextUrl =
  currentPage < totalPages ? `/sketches/page/${currentPage + 1}` : null;

// Extract all categories and tags for filtering
const categories = [...new Set(allSketches.map(sketch => sketch.data.category))];
const allTags = allSketches.flatMap(sketch => sketch.data.tags || []);
const tags = [...new Set(allTags)].sort();

// Calculate count for each category
const categoryCounts = {};
categories.forEach(category => {
  categoryCounts[category] = allSketches.filter(sketch => 
    sketch.data.category === category
  ).length;
});

// Calculate count for each tag
const tagCounts = {};
tags.forEach(tag => {
  tagCounts[tag] = allSketches.filter(sketch => 
    sketch.data.tags && sketch.data.tags.includes(tag)
  ).length;
});

export const prerender = true;
---

<Layout title={`Sketches - Page ${currentPage}`} description="A collection of code sketches, design experiments, and interactive demos">
  <main class="max-w-7xl mx-auto px-4 py-8">
    <header class="mb-12 text-center">
      <h1 class="text-4xl font-bold mb-4">Code Sketches</h1>
      <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
        A collection of code snippets, design experiments, interactive demos, and learning resources
      </p>
    </header>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Filters sidebar -->
      <aside class="lg:col-span-1">
        <div class="sticky top-24 bg-white dark:bg-slate-800 p-6 rounded-lg shadow-md border border-slate-200 dark:border-slate-700">
          <h2 class="text-xl font-semibold mb-4">Filters</h2>
          
          <!-- Categories -->
          <div class="mb-6">
            <h3 class="font-medium mb-2 text-gray-700 dark:text-gray-300">Categories</h3>
            <ul class="space-y-2">
              {categories.map(category => (
                <li>
                  <a 
                    href={getCategoryUrl(category)}
                    class="flex items-center justify-between group hover:text-blue-600 dark:hover:text-blue-400"
                  >
                    <span>{category}</span>
                    <span class="text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full">
                      {categoryCounts[category]}
                    </span>
                  </a>
                </li>
              ))}
            </ul>
          </div>
          
          <!-- Tags -->
          <div>
            <h3 class="font-medium mb-2 text-gray-700 dark:text-gray-300">Popular Tags</h3>
            <div class="flex flex-wrap gap-2">
              {tags.slice(0, 15).map(tag => (
                <a 
                  href={`/sketches/tag/${tag}`}
                  class="inline-flex items-center text-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 px-3 py-1 rounded-full"
                >
                  <span>{tag}</span>
                  <span class="ml-1 text-xs text-gray-500 dark:text-gray-400">({tagCounts[tag]})</span>
                </a>
              ))}
              {tags.length > 15 && (
                <a href="/sketches/tags" class="text-sm text-blue-600 dark:text-blue-400 hover:underline">
                  View all tags...
                </a>
              )}
            </div>
          </div>
        </div>
      </aside>
      
      <!-- Sketches grid -->
      <div class="lg:col-span-3">
        <!-- Page information -->
        <div class="mb-6 text-sm text-gray-500 dark:text-gray-400">
          Showing {sketches.length} of {totalSketches} sketches
          {totalPages > 1 && ` (Page ${currentPage} of ${totalPages})`}
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
          {sketches.map(sketch => (
            <a 
              href={getSketchFullUrl(sketch)}
              class="group bg-white dark:bg-slate-800 rounded-lg overflow-hidden shadow-md border border-slate-200 dark:border-slate-700 hover:shadow-lg transition-shadow"
            >
              {sketch.data.thumbnail ? (
                <div class="relative h-48 overflow-hidden">
                  <img 
                    src={sketch.data.thumbnail} 
                    alt={sketch.data.title}
                    class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
                  />
                  {sketch.data.status && (
                    <span class={`absolute top-2 right-2 text-xs px-2 py-1 rounded-full ${
                      sketch.data.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' :
                      sketch.data.status === 'wip' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' :
                      sketch.data.status === 'idea' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300' :
                      'bg-gray-100 text-gray-800 dark:bg-gray-800/50 dark:text-gray-400'
                    }`}>
                      {sketch.data.status.charAt(0).toUpperCase() + sketch.data.status.slice(1)}
                    </span>
                  )}
                </div>
              ) : (
                <div class="h-48 flex items-center justify-center bg-gradient-to-br from-blue-500/20 to-purple-500/20 dark:from-blue-900/30 dark:to-purple-900/30">
                  <span class="text-4xl opacity-40">‚ú®</span>
                  {sketch.data.status && (
                    <span class={`absolute top-2 right-2 text-xs px-2 py-1 rounded-full ${
                      sketch.data.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' :
                      sketch.data.status === 'wip' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' :
                      sketch.data.status === 'idea' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300' :
                      'bg-gray-100 text-gray-800 dark:bg-gray-800/50 dark:text-gray-400'
                    }`}>
                      {sketch.data.status.charAt(0).toUpperCase() + sketch.data.status.slice(1)}
                    </span>
                  )}
                </div>
              )}
              
              <div class="p-4">
                <h3 class="font-bold text-lg mb-1 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                  {sketch.data.title}
                </h3>
                <div class="text-sm text-gray-500 dark:text-gray-400 mb-2 flex items-center">
                  <i class="bi bi-calendar-event mr-1"></i>
                  <time datetime={sketch.data.date instanceof Date ? sketch.data.date.toISOString() : ''}>
                    {formatYymmddDate(sketch.data.date).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric'
                    })}
                  </time>
                </div>
                <p class="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
                  {sketch.data.description}
                </p>
                <div class="flex flex-wrap gap-1 mt-auto">
                  {sketch.data.tags && sketch.data.tags.slice(0, 3).map(tag => (
                    <span class="text-xs bg-gray-100 dark:bg-gray-700 px-2 py-0.5 rounded">
                      {tag}
                    </span>
                  ))}
                  {sketch.data.tags && sketch.data.tags.length > 3 && (
                    <span class="text-xs text-gray-500 dark:text-gray-400">
                      +{sketch.data.tags.length - 3} more
                    </span>
                  )}
                </div>
              </div>
            </a>
          ))}
        </div>
        
        <!-- Empty State -->
        {sketches.length === 0 && (
          <div class="text-center py-12">
            <div class="text-6xl mb-4">üìù</div>
            <h3 class="text-2xl font-bold mb-2">No sketches found</h3>
            <p class="text-gray-600 dark:text-gray-300">
              There are no sketches available at the moment. Please check back later.
            </p>
          </div>
        )}
        
        <!-- Pagination controls -->
        {(prevUrl || nextUrl) && (
          <div class="mt-12 flex justify-center">
            <Pagination {prevUrl} {nextUrl} {currentPage} {totalPages} baseUrl="/sketches" />
          </div>
        )}
      </div>
    </div>
  </main>
</Layout> 