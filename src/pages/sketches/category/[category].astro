---
import { getCollection } from "astro:content";
import SketchPage from "@/layouts/SketchPage.astro";
import { getAllCategories, unslugify, getSketchFullUrl, slugify, getTagUrl } from "@/utils/sketchUtils";

// Generate static paths for all categories
export async function getStaticPaths() {
  const sketches = await getCollection("sketches", ({ data }) => !data.draft);
  const categories = getAllCategories(sketches);

  return categories.map(category => ({
    params: { category: slugify(category) },
    props: { 
      category,
      sketches: sketches.filter(sketch => sketch.data.category === category),
      allSketches: sketches
    }
  }));
}

const { category, sketches, allSketches } = Astro.props;
const title = `Sketches in ${category}`;

// Extract all categories and tags for filtering
const categories = [...new Set(allSketches.map(sketch => sketch.data.category))];
const allTags = allSketches.flatMap(sketch => sketch.data.tags || []);
const tags = [...new Set(allTags)].sort();

// Calculate count for each category
const categoryCounts = {};
categories.forEach(cat => {
  categoryCounts[cat] = allSketches.filter(sketch => 
    sketch.data.category === cat
  ).length;
});

// Calculate count for each tag
const tagCounts = {};
tags.forEach(tag => {
  tagCounts[tag] = allSketches.filter(sketch => 
    sketch.data.tags && sketch.data.tags.includes(tag)
  ).length;
});

// Add prerender directive
export const prerender = true;
---

<SketchPage
  title={title}
  description={`Collection of code sketches in the ${category} category`}
  pageSubtitle={`Category: ${category}`}
  paginatedSketches={sketches}
  categories={categories}
  tags={tags}
  categoryCounts={categoryCounts}
  tagCounts={tagCounts}
  baseUrl="/sketches"
  allSketchesCount={allSketches.length}
  activeCategory={category}
/> 