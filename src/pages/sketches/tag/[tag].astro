---
import { getCollection } from "astro:content";
import PageSketch from "@/layouts/PageSketch.astro";
import { getAllTags, unslugify, getSketchFullUrl, slugify, getTagUrl, getCategoryUrl } from "@/utils/sketchUtils";

// Generate static paths for all tags
export async function getStaticPaths() {
  const sketches = await getCollection("sketches", ({ data }) => !data.draft);
  const tags = getAllTags(sketches);

  return tags.map(tag => ({
    params: { tag: slugify(tag) },
    props: { 
      tag,
      sketches: sketches.filter(sketch => sketch.data.tags?.includes(tag)),
      allSketches: sketches
    }
  }));
}

const { tag, sketches, allSketches } = Astro.props;
const title = `Sketches tagged with "${tag}"`;

// Extract all categories and tags for filtering
const categories = [...new Set(allSketches.map(sketch => sketch.data.category))];
const allTags = allSketches.flatMap(sketch => sketch.data.tags || []);
const tags = [...new Set(allTags)].sort();

// Calculate count for each category
const categoryCounts = {};
categories.forEach(category => {
  categoryCounts[category] = allSketches.filter(sketch => 
    sketch.data.category === category
  ).length;
});

// Calculate count for each tag
const tagCounts = {};
tags.forEach(t => {
  tagCounts[t] = allSketches.filter(sketch => 
    sketch.data.tags && sketch.data.tags.includes(t)
  ).length;
});

// Add prerender directive
export const prerender = true;
---

<PageSketch
  title={title}
  description={`Collection of code sketches tagged with "${tag}"`}
  pageSubtitle={`Tag: ${tag}`}
  paginatedSketches={sketches}
  categories={categories}
  tags={tags}
  categoryCounts={categoryCounts}
  tagCounts={tagCounts}
  baseUrl="/sketches"
  allSketchesCount={allSketches.length}
  activeTag={tag}
/> 