<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>250103-cssanimations</title>
        <style>
            html,
            body {
                height: 100%;
                width: 100%;
                margin: 0;
                padding: 0;
                font-family: sans-serif;
                font-size: 18px;
                line-height: 1.6;
            }

            *,
            *:before,
            *:after {
                box-sizing: border-box;
                position: relative;
            }

            input,
            button {
                font-size: inherit;
            }

            ul {
                list-style: none;
                padding: 0;
                margin: 0;
            }

            figure {
                margin: 0;
            }

            button {
                appearance: none;
            }

            /* // reduce or no-preference */
            @media (prefers-reduced-motion: reduce) {
                * {
                    animation-duration: 0s !important;
                    transition-duration: 0s !important;
                }
            }
        </style>
    </head>
    <body>
        <ol>
            <li>
                <a href="#fundamentals">fundamentals</a>
                why animations? duration, delay, timing function / easing
            </li>
            <li><a href="#transitions">transitions</a></li>
            <li><a href="#keyframe-animations">keyframe animations</a></li>
            <li><a href="#choreography">choreography</a></li>
            <li><a href="#states">states</a></li>
            <li><a href="#layout-animations">layout animations</a></li>
            <li><a href="#reactive-animations">reactive animations</a></li>
            <li><a href="#inflight-examples">inflight examples</a></li>
        </ol>
        <!-- 
        
        <section id="fundamentals">
            <div class="ball"></div>
            <pre>
.ball 
    animation: slide-right 0.8s cubic-bezier(0.42, 0, 0.69, 1) infinite
        alternate;
@keyframes slide-right 
    from 
        transform: translateX(0);
    to 
        transform: translateX(50vw);
            </pre>
        </section> 

        <section id="transitions">
            <form class="ui-form">
                <input
                    class="ui-input"
                    type="email"
                    placeholder="your@email.com"
                    style="--i: 0"
                />
                <button
                    class="ui-button"
                    type="button"
                    onclick="setState('subscribing')"
                    style="--i: 1"
                >
                    <span>Subscribe</span>
                </button>
            </form>
        </section>
        <style>
            #transitions {
                --color-gray: #8c97b7;
                --color-blue: #1c38f1;
                --color-green: #1fcdb0;
                --input-height: 3rem;
                --duration: 0.3s;
                --stagger: 0.1s;
                --interval: calc(var(--duration) - var(--stagger));

                .ui-form {
                    background: #fff;
                    box-shadow: 0 0.5rem 1rem #0003;
                    padding: 1rem;
                    border-radius: 0.25rem;
                    display: grid;
                    grid-template-columns: 1fr auto;
                    grid-template-rows: 1fr;
                    grid-column-gap: 1rem;
                    grid-template-areas: "input button";

                    animation-name: slide-up;
                    animation-duration: var(--duration);
                    animation-timing-function: ease-in-out;

                    --color: var(--color-gray);
                    &:focus-within {
                        --color: var(--color-blue);
                    }

                    > .ui-input,
                    > .ui-button {
                        animation-name: slide-up;
                        animation-duration: var(--duration);
                        animation-timing-function: ease-in-out;
                        animation-delay: var(--duration);
                        animation-fill-mode: both;
                    }

                    > .ui-input {
                        animation-delay: calc(var(--duration) * 0.5);
                    }
                    > .ui-button {
                        animation-delay: calc(var(--duration) * 0.5 + var(--duration));
                    }


                /* .ball {
                    animation: choreograph-move-right var(--duration)
                        both;
                } */
                }

                .ui-input {
                    grid-area: input;
                    padding: 0 1rem;
                    height: var(--input-height);
                    border: 2px solid var(--color);
                    border-radius: 0.25rem;
                    outline: none;
                    transition-property: border;
                    transition-duration: var(--duration);

                    &:invalid:not(:focus) {
                        animation: shake var(--duration);
                    }
                }

                .ui-button {
                    grid-area: button;
                    border: none;
                    padding: 0 1rem;
                    color: white;
                    font-weight: bold;
                    border-radius: 0.25rem;
                    height: var(--input-height);
                    background-color: var(--color);
                    transition-property: background-color, opacity, transform;
                    transition-duration: 0.3s, 0.3s, 0.1s;
                    transition-timing-function: linear, linear, ease-in-out;
                    cursor: pointer;

                    &:hover {
                        opacity: 0.9;
                    }
                    &:active {
                        transform: translateY(-15%);
                    }
                }

                [data-show]:not([data-active]) {
                    display: none;
                }

                .ui-form {
                    overflow: hidden;
                }
            }
            @keyframes slide-up {
                from {
                    opacity: 0;
                    transform: translateY(10%);
                }
                50%,
                to {
                    opacity: 1;
                }
                to {
                    transform: none;
                }
            }
            @keyframes shake {
                from,
                to {
                    transform: none;
                }
                10%,
                30%,
                50%,
                70%,
                90% {
                    transform: translateX(-10px);
                }

                20%,
                40%,
                60%,
                80% {
                    transform: translateX(10px);
                }
            }
        </style>
        <section id="keyframes">
            <div class="ball"></div>
        </section>
        <style>
            #keyframes {
                .ball {
                    /* animation: move-like-a-square 1s infinite linear; */
                    animation-name: move-like-a-square, green-to-red;
                    animation-duration: 2s;
                    animation-delay: 0.5s;
                    animation-timing-function: linear;
                    animation-iteration-count: infinite;
                    /* animation-fill-mode: forwards; */
                    /* animation-fill-mode: backwards; */
                    animation-fill-mode: both;
                    /* animation-direction: reverse; */
                    animation-direction: alternate-reverse;
                }
            }
            @keyframes move-like-a-square {
                from,
                to {
                    transform: translateX(0) translateY(0);
                }
                25% {
                    animation-timing-function: ease-in;
                    transform: translateX(100px) translateY(0);
                }
                50% {
                    transform: translateX(100px) translateY(100px);
                }
                75% {
                    transform: translateX(0) translateY(100px);
                }
            }
            @keyframes green-to-red {
                from {
                    background: green;
                }
                to {
                    background: red;
                }
            }
        </style>

        <section id="choreography">
            <div class="ball" style="--i: 0"></div>
            <div class="ball" style="--i: 1"></div>
            <div class="ball" style="--i: 2"></div>
            <div class="ball" style="--i: 3"></div>
            <div class="ball" style="--i: 4"></div>
        </section>
        <style>
            #choreography {
                --duration: 1s;
                --stagger: 0.8s;
                --interval: calc(var(--duration) - var(--stagger));
                .ball {
                    animation: choreograph-move-right var(--duration)
                        calc(var(--interval) * var(--i)) both;
                }
                /* .ball:nth-child(2) {
                    animation-delay: calc(var(--duration) - var(--stagger));
                }
                .ball:nth-child(3) {
                    animation-delay: calc(
                        var(--duration) * 2 - var(--stagger) * 2
                    );
                } */
            }
            @keyframes choreograph-move-right {
                from {
                    transform: translateX(0);
                }
                to {
                    transform: translateX(25vw);
                }
            }
        </style>
        -->

        <section id="states">
            <button class="button">click</button>

            <form class="ui-form" data-state="subscribe">
                <input
                    class="ui-input"
                    type="email"
                    placeholder="your@email.com"
                />
                <button
                    class="ui-button"
                    type="button"
                >
                    <span data-show="subscribe">Subscribe</span>
                    <span data-show="subscribing">Subscribing</span>
                    <span data-show="success">Success!</span>
                    <span data-show="error">Error</span>
                </button>
            </form>
        </section>

        <style>
            #states {
                --color-gray: #8c97b7;
                --color-blue: #1c38f1;
                --color-green: #1fcdb0;
                --input-height: 3rem;
                --transition-duration: 0.3s;
                --transition-easing: cubic-bezier(0.5, 0, 0.5, 1);
                --animation-duration: 0.8s;

                padding: 3rem;
                --bg: #ddd;

                &[data-state="loading"] {
                    --bg: #eedbae;
                }
                &[data-state="success"] {
                    --bg: green;
                }

                background: var(--bg);

                .button {
                    --color: #cc00aa;
                    --color-hover: #fe932a;

                    background: var(--color);
                    color: white;
                    font-weight: bold;
                    padding: 2rem 3rem;
                    border: none;
                    transition: all 0.3s;
                    cursor: pointer;

                    &:hover {
                        background: var(--color-hover);
                    }
                }

                .ui-form {
                    background: #fff;
                    box-shadow: 0 0.5rem 1rem #0003;
                    padding: 1rem;
                    border-radius: 0.25rem;
                    display: grid;
                    grid-template-columns: 1fr auto;
                    grid-template-rows: 1fr;
                    grid-column-gap: 1rem;
                    grid-template-areas: "input button";
                    transition: all var(--transition-duration)
                        var(--transition-easing);
                    will-change: transform;
                    --color: var(--color-gray);

                    &:focus-within {
                        --color: var(--color-blue);
                    }

                    &[data-state="subscribe"] {
                        /* // Add an animation here */
                        animation: slide-up var(--animation-duration) both;
                    }

                    &[data-state="success"] {
                        --color: green;
                        /* // Change the color and/or add an animation here */
                        animation: shake-success calc(var(--animation-duration) *2) both;
                    }

                    &[data-state="error"] {
                        --color: red;
                        /* // Change the color and/or add an animation here */
                        animation: shake var(--animation-duration) both;
                    }

                    > .ui-input,
                    > .ui-button {
                        animation-name: slide-up;
                        animation-fill-mode: both;
                        animation-timing-function: var(--transition-easing);
                        animation-delay: calc(var(--animation-duration) / 2);
                    }

                    > .ui-input {
                        animation-duration: 0.5s;
                    }
                    > .ui-button {
                        animation-duration: 0.6s;
                    }
                }

                .ui-input {
                    grid-area: input;
                    padding: 0 1rem;
                    height: var(--input-height);
                    border: 2px solid var(--color);
                    border-radius: 0.25rem;
                    outline: none;
                    transition: inherit;
                }

                .ui-button {
                    grid-area: button;
                    border: none;
                    padding: 0 1rem;
                    color: white;
                    font-weight: bold;
                    border-radius: 0.25rem;
                    height: var(--input-height);
                    background-color: var(--color);
                    transition: inherit;
                }

                [data-show]:not([data-active]) {
                    display: none;
                }

                .ui-form {
                    overflow: hidden;
                }
            }

            @keyframes slide-up {
                from {
                    opacity: 0;
                    transform: translateY(100%);
                }
                to {
                    opacity: 1;
                    transform: none;
                }
            }

            @keyframes shake {
                20%,
                40%,
                60%,
                80% {
                    transform: translateX(1%);
                }
                10%,
                30%,
                50%,
                70%,
                90% {
                    transform: translateX(-1%);
                }
                from,
                to {
                    transform: none;
                }
            }
            @keyframes shake-success {
                20%,
                40%,
                60%,
                80% {
                    transform: translateY(1%);
                }
                10%,
                30%,
                50%,
                70%,
                90% {
                    transform: translateY(-1%);
                }
                from,
                to {
                    transform: none;
                }
            }
        </style>

        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const getApp = document.getElementById("states");
                if (!getApp) return;

                const button = getApp.querySelector(".button");
                if (!button) return;

                const machine = {
                    initial: "start",
                    states: {
                        start: {
                            on: {
                                CLICK: "loading",
                            },
                        },
                        loading: {
                            on: {
                                CLICK: "success",
                            },
                        },
                        success: {
                            on: {
                                CLICK: "loading",
                            },
                        },
                    },
                };

                button.addEventListener("click", () => {
                    const currentState =
                        getApp.dataset.state ?? machine.initial;
                    const nextState =
                        machine.states[currentState].on["CLICK"] ??
                        currentState;

                    getApp.dataset.state = nextState;
                });

                const formEl = document.querySelector(".ui-form");


                const uiButton = formEl.querySelector(".ui-button");

                uiButton.addEventListener("click", () => {
                    setState("subscribing");
                });

                function setState(state) {
                    const active = document.querySelectorAll(`[data-active]`);

                    active.forEach(
                        (activeEl) => delete activeEl.dataset.active,
                    );

                    formEl.dataset.state = state;

                    const show = document.querySelectorAll(
                        `[data-show="${state}"]`,
                    );

                    show.forEach((el) => {
                        el.dataset.active = true;
                    });

                    if (state === "subscribing") {
                        setTimeout(() => {
                            if (Math.random() < 0.5) {
                                setState("error");
                            } else {
                                setState("success");
                            }
                        }, 2000);
                    }
                }

                setState("subscribe");
            });
        </script>
    </body>
</html>
<style>
    :root {
        --duration: 0.8s;
        --easing: cubic-bezier(0.42, 0, 0.69, 1);
    }
    .ball {
        height: 5vmin;
        width: 5vmin;
        border-radius: 50%;
        background: radial-gradient(circle at bottom right, #fb2324, #fe932a);
    }

    section {
        padding: 3rem 0;
    }

    section:nth-child(odd) .ball {
        background: blue;
    }

    section:nth-child(even) .ball {
        background: radial-gradient(circle at bottom right, #fb2324, #fe932a);
    }

    #fundamentals {
        .ball {
            animation: slide-right var(--duration) var(--easing) infinite
                alternate;
        }
    }
    #transitions {
        .ball {
            transform: scale(1);
            transform-origin: top left;
            transition-property: background, transform;
            transition-duration: 0.4s;
            transition-delay: 0.5s;

            transition-timing-function: linear, var(--easing);
        }
        .ball:hover {
            transition-duration: var(--duration), 2s;
            transform: scale(2);
            /* background: lime; */
            background: radial-gradient(circle at bottom right, lime, lime);
            opacity: 0.5;
        }
    }

    @keyframes slide-right {
        from {
            transform: translateX(0);
        }
        to {
            transform: translateX(50vw);
        }
    }
</style>
