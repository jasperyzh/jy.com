---
import BaseLayout from "@/layouts/BaseLayout.astro";
---

<BaseLayout title="Interactive Survey Form">
  <main class="interactive-survey-form">
    <h1>Exercise Page - Survey Form</h1>
    <p>
      [250316-survey_form] This page contains an interactive Survey Form
      component using Vue 3.
    </p>

    <div id="app"></div>
  </main>
</BaseLayout>

<script>
  // Import Vue from CDN in the client-side script
  import {
    createApp,
    ref,
    computed,
    onMounted,
  } from "vue/dist/vue.esm-bundler.js";
  import { audioPlayer } from "@/scripts/custom-tone.js";

  const App = {
    setup() {
      // Audio is imported from custom-tone.js

      // Current page tracking
      const currentPage = ref(0);

      // Survey questions - 8 placeholder questions
      const questions = [
        // Page 1 - First 4 questions
        [
          "I feel confident using new technology.",
          "I prefer digital communication over in-person meetings.",
          "I believe artificial intelligence will improve our lives significantly.",
          "I am concerned about my online privacy.",
        ],
        // Page 2 - Next 4 questions
        [
          "Social media has a positive impact on society.",
          "Remote work is more productive than office work.",
          "Online learning is as effective as traditional classroom learning.",
          "I regularly take breaks from screen time to protect my mental health.",
        ],
      ];

      // Response options
      const responseOptions = [
        { value: 5, label: "Strongly Agree" },
        { value: 4, label: "Agree" },
        { value: 3, label: "Neutral" },
        { value: 2, label: "Disagree" },
        { value: 1, label: "Strongly Disagree" },
      ];

      // User responses
      const responses = ref({
        // Initialize with empty arrays for each page of questions
        page1: Array(questions[0].length).fill(null),
        page2: Array(questions[1].length).fill(null),
        // User details
        userInfo: {
          email: "",
          name: "",
          phone: "",
        },
      });

      // Form validation
      const isPage1Valid = computed(() => {
        return responses.value.page1.every((response) => response !== null);
      });

      const isPage2Valid = computed(() => {
        return responses.value.page2.every((response) => response !== null);
      });

      const isUserInfoValid = computed(() => {
        // Only email is required
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(responses.value.userInfo.email);
      });

      // Debug mode
      const showDebug = ref(false);
      const isSubmitted = ref(false);

      // Methods for navigation
      const startSurvey = () => {
        playSound("start");
        currentPage.value = 1;
      };

      const goToPage = (page) => {
        playSound("navigation");
        currentPage.value = page;
      };

      const submitSurvey = () => {
        if (isUserInfoValid.value) {
          playSound("success");
          isSubmitted.value = true;
          currentPage.value = 4; // Show results page
        }
      };

      const getSatisfactionScore = () => {
        const allResponses = [
          ...responses.value.page1,
          ...responses.value.page2,
        ];
        const sum = allResponses.reduce((total, val) => total + val, 0);
        const avg = sum / allResponses.length;
        return avg.toFixed(1);
      };

      const getResponseLabel = (value) => {
        const option = responseOptions.find((opt) => opt.value === value);
        return option ? option.label : "Not Answered";
      };

      // Sound effects
      const playSound = (type) => {
        if (!audioPlayer) return;

        switch (type) {
          case "start":
            // Using playMelody with proper format for sequential notes
            audioPlayer.playMelody([
              { note: "C4", duration: "8n" },
              { note: "E4", duration: "8n" },
              { note: "G4", duration: "4n" },
            ]);
            break;
          case "navigation":
            audioPlayer.playMelody([
              { note: "E4", duration: "8n" },
              { note: "G4", duration: "8n" },
            ]);
            break;
          case "success":
            audioPlayer.playCorrect(); // Using built-in success sound
            break;
          case "error":
            // Simple error sound
            audioPlayer.playMelody([
              { note: "E4", duration: "8n" },
              { note: "C4", duration: "4n" },
            ]);
            break;
        }
      };

      // Initialize audio when component mounts
      onMounted(() => {
        // Initialize audio on user interaction to satisfy browser autoplay policies
        const initAudio = async () => {
          try {
            if (audioPlayer) {
              await audioPlayer.init();
              audioPlayer.setVolume(0.5);
              console.log("Audio initialized successfully");
            }
          } catch (e) {
            console.error("Audio initialization failed:", e);
          }
        };

        // Wait for user interaction before initializing audio
        document.addEventListener("click", initAudio, { once: true });
      });

      return {
        currentPage,
        questions,
        responseOptions,
        responses,
        isPage1Valid,
        isPage2Valid,
        isUserInfoValid,
        showDebug,
        isSubmitted,
        startSurvey,
        goToPage,
        submitSurvey,
        getSatisfactionScore,
        getResponseLabel,
      };
    },
    template: `
      <div class="survey-container">
        <!-- Welcome Page -->
        <div v-if="currentPage === 0" class="welcome-page">
          <h1>Welcome to Our Survey</h1>
          <div class="card">
            <h2>Your Opinion Matters</h2>
            <p>This survey aims to collect your thoughts on technology and digital life. It will take approximately 3-5 minutes to complete.</p>
            <p>Your responses will help us understand how people interact with and feel about technology in their daily lives.</p>
            <button class="btn btn-primary" @click="startSurvey">Start Survey</button>
          </div>
        </div>
        
        <!-- Questions Page 1 -->
        <div v-if="currentPage === 1" class="questions-page">
          <h2>Part 1: Technology Usage</h2>
          <div class="progress-bar">
            <div class="progress" style="width: 25%"></div>
          </div>
          <div class="card">
            <div v-for="(question, index) in questions[0]" :key="'q1-'+index" class="question-item">
              <h3>{{ index + 1 }}. {{ question }}</h3>
              <div class="options-grid">
                <div 
                  v-for="option in responseOptions" 
                  :key="option.value"
                  class="option-item"
                  :class="{ selected: responses.page1[index] === option.value }"
                  @click="responses.page1[index] = option.value"
                >
                  {{ option.label }}
                </div>
              </div>
            </div>
            <div class="navigation-buttons">
              <button class="btn btn-secondary" @click="goToPage(0)">Back</button>
              <button class="btn btn-primary" @click="goToPage(2)" :disabled="!isPage1Valid">Next</button>
            </div>
          </div>
        </div>
        
        <!-- Questions Page 2 -->
        <div v-if="currentPage === 2" class="questions-page">
          <h2>Part 2: Digital Life</h2>
          <div class="progress-bar">
            <div class="progress" style="width: 50%"></div>
          </div>
          <div class="card">
            <div v-for="(question, index) in questions[1]" :key="'q2-'+index" class="question-item">
              <h3>{{ index + 5 }}. {{ question }}</h3>
              <div class="options-grid">
                <div 
                  v-for="option in responseOptions" 
                  :key="option.value"
                  class="option-item"
                  :class="{ selected: responses.page2[index] === option.value }"
                  @click="responses.page2[index] = option.value"
                >
                  {{ option.label }}
                </div>
              </div>
            </div>
            <div class="navigation-buttons">
              <button class="btn btn-secondary" @click="goToPage(1)">Back</button>
              <button class="btn btn-primary" @click="goToPage(3)" :disabled="!isPage2Valid">Next</button>
            </div>
          </div>
        </div>
        
        <!-- User Info Page -->
        <div v-if="currentPage === 3" class="user-info-page">
          <h2>Almost Done!</h2>
          <div class="progress-bar">
            <div class="progress" style="width: 75%"></div>
          </div>
          <div class="card">
            <p>Please provide your contact information. Only email is required.</p>
            
            <div class="form-group">
              <label for="email">Email Address *</label>
              <input 
                type="email" 
                id="email" 
                v-model="responses.userInfo.email" 
                placeholder="your@email.com" 
                required
              >
              <div class="form-error" v-if="responses.userInfo.email && !isUserInfoValid">
                Please enter a valid email address
              </div>
            </div>
            
            <div class="form-group">
              <label for="name">Full Name (Optional)</label>
              <input 
                type="text" 
                id="name" 
                v-model="responses.userInfo.name" 
                placeholder="John Doe"
              >
            </div>
            
            <div class="form-group">
              <label for="phone">Phone Number (Optional)</label>
              <input 
                type="tel" 
                id="phone" 
                v-model="responses.userInfo.phone" 
                placeholder="+123 456 7890"
              >
            </div>
            
            <div class="form-group checkbox-group">
              <input type="checkbox" id="debug" v-model="showDebug">
              <label for="debug">Show debug information</label>
            </div>
            
            <div class="navigation-buttons">
              <button class="btn btn-secondary" @click="goToPage(2)">Back</button>
              <button class="btn btn-success" @click="submitSurvey()" :disabled="!isUserInfoValid">Submit Survey</button>
            </div>
          </div>
        </div>
        
        <!-- Thank You & Results Page -->
        <div v-if="currentPage === 4" class="results-page">
          <div class="card thank-you-card">
            <h2>Thank You for Completing the Survey!</h2>
            <div class="progress-bar">
              <div class="progress" style="width: 100%"></div>
            </div>
            <p>Your responses have been recorded successfully.</p>
            <p>Your overall satisfaction score: <span class="highlight">{{ getSatisfactionScore() }} / 5</span></p>
            
            <!-- Debug Information -->
            <div v-if="showDebug" class="debug-section">
              <h3>Debug Information</h3>
              <div class="debug-card">
                <h4>User Information:</h4>
                <pre>{{ JSON.stringify(responses.userInfo, null, 2) }}</pre>
                
                <h4>Question Responses:</h4>
                <table class="responses-table">
                  <thead>
                    <tr>
                      <th>Question</th>
                      <th>Response</th>
                      <th>Value</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr v-for="(value, index) in responses.page1" :key="'p1-'+index">
                      <td>{{ index + 1 }}. {{ questions[0][index] }}</td>
                      <td>{{ getResponseLabel(value) }}</td>
                      <td>{{ value }}</td>
                    </tr>
                    <tr v-for="(value, index) in responses.page2" :key="'p2-'+index">
                      <td>{{ index + 5 }}. {{ questions[1][index] }}</td>
                      <td>{{ getResponseLabel(value) }}</td>
                      <td>{{ value }}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
            
            <button class="btn btn-primary" @click="goToPage(0)">Start a New Survey</button>
          </div>
        </div>
      </div>
    `,
  };

  // Create and mount the Vue app when the document is loaded
  document.addEventListener("DOMContentLoaded", () => {
    const app = createApp(App);
    app.mount("#app");
  });
</script>

<style is:global>
  .interactive-survey-form {
    #app {
      max-width: 800px;
      margin: 0 auto;
      padding: 2rem;
    }

    .fade-enter-active,
    .fade-leave-active {
      transition: opacity 0.3s;
    }

    .fade-enter-from,
    .fade-leave-to {
      opacity: 0;
    }

    /* Survey Form Styles */
    .survey-container {
      font-family: var(--font-family);
    }

    .card {
      background: var(--white);
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .welcome-page h1 {
      font-size: 2.5rem;
      color: var(--secondary);
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .welcome-page p {
      font-size: 1.1rem;
      margin-bottom: 1.5rem;
      line-height: 1.6;
    }

    .btn {
      padding: 0.8rem 1.5rem;
      border: none;
      border-radius: 4px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 1rem;
    }

    .btn-primary {
      background-color: var(--primary);
      color: white;
    }

    .btn-primary:hover {
      background-color: var(--primary-dark);
    }

    .btn-primary:disabled {
      background-color: #7a8bb8;
      cursor: not-allowed;
    }

    .btn-secondary {
      background-color: #e9ecef;
      color: var(--dark-gray);
    }

    .btn-secondary:hover {
      background-color: #dee2e6;
    }

    .btn-success {
      background-color: var(--success);
      color: white;
    }

    .btn-success:hover {
      background-color: #05b485;
    }

    .btn-success:disabled {
      background-color: #7ccfb9;
      cursor: not-allowed;
    }

    .progress-bar {
      height: 8px;
      background-color: #e9ecef;
      border-radius: 4px;
      margin-bottom: 2rem;
      overflow: hidden;
    }

    .progress {
      height: 100%;
      background-color: var(--primary);
      border-radius: 4px;
      transition: width 0.3s ease;
    }

    .question-item {
      margin-bottom: 2rem;
    }

    .question-item h3 {
      font-size: 1.2rem;
      margin-bottom: 1rem;
      color: var(--dark-gray);
    }

    .options-grid {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 10px;
      margin-bottom: 1rem;
    }

    @media (max-width: 768px) {
      .options-grid {
        grid-template-columns: 1fr;
      }
    }

    .option-item {
      /* background-color: #f8f9fa; */
      border: 2px solid #e9ecef;
      border-radius: 4px;
      padding: 10px;
      text-align: center;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .option-item:hover {
      border-color: var(--primary);
    }

    .option-item.selected {
      /* background-color: #e6f2ff; */
      border-color: var(--primary);
      /* color: var(--primary); */
      font-weight: bold;
    }

    .navigation-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 2rem;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 600;
    }

    .form-group input {
      width: 100%;
      padding: 0.8rem;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 1rem;
    }

    .form-group input:focus {
      border-color: var(--primary);
      outline: none;
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
    }

    .form-error {
      color: var(--danger);
      font-size: 0.9rem;
      margin-top: 0.5rem;
    }

    .checkbox-group {
      display: flex;
      align-items: center;
    }

    .checkbox-group input {
      width: auto;
      margin-right: 10px;
    }

    .checkbox-group label {
      margin-bottom: 0;
    }

    .thank-you-card {
      text-align: center;
    }

    .highlight {
      font-weight: bold;
      color: var(--primary);
      font-size: 1.2rem;
    }

    .debug-section {
      text-align: left;
      margin-top: 2rem;
      padding-top: 2rem;
      border-top: 1px solid #e9ecef;
    }

    .debug-card {
      background-color: #f8f9fa;
      border-radius: 4px;
      padding: 1rem;
      margin-bottom: 1rem;
      font-family: monospace;
      text-align: left;
    }

    pre {
      background-color: #f1f3f5;
      padding: 1rem;
      border-radius: 4px;
      overflow-x: auto;
      white-space: pre-wrap;
    }

    .responses-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }

    .responses-table th,
    .responses-table td {
      border: 1px solid #dee2e6;
      padding: 0.75rem;
      text-align: left;
    }

    .responses-table th {
      background-color: #e9ecef;
    }

    .responses-table tr:nth-child(even) {
      background-color: #f8f9fa;
    }
  }
</style>
