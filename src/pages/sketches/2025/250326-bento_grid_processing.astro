---
import BaseLayout from "@/layouts/BaseLayout.astro";

const sketch_title = "Bento Grid Processing";
---

<BaseLayout title={sketch_title}>
  <main class="bento-sketches container mx-auto">
    <h1>{sketch_title}</h1>

    <h1>Interactive Bento Grid Art Gallery</h1>

    <div class="controls">
      <button id="loadAll">Load All Artworks</button>
      <button id="resetAll">Reset All</button>
    </div>

    <div class="bento-grid">
      <div class="grid-item" id="item1">
        <div class="sketch-placeholder">Fractal Tree</div>
        <button class="play-button" data-target="item1">Play</button>
      </div>
      <div class="grid-item" id="item2">
        <div class="sketch-placeholder">Circle Packing</div>
        <button class="play-button" data-target="item2">Play</button>
      </div>
      <div class="grid-item" id="item3">
        <div class="sketch-placeholder">Noisy Waves</div>
        <button class="play-button" data-target="item3">Play</button>
      </div>
      <div class="grid-item" id="item4">
        <div class="sketch-placeholder">Particles</div>
        <button class="play-button" data-target="item4">Play</button>
      </div>
      <div class="grid-item" id="item5">
        <div class="sketch-placeholder">Moire Pattern</div>
        <button class="play-button" data-target="item5">Play</button>
      </div>
      <div class="grid-item" id="item6">
        <div class="sketch-placeholder">Random Walk</div>
        <button class="play-button" data-target="item6">Play</button>
      </div>
    </div>
  </main>
</BaseLayout>

<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"
></script>
<style>
  .bento-sketches {
    h1 {
      text-align: center;
      margin-bottom: 30px;
      color: #333;
    }
    .controls {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-bottom: 20px;
    }
    button {
      padding: 10px 20px;
      background-color: #4caf50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      transition: background-color 0.3s;
    }
    button:hover {
      background-color: #45a049;
    }
    .bento-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-auto-rows: minmax(200px, auto);
      gap: 16px;
      max-width: 1200px;
      margin: 0 auto;
    }
    .grid-item {
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      position: relative;
      background-color: white;
    }
    .grid-item:nth-child(1) {
      grid-column: span 2;
      grid-row: span 1;
    }
    .grid-item:nth-child(2) {
      grid-column: span 1;
      grid-row: span 1;
    }
    .grid-item:nth-child(3) {
      grid-column: span 1;
      grid-row: span 2;
    }
    .grid-item:nth-child(4) {
      grid-column: span 1;
      grid-row: span 1;
    }
    .grid-item:nth-child(5) {
      grid-column: span 1;
      grid-row: span 1;
    }
    .grid-item:nth-child(6) {
      grid-column: span 2;
      grid-row: span 1;
    }
    .sketch-placeholder {
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: #e8e8e8;
      color: #666;
      font-weight: bold;
    }
    .play-button {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 10px 20px;
      background-color: rgba(76, 175, 80, 0.8);
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      z-index: 10;
      opacity: 0;
      transition: opacity 0.3s;
    }
    .grid-item:hover .play-button {
      opacity: 1;
    }
  }
</style>

<script is:inline>
  const sketches = {
    item1: function (sketch) {
      let angle;
      sketch.setup = function () {
        const container = document.getElementById("item1");
        const canvas = sketch.createCanvas(
          container.offsetWidth,
          container.offsetHeight
        );
        canvas.parent("item1");
        angle = sketch.PI / 4;
        sketch.background(255);
        sketch.stroke(0);
      };

      sketch.draw = function () {
        sketch.background(255);
        sketch.translate(sketch.width / 2, sketch.height);
        branch(120);
      };

      function branch(len) {
        sketch.line(0, 0, 0, -len);
        sketch.translate(0, -len);

        if (len > 4) {
          sketch.push();
          sketch.rotate(angle);
          branch(len * 0.67);
          sketch.pop();

          sketch.push();
          sketch.rotate(-angle);
          branch(len * 0.67);
          sketch.pop();
        }
      }
    },
    item2: function (sketch) {
      let circles = [];
      sketch.setup = function () {
        const container = document.getElementById("item2");
        const canvas = sketch.createCanvas(
          container.offsetWidth,
          container.offsetHeight
        );
        canvas.parent("item2");
        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);
        sketch.noStroke();
      };

      sketch.draw = function () {
        sketch.background(0, 0, 95);
        let newCircle = createCircle();
        if (newCircle) circles.push(newCircle);

        for (let circle of circles) {
          if (circle.growing) {
            if (circle.edges()) {
              circle.growing = false;
            } else {
              for (let other of circles) {
                if (circle !== other) {
                  let d = sketch.dist(circle.x, circle.y, other.x, other.y);
                  if (d - 2 < circle.r + other.r) {
                    circle.growing = false;
                    break;
                  }
                }
              }
            }
          }
          circle.show();
          circle.grow();
        }
      };

      function createCircle() {
        let x = sketch.random(sketch.width);
        let y = sketch.random(sketch.height);
        let valid = true;

        for (let circle of circles) {
          let d = sketch.dist(x, y, circle.x, circle.y);
          if (d < circle.r) {
            valid = false;
            break;
          }
        }

        if (valid) {
          return new Circle(x, y);
        } else {
          return null;
        }
      }

      class Circle {
        constructor(x, y) {
          this.x = x;
          this.y = y;
          this.r = 1;
          this.growing = true;
          this.hue = sketch.random(360);
        }

        show() {
          sketch.fill(this.hue, 80, 80);
          sketch.ellipse(this.x, this.y, this.r * 2);
        }

        grow() {
          if (this.growing) {
            this.r += 0.5;
          }
        }

        edges() {
          return (
            this.x + this.r > sketch.width ||
            this.x - this.r < 0 ||
            this.y + this.r > sketch.height ||
            this.y - this.r < 0
          );
        }
      }
    },
    item3: function (sketch) {
      let yoff = 0;
      sketch.setup = function () {
        const container = document.getElementById("item3");
        const canvas = sketch.createCanvas(
          container.offsetWidth,
          container.offsetHeight
        );
        canvas.parent("item3");
        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);
      };

      sketch.draw = function () {
        sketch.background(200, 20, 100);
        sketch.noFill();
        sketch.beginShape();

        let xoff = 0;
        for (let x = 0; x <= sketch.width; x += 20) {
          let y = sketch.map(
            sketch.noise(xoff, yoff),
            0,
            1,
            100,
            sketch.height - 100
          );
          let hue = sketch.map(x, 0, sketch.width, 0, 360);
          sketch.stroke(hue, 80, 80);
          sketch.vertex(x, y);
          xoff += 0.05;
        }
        yoff += 0.01;
        sketch.vertex(sketch.width, sketch.height);
        sketch.vertex(0, sketch.height);
        sketch.endShape(sketch.CLOSE);
      };
    },
    item4: function (sketch) {
      let particles = [];
      sketch.setup = function () {
        const container = document.getElementById("item4");
        const canvas = sketch.createCanvas(
          container.offsetWidth,
          container.offsetHeight
        );
        canvas.parent("item4");
        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);

        for (let i = 0; i < 100; i++) {
          particles.push(new Particle());
        }
      };

      sketch.draw = function () {
        sketch.background(0, 0, 0, 0.1);
        for (let particle of particles) {
          particle.update();
          particle.show();
          particle.edges();
          particle.repel();
        }
      };

      class Particle {
        constructor() {
          this.pos = sketch.createVector(
            sketch.random(sketch.width),
            sketch.random(sketch.height)
          );
          this.vel = p5.Vector.random2D().mult(0.5);
          this.acc = sketch.createVector(0, 0);
          this.maxspeed = 2;
          this.hue = sketch.random(360);
          this.r = 3;
        }

        update() {
          this.vel.add(this.acc);
          this.vel.limit(this.maxspeed);
          this.pos.add(this.vel);
          this.acc.mult(0);
        }

        applyForce(force) {
          this.acc.add(force);
        }

        show() {
          sketch.noStroke();
          sketch.fill(this.hue, 80, 80);
          sketch.ellipse(this.pos.x, this.pos.y, this.r * 2);
        }

        edges() {
          if (this.pos.x > sketch.width) this.pos.x = 0;
          if (this.pos.x < 0) this.pos.x = sketch.width;
          if (this.pos.y > sketch.height) this.pos.y = 0;
          if (this.pos.y < 0) this.pos.y = sketch.height;
        }

        repel() {
          let mouse = sketch.createVector(sketch.mouseX, sketch.mouseY);
          let dir = p5.Vector.sub(this.pos, mouse);
          let d = dir.mag();
          if (d < 100) {
            dir.setMag(sketch.map(d, 0, 100, 2, 0));
            this.applyForce(dir);
          }
        }
      }
    },
    item5: function (sketch) {
      let angle = 0;
      let lines = 20;
      sketch.setup = function () {
        const container = document.getElementById("item5");
        const canvas = sketch.createCanvas(
          container.offsetWidth,
          container.offsetHeight
        );
        canvas.parent("item5");
        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);
      };

      sketch.draw = function () {
        sketch.background(0);
        sketch.translate(sketch.width / 2, sketch.height / 2);
        angle += 0.005;

        for (let i = 0; i < lines; i++) {
          let a = angle + sketch.map(i, 0, lines, 0, sketch.PI * 2);
          let hue = sketch.map(i, 0, lines, 0, 360);
          sketch.stroke(hue, 80, 80);

          let x = sketch.cos(a) * 100;
          let y = sketch.sin(a) * 100;
          let x2 = sketch.cos(a + sketch.PI) * 100;
          let y2 = sketch.sin(a + sketch.PI) * 100;

          for (let j = 0; j < 50; j++) {
            let offset = j * 10;
            sketch.line(
              x + sketch.cos(a + j * 0.1) * offset,
              y + sketch.sin(a + j * 0.1) * offset,
              x2 + sketch.cos(a + sketch.PI + j * 0.1) * offset,
              y2 + sketch.sin(a + sketch.PI + j * 0.1) * offset
            );
          }
        }
      };
    },
    item6: function (sketch) {
      let walker;
      let steps = [];
      let maxSteps = 500;
      let hue = 0;
      sketch.setup = function () {
        const container = document.getElementById("item6");
        const canvas = sketch.createCanvas(
          container.offsetWidth,
          container.offsetHeight
        );
        canvas.parent("item6");
        sketch.colorMode(sketch.HSB, 360, 100, 100, 1);
        walker = new Walker();
      };

      sketch.draw = function () {
        sketch.background(0, 0, 10, 0.1);
        walker.step();
        walker.show();

        steps.push({ x: walker.x, y: walker.y });
        if (steps.length > maxSteps) {
          steps.shift();
        }

        sketch.noFill();
        sketch.beginShape();
        for (let i = 0; i < steps.length; i++) {
          let alpha = sketch.map(i, 0, steps.length, 0, 1);
          let colHue = (hue + i) % 360;
          sketch.stroke(colHue, 80, 80, alpha);
          sketch.vertex(steps[i].x, steps[i].y);
        }
        sketch.endShape();

        hue = (hue + 0.5) % 360;
      };

      class Walker {
        constructor() {
          this.x = sketch.width / 2;
          this.y = sketch.height / 2;
          this.tx = 0;
          this.ty = 10000;
        }

        step() {
          this.x = sketch.map(sketch.noise(this.tx), 0, 1, 0, sketch.width);
          this.y = sketch.map(sketch.noise(this.ty), 0, 1, 0, sketch.height);
          this.tx += 0.005;
          this.ty += 0.005;
        }

        show() {
          sketch.stroke(0, 100, 100);
          sketch.fill(0, 100, 100);
          sketch.ellipse(this.x, this.y, 8, 8);
        }
      }
    },
  };

  const activeSketches = {};

  document.addEventListener("DOMContentLoaded", function () {
    // Attach click handlers to all play buttons
    document.querySelectorAll(".play-button").forEach((button) => {
      button.addEventListener("click", function () {
        const targetId = this.getAttribute("data-target");
        toggleSketch(targetId);
      });
    });

    // Load All button
    document.getElementById("loadAll").addEventListener("click", function () {
      for (let id in sketches) {
        if (!activeSketches[id]) {
          loadSketch(id);
        }
      }
    });

    // Reset All button
    document.getElementById("resetAll").addEventListener("click", function () {
      for (let id in activeSketches) {
        removeSketch(id);
      }
    });
  });

  function toggleSketch(id) {
    if (activeSketches[id]) {
      removeSketch(id);
    } else {
      loadSketch(id);
    }
  }

  function loadSketch(id) {
    if (!activeSketches[id]) {
      const container = document.getElementById(id);
      container.querySelector(".sketch-placeholder").style.display = "none";

      activeSketches[id] = new p5(sketches[id], id);
    }
  }

  function removeSketch(id) {
    if (activeSketches[id]) {
      activeSketches[id].remove();
      delete activeSketches[id];

      const container = document.getElementById(id);
      container.querySelector(".sketch-placeholder").style.display = "flex";
    }
  }
</script>
