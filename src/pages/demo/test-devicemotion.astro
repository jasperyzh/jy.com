---
import BaseLayout from "@/layouts/BaseLayout.astro";
--- 

<BaseLayout title="p5.js Sensor Snowglobe">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/p5.js"
  ></script>
  <main>
    <div id="sketch-container"></div>

    <div id="debug">
      <h3>Sensor Debug Info</h3>
      <p>
        Status: <span id="status"
          >Requesting permissions... (Tap screen if needed)</span>
      </p>
      <p>Num. Datapoints: <span id="datapoints">0</span></p>
      <hr />
      <p><strong>Orientation (deg)</strong></p>
      <p>X-axis (β): <span id="beta">0</span>°</p>
      <p>Y-axis (γ): <span id="gamma">0</span>°</p>
      <p>Z-axis (α): <span id="alpha">0</span>°</p>
      <hr />
      <p><strong>Accelerometer (m/s²)</strong></p>
      <p>X-axis: <span id="accelX">0</span></p>
      <p>Y-axis: <span id="accelY">0</span></p>
      <p>Z-axis: <span id="accelZ">0</span></p>
      <p>Interval (ms): <span id="interval">0.00</span></p>
      <p>Magnitude: <span id="accelMag">0.00</span></p>
      <hr />
      <p><strong>Accelerometer including Gravity (m/s²)</strong></p>
      <p>X-axis: <span id="accelGX">0</span></p>
      <p>Y-axis: <span id="accelGY">0</span></p>
      <p>Z-axis: <span id="accelGZ">0</span></p>
      <p>Effective Gravity X: <span id="effGravX">0.00</span></p>
      <p>Effective Gravity Y: <span id="effGravY">0.00</span></p>
      <hr />
      <p><strong>Gyroscope (°/s)</strong></p>
      <p>X-axis: <span id="gyroX">0</span></p>
      <p>Y-axis: <span id="gyroY">0</span></p>
      <p>Z-axis: <span id="gyroZ">0</span></p>
    </div>
  </main>
</BaseLayout>
<script is:inline>
  let particles = [];
  const numParticles = 200;

  // Sensor Data Storage
  let currentOrientation = { alpha: 0, beta: 0, gamma: 0 };
  let currentAcceleration = { x: 0, y: 0, z: 0 };
  let currentAccGravity = { x: 0, y: 0, z: 0 };
  let currentRotationRate = { alpha: 0, beta: 0, gamma: 0 };
  let dataInterval = 0;
  let dataCount = 0;

  // Physics related
  let gravity; // A p5.Vector based on accGravity
  const shakeThreshold = 15; // m/s^2 - adjust this based on testing
  const shakeIntensityFactor = 0.5; // How much shake affects particle velocity
  const gravityFactor = 0.05; // Scales sensor gravity to p5 force

  // Debug display elements
  let statusEl, dataPointsEl;
  let betaEl, gammaEl, alphaEl;
  let accelXEl, accelYEl, accelZEl, intervalEl, accelMagEl;
  let accelGXEl, accelGYEl, accelGZEl, effGravXEl, effGravYEl;
  let gyroXEl, gyroYEl, gyroZEl;

  // Permissions flag
  let hasSensorPermission = false;

  function setup() {
    let canvas = createCanvas(windowWidth, windowHeight);
    canvas.parent("sketch-container"); // Attach canvas to div

    // Initialize gravity pointing down initially
    gravity = createVector(0, 0.1); // Default small downward gravity

    // Create particles
    for (let i = 0; i < numParticles; i++) {
      particles.push(new Particle(random(width), random(height)));
    }

    // Get handles to Debug elements
    statusEl = select("#status");
    dataPointsEl = select("#datapoints");
    betaEl = select("#beta");
    gammaEl = select("#gamma");
    alphaEl = select("#alpha");
    accelXEl = select("#accelX");
    accelYEl = select("#accelY");
    accelZEl = select("#accelZ");
    intervalEl = select("#interval");
    accelMagEl = select("#accelMag");
    accelGXEl = select("#accelGX");
    accelGYEl = select("#accelGY");
    accelGZEl = select("#accelGZ");
    effGravXEl = select("#effGravX");
    effGravYEl = select("#effGravY");
    gyroXEl = select("#gyroX");
    gyroYEl = select("#gyroY");
    gyroZEl = select("#gyroZ");

    // --- Sensor Permission Handling ---
    // iOS requires a user gesture to request permissions.
    // We'll try adding listeners directly. If it fails on iOS,
    // the user might need to tap the screen once.
    statusEl.html("Attempting to access sensors... Tap screen if needed.");

    if (
      typeof DeviceOrientationEvent !== "undefined" &&
      typeof DeviceOrientationEvent.requestPermission === "function"
    ) {
      // iOS 13+ handling
      DeviceOrientationEvent.requestPermission()
        .then((permissionState) => {
          if (permissionState === "granted") {
            window.addEventListener("deviceorientation", handleOrientation);
            return DeviceMotionEvent.requestPermission(); // Chain permission requests
          } else {
            statusEl.html("Orientation permission denied.");
            throw new Error("Permission Denied");
          }
        })
        .then((permissionState) => {
          if (permissionState === "granted") {
            window.addEventListener("devicemotion", handleMotion);
            hasSensorPermission = true;
            statusEl.html("Sensor access granted!");
          } else {
            statusEl.html("Motion permission denied.");
            throw new Error("Permission Denied");
          }
        })
        .catch((error) => {
          console.error("Sensor permission error:", error);
          if (!hasSensorPermission) {
            // Only show error if not already granted
            statusEl.html(
              `Sensor Error: ${error.message}. Try tapping screen or check browser settings.`
            );
          }
        });
      // Add a touch listener as a fallback to trigger request
      canvas.mousePressed(requestSensorPermissions);
      canvas.touchStarted(requestSensorPermissions); // Also for touch devices
    } else {
      // Non-iOS 13+ or devices that don't require explicit permission
      console.log("Attempting to add sensor listeners directly.");
      window.addEventListener("deviceorientation", handleOrientation);
      window.addEventListener("devicemotion", handleMotion);
      // Assume permission is granted implicitly or not needed,
      // but check if data arrives later. Set status initially.
      statusEl.html("Sensors might be active (or not supported/required).");
      // We can refine this status in the event handlers if data comes in.
      hasSensorPermission = true; // Tentatively assume ok
    }
  }

  // Function to be called on user interaction for iOS permission request
  function requestSensorPermissions() {
    if (
      typeof DeviceOrientationEvent !== "undefined" &&
      typeof DeviceOrientationEvent.requestPermission === "function"
    ) {
      console.log("Requesting permissions via user interaction...");
      DeviceOrientationEvent.requestPermission()
        .then((permissionState) => {
          if (permissionState === "granted") {
            window.addEventListener("deviceorientation", handleOrientation);
            return DeviceMotionEvent.requestPermission();
          } else {
            statusEl.html("Orientation permission denied.");
            throw new Error("Permission Denied");
          }
        })
        .then((permissionState) => {
          if (permissionState === "granted") {
            window.addEventListener("devicemotion", handleMotion);
            hasSensorPermission = true;
            statusEl.html("Sensor access granted!");
          } else {
            statusEl.html("Motion permission denied.");
            throw new Error("Permission Denied");
          }
        })
        .catch((error) => {
          console.error("Sensor permission error:", error);
          if (!hasSensorPermission) {
            statusEl.html(
              `Sensor Error: ${error.message}. Check browser settings.`
            );
          }
        });
    }
    // Remove the listener after first interaction attempt
    let canvas = select("#sketch-container canvas");
    if (canvas) {
      canvas.mousePressed(null);
      canvas.touchStarted(null);
    }
  }

  function draw() {
    background(20, 40, 80); // Dark blue background

    // Update and display particles
    for (let particle of particles) {
      // Apply the calculated gravity vector
      let scaledGravity = p5.Vector.mult(gravity, particle.mass); // Gravity affects heavier particles more? (optional)
      //let scaledGravity = gravity.copy(); // Uncomment this for uniform gravity effect
      particle.applyForce(scaledGravity);

      // Apply gentle wind/randomness
      let wind = p5.Vector.random2D();
      wind.mult(0.01);
      particle.applyForce(wind);

      particle.update();
      particle.display();
      particle.checkEdges();
    }

    // Optionally draw a subtle globe outline
    noFill();
    stroke(255, 255, 255, 50); // Faint white stroke
    strokeWeight(10);
    ellipse(
      width / 2,
      height / 2,
      min(width, height) * 0.95,
      min(width, height) * 0.95
    );
    strokeWeight(1); // Reset stroke weight
    noStroke();
  }

  // --- Event Handlers ---

  function handleOrientation(event) {
    dataCount++;
    currentOrientation.beta = event.beta || 0;
    currentOrientation.gamma = event.gamma || 0;
    currentOrientation.alpha = event.alpha || 0;
    updateDebugInfo();
    if (dataCount === 1 && hasSensorPermission)
      statusEl.html("Receiving sensor data."); // Update status on first data
  }

  function handleMotion(event) {
    dataCount++;
    // --- Acceleration (for shake detection) ---
    if (event.acceleration) {
      currentAcceleration.x = event.acceleration.x || 0;
      currentAcceleration.y = event.acceleration.y || 0;
      currentAcceleration.z = event.acceleration.z || 0;

      // Calculate magnitude of acceleration (ignoring Z for shake)
      let accMag = mag(currentAcceleration.x, currentAcceleration.y); // Use only X and Y for screen shake

      // --- Shake Detection ---
      if (accMag > shakeThreshold) {
        // console.log("Shake detected! Magnitude:", accMag);
        shakeParticles(currentAcceleration.x, currentAcceleration.y, accMag);
      }
    }

    // --- Acceleration Including Gravity (for gravity direction) ---
    if (event.accelerationIncludingGravity) {
      currentAccGravity.x = event.accelerationIncludingGravity.x || 0;
      currentAccGravity.y = event.accelerationIncludingGravity.y || 0;
      currentAccGravity.z = event.accelerationIncludingGravity.z || 0;

      // Map sensor gravity to p5 sketch gravity
      // Sensor X maps roughly to p5 X
      // Sensor Y maps roughly to p5 Y, BUT p5's Y is inverted (down is positive)
      // Adjust the multiplier (`gravityFactor`) to control gravity strength
      gravity.set(
        currentAccGravity.x * gravityFactor,
        currentAccGravity.y * gravityFactor // Sensor Y tilt up/down maps directly to p5 Y
      );
      // Limit gravity strength to prevent excessive force
      gravity.limit(0.5);
    }

    // --- Rotation Rate ---
    if (event.rotationRate) {
      currentRotationRate.beta = event.rotationRate.beta || 0; // X
      currentRotationRate.gamma = event.rotationRate.gamma || 0; // Y
      currentRotationRate.alpha = event.rotationRate.alpha || 0; // Z
    }

    dataInterval = event.interval * 1000; // Convert to ms

    updateDebugInfo();
    if (dataCount === 1 && hasSensorPermission)
      statusEl.html("Receiving sensor data."); // Update status on first data
  }

  // --- Helper Functions ---

  function shakeParticles(accX, accY, magnitude) {
    for (let particle of particles) {
      // Add velocity based on the direction and intensity of the shake
      // Use a fraction of the raw acceleration value
      let shakeForce = createVector(accX, accY); // Use device X/Y directly
      shakeForce.mult(shakeIntensityFactor * (magnitude / shakeThreshold)); // Scale by how much threshold was exceeded
      shakeForce.limit(10); // Limit max shake boost

      // Apply as an impulse (sudden velocity change)
      particle.vel.add(shakeForce);

      // Optional: Add some randomness too
      particle.vel.add(p5.Vector.random2D().mult(random(1, 3)));
    }
  }

  function updateDebugInfo() {
    if (!betaEl) return; // Don't update if elements aren't ready

    dataPointsEl.html(dataCount);
    // Orientation
    betaEl.html(currentOrientation.beta.toFixed(1));
    gammaEl.html(currentOrientation.gamma.toFixed(1));
    alphaEl.html(currentOrientation.alpha.toFixed(1));
    // Acceleration
    accelXEl.html(currentAcceleration.x.toFixed(2));
    accelYEl.html(currentAcceleration.y.toFixed(2));
    accelZEl.html(currentAcceleration.z.toFixed(2));
    intervalEl.html(dataInterval.toFixed(2));
    accelMagEl.html(
      mag(
        currentAcceleration.x,
        currentAcceleration.y,
        currentAcceleration.z
      ).toFixed(2)
    );
    // Accel including Gravity
    accelGXEl.html(currentAccGravity.x.toFixed(2));
    accelGYEl.html(currentAccGravity.y.toFixed(2));
    accelGZEl.html(currentAccGravity.z.toFixed(2));
    effGravXEl.html(gravity.x.toFixed(3)); // Show the calculated p5 gravity
    effGravYEl.html(gravity.y.toFixed(3)); // Show the calculated p5 gravity
    // Gyroscope
    gyroXEl.html(currentRotationRate.beta.toFixed(1)); // Beta is X axis rot rate
    gyroYEl.html(currentRotationRate.gamma.toFixed(1)); // Gamma is Y axis rot rate
    gyroZEl.html(currentRotationRate.alpha.toFixed(1)); // Alpha is Z axis rot rate
  }

  // --- Particle Class ---
  class Particle {
    constructor(x, y) {
      this.pos = createVector(x, y);
      this.vel = createVector(random(-1, 1), random(-1, 1)); // Start with slight random motion
      this.acc = createVector(0, 0);
      this.size = random(3, 8);
      this.alpha = random(150, 255);
      this.mass = this.size / 4; // Heavier particles are bigger (optional)
      this.damping = 0.98; // Simulate friction/drag (e.g., in liquid)
    }

    applyForce(force) {
      // Acceleration = Force / Mass (A = F/M)
      let f = p5.Vector.div(force, this.mass); // Use this if using mass
      //let f = force.copy(); // Use this if ignoring mass
      this.acc.add(f);
    }

    update() {
      this.vel.add(this.acc);
      this.vel.mult(this.damping); // Apply damping
      this.vel.limit(15); // Max speed
      this.pos.add(this.vel);
      this.acc.mult(0); // Clear acceleration for the next frame
    }

    display() {
      fill(255, 255, 255, this.alpha); // White snowflakes
      noStroke();
      ellipse(this.pos.x, this.pos.y, this.size, this.size);
    }

    checkEdges() {
      // Wrap around horizontally
      if (this.pos.x > width + this.size) {
        this.pos.x = -this.size;
      } else if (this.pos.x < -this.size) {
        this.pos.x = width + this.size;
      }

      // Wrap around vertically (or reset)
      // Resetting to top when hitting bottom looks more like shaken snow
      if (this.pos.y > height + this.size) {
        //this.pos.y = -this.size; // Wrap vertically
        this.pos.y = random(-20, -this.size); // Reset near top randomly
        this.pos.x = random(width); // Also reset x randomly when hitting bottom
        this.vel.y *= -0.1; // Lose most vertical velocity
      } else if (this.pos.y < -this.size) {
        this.pos.y = height + this.size; // Wrap from top to bottom
      }
    }
  }

  // Make canvas resize with window
  function windowResized() {
    resizeCanvas(windowWidth, windowHeight);
    // Potentially redistribute particles or adjust simulation bounds if needed
  }
</script>
<style is:inline>
  body {
    margin: 0;
    padding: 0;
    overflow: hidden; /* Prevent scrolling */
    background-color: #333; /* Dark background for contrast */
    color: #eee;
    font-family: sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  #sketch-container {
    position: fixed; /* Keep canvas fixed */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1; /* Canvas below debug info */
  }

  #debug {
    position: fixed; /* Keep debug info fixed */
    bottom: 10px;
    left: 10px;
    background-color: rgba(0, 0, 0, 0.7);
    padding: 10px;
    border-radius: 5px;
    font-size: 0.8em;
    max-width: 90%;
    max-height: 45%; /* Limit height */
    overflow-y: auto; /* Allow scrolling if needed */
    z-index: 10; /* Debug info above canvas */
  }

  #debug h3 {
    margin-top: 0;
  }

  #debug p {
    margin: 4px 0;
  }

  #debug span {
    font-weight: bold;
    color: #ffcc00; /* Highlight values */
  }

  /* Style the canvas created by p5.js */
  canvas {
    display: block; /* Remove extra space below canvas */
  }
</style>
