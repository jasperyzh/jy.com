---
import BaseLayout from "@/layouts/BaseLayout.astro";

const title = "Tailwind CSS Best Practices - DRY Styling";
---
<BaseLayout title={title}>
  <div class="container mx-auto px-4 py-8 max-w-4xl prose dark:prose-invert prose-headings:font-bold prose-a:text-blue-600 dark:prose-a:text-blue-400">
    <h1 class="text-3xl font-bold mb-6">Tailwind CSS Best Practices: DRY Styling Guide</h1>
    
    <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-8 dark:bg-blue-950 dark:border-blue-400">
      <p class="font-medium">This guide covers best practices for keeping your Tailwind CSS code DRY (Don't Repeat Yourself), handling consistent styling for base HTML elements, and organizing your styles using Tailwind's layer system.</p>
    </div>

    <h2 class="text-2xl font-bold mt-8 mb-4">1. Utilizing Tailwind's Layer System</h2>
    
    <p>Tailwind provides a layering system that helps organize styles in a cascading manner. The three main layers are:</p>
    
    <ul class="list-disc pl-6 space-y-2 mb-4">
      <li><strong>base</strong> - styles for bare HTML elements (p, h1, a)</li>
      <li><strong>components</strong> - reusable component classes</li>
      <li><strong>utilities</strong> - single-purpose utility classes</li>
    </ul>

    <h3 class="text-xl font-bold mt-6 mb-3">The Base Layer: Styling HTML Elements</h3>
    
    <p>The <code>@layer base</code> is perfect for setting default styles for HTML elements. Add this to your CSS file:</p>

    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>/* styles/global.css */
{`@layer base {
  h1 {
    @apply text-2xl font-bold mb-4;
  }
  h2 {
    @apply text-xl font-semibold mb-3;
  }
  h3 {
    @apply text-lg font-medium mb-2;
  }
  p {
    @apply mb-4 leading-relaxed;
  }
  a {
    @apply text-blue-600 hover:text-blue-800 dark:text-blue-400 
           dark:hover:text-blue-300 transition-colors duration-200;
  }
  ul, ol {
    @apply pl-5 mb-4;
  }
  ul {
    @apply list-disc;
  }
  ol {
    @apply list-decimal;
  }
  hr {
    @apply my-6 border-gray-200 dark:border-gray-700;
  }
  blockquote {
    @apply pl-4 border-l-4 border-gray-200 dark:border-gray-700 
           italic my-4;
  }
}
`}
</code></pre>

    <div class="bg-green-50 border-l-4 border-green-500 p-4 my-6 dark:bg-green-950 dark:border-green-400">
      <p><strong>Pro Tip:</strong> By styling base HTML elements, you maintain semantic HTML without needing to add classes to every element. This is especially useful for content generated from markdown or a CMS.</p>
    </div>

    <h3 class="text-xl font-bold mt-6 mb-3">The Components Layer: Reusable Patterns</h3>
    
    <p>For recurring UI patterns, use the <code>@layer components</code>:</p>

    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>@layer components {
  `
  .card {
    @apply bg-white dark:bg-gray-800 rounded-lg shadow-md 
           p-6 hover:shadow-lg transition-shadow;
  }
  
  .btn {
    @apply px-4 py-2 rounded-md font-medium transition-colors;
  }
  
  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700 
           dark:bg-blue-500 dark:hover:bg-blue-600;
  }
  
  .input-field {
    @apply w-full px-3 py-2 border border-gray-300 dark:border-gray-600
           rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500;
  }
  `
}</code></pre>

    <h3 class="text-xl font-bold mt-6 mb-3">The Utilities Layer: Custom Utilities</h3>
    
    <p>Create custom utilities for specific needs not covered by Tailwind:</p>

    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>@layer utilities {
  `
  .text-shadow {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
  }
  
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  `
}</code></pre>

    <h2 class="text-2xl font-bold mt-8 mb-4">2. Extracting Components with @apply</h2>
    
    <p>When you find yourself repeating the same sets of utility classes, extract them with <code>@apply</code>:</p>

    <p>Instead of repeating:</p>
    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-2"><code>&lt;button class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"&gt;
  Button 1
&lt;/button&gt;

&lt;button class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"&gt;
  Button 2
&lt;/button&gt;</code></pre>

    <p>Create a component class:</p>
    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>@layer components {
  `.btn-blue {
    @apply px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors;
  }`
}</code></pre>

    <p>Then simply use:</p>
    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>&lt;button class="btn-blue"&gt;Button 1&lt;/button&gt;
&lt;button class="btn-blue"&gt;Button 2&lt;/button&gt;</code></pre>

    <h2 class="text-2xl font-bold mt-8 mb-4">3. Using Theme Configuration</h2>
    
    <p>Tailwind's theme system allows you to define reusable values:</p>

    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>
{
  `
  // tailwind.config.js
module.exports = {
  theme: {
    extend: {
      colors: {
        'brand': {
          50: '#f0f9ff',
          100: '#e0f2fe',
          // ...more shades
          900: '#0c4a6e',
        },
      },
      spacing: {
        '18': '4.5rem',
        '128': '32rem',
      },
      borderRadius: {
        'xl': '1rem',
        '2xl': '2rem',
      },
    }
  }
}
`
}</code></pre>

    <p>Now you can use these values throughout your project:</p>
    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>&lt;div class="bg-brand-100 p-18 rounded-2xl"&gt;&lt;/div&gt;</code></pre>

    <h2 class="text-2xl font-bold mt-8 mb-4">4. Practical Implementation Examples</h2>
    
    <h3 class="text-xl font-bold mt-6 mb-3">Example 1: Styling Article Content</h3>
    
    <p>For blog or article content, use Tailwind's typography plugin or create your own article styles:</p>

    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>@layer components {
  `.article-content {
    @apply max-w-none;
  }
  
  .article-content h1 {
    @apply text-3xl font-bold mb-6;
  }
  
  .article-content h2 {
    @apply text-2xl font-bold mt-8 mb-4;
  }
  
  .article-content p {
    @apply mb-4 leading-relaxed;
  }
  
  .article-content a {
    @apply text-blue-600 underline hover:text-blue-800;
  }
  
  .article-content ul {
    @apply list-disc pl-6 mb-4;
  }
  
  .article-content ol {
    @apply list-decimal pl-6 mb-4;
  }
  
  .article-content blockquote {
    @apply pl-4 border-l-4 border-gray-300 italic my-6;
  }
  
  .article-content pre {
    @apply bg-gray-100 p-4 rounded-lg mb-4 overflow-x-auto;
  }
  
  .article-content img {
    @apply rounded-lg max-w-full h-auto my-6;
  }`
}</code></pre>

    <p>Then simply apply the class to your article container:</p>
    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>&lt;article class="article-content"&gt;
  &lt;h1&gt;Article Title&lt;/h1&gt;
  &lt;p&gt;Your content here...&lt;/p&gt;
  &lt;!-- The nested elements get styled automatically --&gt;
&lt;/article&gt;</code></pre>

    <h3 class="text-xl font-bold mt-6 mb-3">Example 2: Form Elements</h3>
    
    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>@layer components {
  `.form-label {
    @apply block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1;
  }
  
  .form-input {
    @apply w-full px-3 py-2 border border-gray-300 dark:border-gray-600
           rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500
           bg-white dark:bg-gray-800;
  }
  
  .form-select {
    @apply form-input appearance-none bg-no-repeat pr-10;
    background-image: url("data:image/svg+xml,...");
    background-position: right 0.5rem center;
  }
  
  .form-checkbox {
    @apply h-4 w-4 rounded border-gray-300 text-blue-600
           focus:ring-blue-500 dark:border-gray-600;
  }
  
  .form-group {
    @apply mb-4;
  }`
}</code></pre>

    <h2 class="text-2xl font-bold mt-8 mb-4">5. Best Practices and Tips</h2>
    
    <ul class="space-y-4 mb-6">
      <li class="bg-amber-50 p-3 rounded-md dark:bg-amber-950">
        <strong>Use Group and Peer Modifiers:</strong> Leverage Tailwind's group and peer modifiers for complex interactions rather than custom CSS.
      </li>
      <li class="bg-amber-50 p-3 rounded-md dark:bg-amber-950">
        <strong>Prefer Configuration Over Custom CSS:</strong> Whenever possible, extend your Tailwind config instead of writing custom CSS.
      </li>
      <li class="bg-amber-50 p-3 rounded-md dark:bg-amber-950">
        <strong>Mobile-First Approach:</strong> Start with mobile styles and layer on larger breakpoint styles using responsive prefixes.
      </li>
      <li class="bg-amber-50 p-3 rounded-md dark:bg-amber-950">
        <strong>Extract Complex Responsive Patterns:</strong> When responsive designs get complex, extract them to component classes.
      </li>
      <li class="bg-amber-50 p-3 rounded-md dark:bg-amber-950">
        <strong>Organize Long Class Lists:</strong> For elements with many classes, organize them by function (layout, typography, colors, etc.).
      </li>
    </ul>

    <h2 class="text-2xl font-bold mt-8 mb-4">6. Working with Dark Mode</h2>
    
    <p>Tailwind's dark mode feature works well with the layering system:</p>

    <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-x-auto mb-4"><code>@layer base {
  `body {
    @apply bg-white text-gray-900 dark:bg-gray-900 dark:text-gray-100;
  }
  
  h1, h2, h3, h4, h5, h6 {
    @apply text-gray-900 dark:text-white;
  }
  
  a {
    @apply text-blue-600 dark:text-blue-400 hover:text-blue-800 
           dark:hover:text-blue-300;
  }`
}</code></pre>
    
    <h2 class="text-2xl font-bold mt-8 mb-4">7. Conclusion</h2>
    
    <p>By using Tailwind's layering system effectively, you can:</p>
    
    <ul class="list-disc pl-6 space-y-2 mb-4">
      <li>Keep your HTML clean by styling base elements</li>
      <li>Extract repetitive patterns into reusable components</li>
      <li>Create custom utilities for project-specific needs</li>
      <li>Maintain consistency through theme configuration</li>
      <li>Avoid duplicating code across your project</li>
    </ul>
    
    <p>This approach gives you the best of both worlds: the flexibility and power of Tailwind's utility-first approach with the maintainability of DRY, organized code.</p>
    
    <div class="bg-gray-100 p-6 rounded-lg mt-8 dark:bg-gray-800">
      <h3 class="text-lg font-bold mb-3">Sample Tailwind Setup Structure</h3>
      <pre class="bg-white dark:bg-gray-900 p-4 rounded-md overflow-x-auto"><code>
      {
        `
// src/styles/main.css
@import 'tailwindcss/base';
@import './base.css';      // Your base styles

@import 'tailwindcss/components';
@import './components.css'; // Your component styles

@import 'tailwindcss/utilities';
@import './utilities.css';  // Your utility styles
// `
      }  
      </code></pre>
    </div>
  </div>
</BaseLayout>
