---
/**
 * Individual microblog post page
 * Displays a single microblog post with all its content and metadata
 */
import { getCollection, render } from "astro:content";
import Layout from "@/layouts/BaseLayout.astro";
import ReturnButton from "@/components/ReturnButton.astro";
import FormattedDate from "@/components/FormattedDate.astro";


// Generate static paths for all microblog posts
export async function getStaticPaths() {
  const allPosts = await getCollection("microblog");

  // Filter out draft posts in production
  const publishedPosts = import.meta.env.PROD
    ? allPosts.filter((post) => !post.data.draft)
    : allPosts;

  return publishedPosts.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await render(entry);

// Generate Open Graph metadata
const ogTitle = entry.data.title || `Microblog post from ${entry.data.pubDate.toLocaleDateString()}`;
const ogDescription = entry.body.substring(0, 150) + (entry.body.length > 150 ? '...' : '');
const ogImage = entry.data.media?.[0]?.url || '/placeholder.png';
---

<Layout 
  title={entry.data.title || `Microblog - ${entry.data.pubDate.toLocaleString()}`}
  description={ogDescription}
  ogImage={ogImage}
>
  <main class="container py-4">
    <article class="microblog-single-post">
      <header class="mb-4">
        <!-- Back button -->
        <ReturnButton label="Back to Microblog" href="/microblog" />
        
        <!-- Optional title -->
        {entry.data.title && <h1 class="mb-3">{entry.data.title}</h1>}
        
        <!-- Post metadata -->
        <div class="post-meta d-flex flex-wrap justify-content-between align-items-center mb-3">
          <div class="meta-date">
            <i class="bi bi-calendar me-1"></i>
            <FormattedDate date={entry.data.pubDate} />
          </div>
          
          {entry.data.tags && entry.data.tags.length > 0 && (
            <div class="meta-tags">
              {entry.data.tags.map(tag => (
                <a href={`/microblog/tags/${tag}`} class="badge bg-primary me-1 text-decoration-none">
                  #{tag}
                </a>
              ))}
            </div>
          )}
        </div>
        
        <!-- Location if available -->
        {entry.data.location && (
          <div class="meta-location mb-3">
            <i class="bi bi-geo-alt me-1"></i>
            <span>{entry.data.location.name}</span>
            
            {/* Show map if coordinates are available */}
            {entry.data.location.coordinates && (
              <div class="location-map mt-2">
                <a 
                  href={`https://www.google.com/maps/search/?api=1&query=${entry.data.location.coordinates[0]},${entry.data.location.coordinates[1]}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="btn btn-sm btn-outline-secondary"
                >
                  <i class="bi bi-map me-1"></i>
                  View on Map
                </a>
              </div>
            )}
          </div>
        )}
        
        <hr />
      </header>
      
      <div class="post-content mb-4">
        <!-- Main content -->
        <div class="content-text mb-4">
          <Content />
        </div>
        
        <!-- Media content -->
        {entry.data.media && entry.data.media.length > 0 && (
          <div class="content-media">
            {entry.data.media.map(item => (
              <div class="media-item mb-4">
                {item.type === 'image' ? (
                  <figure class="figure">
                    <img 
                      src={item.url} 
                      alt={item.alt || ''} 
                      class="figure-img img-fluid rounded"
                    />
                    {item.caption && (
                      <figcaption class="figure-caption text-center">
                        {item.caption}
                      </figcaption>
                    )}
                  </figure>
                ) : (
                  <div class="video-container">
                    <div class="ratio ratio-16x9">
                      <video 
                        controls 
                        preload="metadata"
                      >
                        <source src={item.url} type="video/mp4" />
                        Your browser does not support the video tag.
                      </video>
                    </div>
                    {item.caption && (
                      <p class="video-caption text-center mt-2">
                        {item.caption}
                      </p>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
      
      <!-- Share and action buttons -->
      <div class="post-actions mb-4">
        <div class="d-flex gap-2">
          <button class="btn btn-primary share-post" data-post-id={entry.id}>
            <i class="bi bi-share me-1"></i> Share
          </button>
          
          <a href="/microblog" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i> Back to All Posts
          </a>
        </div>
      </div>
    </article>
  </main>
  
</Layout>

<style>
  .microblog-single-post {
    max-width: 768px;
    margin: 0 auto;
  }
  
  .post-content {
    font-size: 1.2rem;
    line-height: 1.6;
  }
  
  .content-media img {
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .media-item {
    margin-bottom: 2rem;
  }
  
  /* Responsive media */
  @media (max-width: 768px) {
    .post-content {
      font-size: 1.1rem;
    }
  }
</style>

<script>
  // Handle sharing functionality
  document.addEventListener('DOMContentLoaded', () => {
    const shareButton = document.querySelector('.share-post');
    
    if (shareButton) {
      shareButton.addEventListener('click', async () => {
        const postId = shareButton.getAttribute('data-post-id');
        const currentUrl = window.location.href;
        
        // Try native sharing API first (mobile devices)
        if (navigator.share) {
          try {
            await navigator.share({
              title: document.title,
              text: 'Check out this post',
              url: currentUrl,
            });
            console.log('Shared successfully using native share');
          } catch (error) {
            console.error('Error sharing:', error);
            fallbackShare(currentUrl);
          }
        } else {
          // Fallback for desktop browsers
          fallbackShare(currentUrl);
        }
      });
    }
    
    // Fallback sharing method
    function fallbackShare(url) {
      // Create a temporary input to copy the URL
      const input = document.createElement('input');
      input.value = url;
      document.body.appendChild(input);
      input.select();
      document.execCommand('copy');
      document.body.removeChild(input);
      
      // Show feedback to user
      alert('URL copied to clipboard! You can now paste it to share.');
      
      // Update button temporarily
      const shareButton = document.querySelector('.share-post');
      if (shareButton) {
        const originalHtml = shareButton.innerHTML;
        shareButton.innerHTML = '<i class="bi bi-check-circle me-1"></i> Copied!';
        shareButton.classList.remove('btn-primary');
        shareButton.classList.add('btn-success');
        
        setTimeout(() => {
          shareButton.innerHTML = originalHtml;
          shareButton.classList.remove('btn-success');
          shareButton.classList.add('btn-primary');
        }, 2000);
      }
    }
  });
</script>